{"version":3,"file":"bundle.js","sources":["../../../../../usr/lib/node_modules/browserify/node_modules/browser-pack/_prelude.js","lib/pbfParser.js","lib/proto/osmformat.js","lib/buffer.js","lib/browser/zlib.js","lib/browser/arrayBufferReader.js","lib/proto/fileformat.js","lib/browser/fileReader.js","lib/nodejs/zlib.js","lib/nodejs/fsReader.js","node_modules/zlibjs/bin/inflate.min.js","node_modules/protobufjs/dist/ProtoBuf.noparse.js","node_modules/setimmediate/setImmediate.js","node_modules/protobufjs/node_modules/bytebuffer/dist/ByteBufferAB.js","node_modules/protobufjs/node_modules/bytebuffer/node_modules/long/index.js","node_modules/protobufjs/node_modules/bytebuffer/node_modules/long/dist/Long.js"],"names":["parse","opts","pause","paused","resume","resumeCallback","documentEndReached","createPathParser","filePath","buffer","file","callback","err","parser","fail","close","error","visitNextBlock","fileBlock","nextFileBlockIndex","fileBlocks","length","endDocument","readBlock","block","visitBlock","reader","getReader","open","fd","createFileParser","arrayBufferReader","fileReader","BLOCK_VISITORS_BY_TYPE","blobHeader","type","visitOSMHeaderBlock","visitOSMDataBlock","i","primitivegroup","visitPrimitiveGroup","pg","node","nodesView","get","way","waysView","relation","relationsView","readBlobHeaderContent","position","size","readPBFElement","fileFormat","BlobHeader","decode","readFileBlock","readBlobHeaderSize","BLOB_HEADER_SIZE_SIZE","blobHeaderSize","datasize","readFileBlocks","getFileSize","fileSize","readNextFileBlock","push","getStringTableEntry","s","str","this","cache","toUTF8","extendStringTable","st","getEntry","createNodesView","pb","createTagsList","tagsList","tags","keyId","keysVals","valId","key","val","dense","keys_vals","stringtable","collectDeltaData","id","timestamp","changeset","uid","userIndex","deltaDataList","deltaData","lat","lon","denseinfo","toNumber","user_sid","date_granularity","nodeDeltaData","lat_offset","granularity","lon_offset","version","user","nodes","Error","createTagsObject","entity","len","keyI","valI","keys","vals","addInfo","result","info","createWaysView","createNodeRefIds","nodeIds","lastRefId","refs","ways","toString","nodeRefs","createRelationsView","createMembers","members","memberObj","MemberType","blockFormat","Relation","memids","ref","role","roles_sid","types","NODE","WAY","RELATION","relations","extendPrimitiveGroup","decodePrimitiveBlock","data","PrimitiveBlock","findFileBlocksByBlobType","blobType","blocks","readBlob","Blob","blob","raw_size","zlib","inflateBlob","buf","readPBFElementFromBuffer","OSM_BLOB_DECODER_BY_TYPE","require","protoBuf","self","OSMHeader","OSMData","HeaderBlock","module","exports","createParser","newBuilder","package","messages","name","fields","rule","options","enums","default","packed","values","imports","optimize_for","java_package","services","build","pbfDecode","infl","Zlib","Inflate","Uint8Array","zlib_data","toBuffer","bufferSize","decompress","headerSize","DataView","getInt32","set","setImmediate","byteLength","url","xhr","XMLHttpRequest","responseType","onerror","evt","status","statusText","onload","response","send","deprecated","read","slice","FileReader","e","code","webkitSlice","readAsArrayBuffer","inflate","bytesReadFail","expectedBytes","readBytes","Buffer","fs","bytesRead","readInt32BE","fstat","fdStatus","q","c","d","a","split","b","m","execScript","shift","t","f","g","h","k","l","p","n","r","K","Number","POSITIVE_INFINITY","Uint32Array","Array","u","input","v","index","bufferType","resize","w","A","j","z","y","T","B","D","call","U","verify","V","method","Uint16Array","x","prototype","subarray","O","P","C","E","F","G","H","I","J","L","M","N","R","S","Q","o","charCodeAt","X","Y","Z","$","W","ADAPTIVE","BLOCK","Object","global","init","ByteBuffer","ProtoBuf","VERSION","WIRE_TYPES","VARINT","BITS64","LDELIM","STARTGROUP","ENDGROUP","BITS32","PACKABLE_WIRE_TYPES","TYPES","int32","wireType","uint32","sint32","int64","uint64","sint64","bool","double","string","bytes","fixed32","sfixed32","fixed64","sfixed64","float","enum","message","group","ID_MIN","ID_MAX","Long","convertFieldsToCamelCase","populateAccessors","Util","create","arguments","IS_NODE","readFileSync","resolve","XHR","XMLHttpFactories","ActiveXObject","fetch","path","readFile","setRequestHeader","overrideMimeType","responseText","onreadystatechange","readyState","isArray","obj","Lang","OPEN","CLOSE","OPTOPEN","OPTCLOSE","OPTEND","EQUAL","END","STRINGOPEN","STRINGCLOSE","STRINGOPEN_SQ","STRINGCLOSE_SQ","COPTOPEN","COPTCLOSE","DELIM","RULE","TYPE","NAME","TYPEDEF","TYPEREF","FQTYPEREF","NUMBER","NUMBER_DEC","NUMBER_HEX","NUMBER_OCT","NUMBER_FLT","ID","NEGID","WHITESPACE","STRING","BOOL","Reflect","skipTillGroupEnd","expectedId","tag","readVarint32","readUint8","offset","mkLong","value","unsigned","low","high","fromString","fromNumber","builder","parent","className","TPrototype","fqn","ptr","includeClass","Namespace","children","NamespacePrototype","getChildren","addChild","child","other","getChild","Message","Field","originalName","nameOrId","qn","excludeFields","part","ns","defineProperty","buildOpt","opt","getOption","isGroup","extensions","clazz","_fields","_fieldsById","_fieldsByName","MessagePrototype","rebuild","cloneRaw","includeBinaryAsBase64","clone","hasOwnProperty","toBase64","oneofs","OneOf","var_args","Builder","field","repeated","required","defaultValue","encode","ArrayBuffer","$set","add","noAssert","verifyValue","$add","oneof","$get","ExtensionField","Name","replace","match","toUpperCase","substring","setter","getter","noVerify","undefined","isNew","le","littleEndian","LE","flip","calculate","encodeDelimited","enc","writeVarint32","remaining","append","encodeAB","toArrayBuffer","encodeNB","encode64","encodeHex","toHex","toRaw","wrap","msg","decodeDelimited","off","decode64","decodeHex","Enum","Extension","fieldMissing","expectedGroupEndId","start","resolvedType","_toCamelCase","$0","$1","FieldPrototype","skipRepeated","bind","res","String","isByteBuffer","Value","indexOf","ensureCapacity","encodeValue","varintLen","calculateVarint32","contents","writeVarint64","writeVarint32ZigZag","writeUint32","writeInt32","writeVarint64ZigZag","writeUint64","writeInt64","toLowerCase","writeFloat32","writeFloat64","writeVString","prevOffset","bb","ni","calculateValue","calculateVarint64","zigZagEncode32","zigZagEncode64","calculateUTF8Bytes","nBytes","readVarint32ZigZag","readUint32","readInt32","readVarint64","toUnsigned","readVarint64ZigZag","readUint64","readInt64","readFloat","readDouble","readVString","limit","extension","object","EnumPrototype","enm","Service","root","ServicePrototype","rpcImpl","setTimeout","rpc","RPCMethod","req","resolvedRequestType","resolvedResponseType","notABuffer","Method","svc","MethodPrototype","request","requestName","responseName","resolved","files","importRoot","BuilderPrototype","reset","define","pkg","test","isValidMessage","def","ids","isValidMessageField","parseInt","isValidEnum","isValidExtend","defs","stack","pop","JSON","stringify","fld","subObj","isValidService","join","ext","json","filename","delim","resetRoot","importFilename","DotProto","Parser","$2","resolveAll","lookup","loadJson","loadJsonFile","addFromSetImmediateArguments","args","tasksByHandle","nextHandle","partiallyApplied","apply","handler","Function","runIfPresent","handle","currentlyRunningATask","task","clearImmediate","installNextTickImplementation","process","nextTick","canUsePostMessage","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","installPostMessageImplementation","messagePrefix","Math","random","onGlobalMessage","event","source","addEventListener","attachEvent","installMessageChannelImplementation","channel","MessageChannel","port1","port2","installReadyStateChangeImplementation","html","doc","documentElement","script","createElement","removeChild","appendChild","installSetTimeoutImplementation","document","attachTo","getPrototypeOf","loadByteBuffer","stringSource","stringDestination","cs","ps","stringFromCharCode","capacity","DEFAULT_CAPACITY","DEFAULT_ENDIAN","DEFAULT_NOASSERT","RangeError","EMPTY_BUFFER","view","markedOffset","LITTLE_ENDIAN","BIG_ENDIAN","ByteBufferPrototype","fromCharCode","allocate","concat","buffers","encoding","bi","fromBase64","fromHex","fromBinary","fromUTF8","fromDebug","TypeError","byteOffset","setUint8","writeInt8","relative","capacity0","setInt8","writeByte","readInt8","getInt8","readByte","writeUint8","capacity1","getUint8","writeInt16","capacity2","setInt16","writeShort","readInt16","getInt16","readShort","writeUint16","capacity3","setUint16","readUint16","getUint16","capacity4","setInt32","writeInt","readInt","capacity5","setUint32","getUint32","capacity6","writeLong","readLong","capacity7","capacity8","setFloat32","writeFloat","readFloat32","getFloat32","capacity9","setFloat64","writeDouble","readFloat64","getFloat64","MAX_VARINT32_BYTES","zigZagDecode32","capacity10","temp","ioffset","MAX_VARINT64_BYTES","part0","toInt","part1","shiftRightUnsigned","part2","toSigned","shiftLeft","xor","shiftRight","zigZagDecode64","and","ONE","negate","capacity11","fromBits","writeCString","utfx","calculateUTF16asUTF8","capacity12","encodeUTF16toUTF8","readCString","sd","decodeUTF8toUTF16","writeIString","capacity13","readIString","METRICS_CHARS","METRICS_BYTES","writeUTF8String","capacity14","writeString","calculateUTF8Chars","readUTF8String","metrics","decodeUTF8","cp","UTF8toUTF16","readString","capacity15","capacity16","appendTo","target","assert","clear","copy","compact","begin","end","copyTo","targetOffset","sourceOffset","sourceLimit","targetRelative","current","fill","mark","order","BE","bigEndian","prepend","arrayView","diff","prependTo","printDebug","out","console","log","toDebug","reverse","skip","forceCopy","toBinary","toColumns","lxiv","aout","ain","src","dst","t1","t2","btoa","atob","b64","cc","pt","charCode","columns","hex","asc","ch","rs","ho","hm","hl","charAt","isNaN","isFinite","MAX_CODEPOINT","encodeUTF8","UTF16toUTF8","c1","c2","calculateCodePoint","calculateUTF8","isLong","INT_CACHE","UINT_CACHE","fromInt","cachedObj","ZERO","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_32_DBL","lowBits","highBits","radix","radixToPower","pow","min","power","multiply","fromValue","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","UZERO","UONE","NEG_ONE","isZero","rem","isNegative","equals","radixLong","div","subtract","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","isPositive","isOdd","isEven","notEquals","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtrahend","multiplier","divisor","approx","halfThis","max","floor","log2","ceil","LN2","delta","approxRes","approxRem","modulo","or","numBits"],"mappings":"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","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * The following little overview extends the osm pbf file structure description\n * from http://wiki.openstreetmap.org/wiki/PBF_Format:\n *\n * - [1] file\n *   - [n] file blocks\n *     - [1] blob header\n *     - [1] blob\n */\n\nvar blockFormat = require('./proto/osmformat.js');\nvar fileFormat = require('./proto/fileformat.js');\nvar protoBuf = require(\"protobufjs\");\nvar buf = require('./buffer.js');\n\nvar zlib, reader, arrayBufferReader, fileReader;\n\n// check if running in Browser or Node.js (use self not window because of Web Workers)\nif (typeof self !== 'undefined') {\n    zlib = require('./browser/zlib.js');\n    arrayBufferReader = require('./browser/arrayBufferReader.js');\n    fileReader = require('./browser/fileReader.js');\n} else {\n    zlib = require('./nodejs/zlib.js');\n    reader = require('./nodejs/fsReader.js');\n}\n\nfunction parse(opts){\n    var paused, resumeCallback, documentEndReached;\n\n    documentEndReached = false;\n    paused = false;\n    resumeCallback = null;\n\n    createPathParser({\n        filePath: opts.filePath,\n        buffer: opts.buffer,\n        file: opts.file,\n        callback: function(err, parser){\n            var nextFileBlockIndex;\n\n            function fail(err){\n                if( parser ){\n                    parser.close();\n                }\n\n                return opts.error(err);\n            }\n            \n            if(err){\n                return fail(err);\n            }\n\n            nextFileBlockIndex = 0;\n\n            function visitNextBlock(){\n                var fileBlock;\n\n                if(documentEndReached || paused){\n                    return;\n                }\n\n                if(nextFileBlockIndex >= parser.fileBlocks.length){\n                    documentEndReached = true;\n\n                    parser.close();\n\n                    opts.endDocument();\n\n                    return;\n                }\n\n                fileBlock = parser.fileBlocks[nextFileBlockIndex];\n\n                parser.readBlock(fileBlock, function(err, block){\n                    if(err){\n                        return fail(err);\n                    }\n\n                    visitBlock(fileBlock, block, opts);\n\n                    nextFileBlockIndex += 1;\n\n                    visitNextBlock();\n                });\n            }\n\n            resumeCallback = visitNextBlock;\n\n            visitNextBlock();\n        }\n    });\n\n    function pause(){\n        paused = true;\n    }\n\n    function resume(){\n        paused = false;\n\n        if(resumeCallback){\n            resumeCallback();\n        }\n    }\n\n    return {\n        pause: pause,\n\n        resume: resume\n    };\n}\n\nfunction createPathParser(opts){\n    reader = getReader(opts);\n    reader.open(opts, function(err, fd){\n        createFileParser(fd, function(err, parser){\n            if(err){\n                return opts.callback(err);\n            }\n\n            parser.close = function(callback){\n                return reader.close(fd, callback);\n            };\n\n            return opts.callback(null, parser);\n        });\n    });\n}\n\nfunction getReader(opts){\n    if(!arrayBufferReader){\n        // Node.js\n        return reader;\n    }\n    \n    if(opts.file){\n        return fileReader;\n    }\n    return arrayBufferReader;\n}\n\nfunction visitBlock(fileBlock, block, opts){\n    BLOCK_VISITORS_BY_TYPE[fileBlock.blobHeader.type](block, opts);\n}\n\nfunction visitOSMHeaderBlock(block, opts){\n    // TODO\n}\n\nfunction visitOSMDataBlock(block, opts){\n    var i;\n\n    for(i = 0; i < block.primitivegroup.length; ++i){\n        visitPrimitiveGroup(block.primitivegroup[i], opts);\n    }\n}\n\nfunction visitPrimitiveGroup(pg, opts){\n    var i;\n\n    // visit nodes\n    if(opts.node){\n        for(i = 0; i < pg.nodesView.length; ++i){\n            opts.node(pg.nodesView.get(i));\n        }\n    }\n\n    // visit ways\n    if(opts.way){\n        for(i = 0; i < pg.waysView.length; ++i){\n            opts.way(pg.waysView.get(i));\n        }\n    }\n\n    // visit relations\n    if(opts.relation){\n        for(i = 0; i < pg.relationsView.length; ++i){\n            opts.relation(pg.relationsView.get(i));\n        }\n    }\n}\n\nvar BLOCK_VISITORS_BY_TYPE = {\n    OSMHeader: visitOSMHeaderBlock,\n    OSMData: visitOSMDataBlock\n};\n\nvar BLOB_HEADER_SIZE_SIZE = 4;\n\nfunction readBlobHeaderContent(fd, position, size, callback){\n    return reader.readPBFElement(fd, position, size, fileFormat.BlobHeader.decode, callback);\n}\n\nfunction readFileBlock(fd, position, callback){\n    reader.readBlobHeaderSize(fd, position, BLOB_HEADER_SIZE_SIZE, function(err, blobHeaderSize){\n        if(err){\n            return callback(err);\n        }\n\n        return readBlobHeaderContent(fd, position + BLOB_HEADER_SIZE_SIZE, blobHeaderSize, function(err, blobHeader){\n            if(err){\n                return callback(err);\n            }\n\n            blobHeader.position = position + BLOB_HEADER_SIZE_SIZE + blobHeaderSize;\n\n            return callback(err, {\n                position: position,\n                size: BLOB_HEADER_SIZE_SIZE + blobHeaderSize + blobHeader.datasize,\n                blobHeader: blobHeader\n            });\n        });\n    });\n}\n\nfunction readFileBlocks(fd, callback){\n    reader.getFileSize(fd, function(err, fileSize){\n        var position, fileBlocks;\n\n        position = 0;\n        fileBlocks = [];\n\n        function readNextFileBlock(){\n            readFileBlock(fd, position, function(err, fileBlock){\n                if(err){\n                    return callback(err);\n                }\n\n                fileBlocks.push(fileBlock);\n\n                position = fileBlock.position + fileBlock.size;\n\n                if(position < fileSize){\n                    readNextFileBlock();\n                }\n                else{\n                    return callback(null, fileBlocks);\n                }\n            });\n        }\n\n        readNextFileBlock();\n    });\n}\n\nfunction getStringTableEntry(i){\n    var s, str;\n\n    // decode StringTable entry only once and cache\n    if (i in this.cache) {\n        str = this.cache[i];\n    } else {\n        s = this.s[i];\n\n        str = s.toUTF8();\n        this.cache[i] = str;\n    }\n\n    return str;\n}\n\nfunction extendStringTable(st){\n    st.cache = {};\n    st.getEntry = getStringTableEntry;\n}\n\nfunction createNodesView(pb, pg){\n    var length, tagsList, deltaData;\n\n    if(pg.nodes.length !== 0){\n        throw new Error('primitivegroup.nodes.length !== 0 not supported yet');\n    }\n\n    length = 0;\n\n    if(pg.dense){\n        length = pg.dense.id.length;\n    }\n\n    function createTagsList(){\n        var tagsList, i, tagsListI, tags, keyId, keysVals, valId, key, val;\n\n        if(!pg.dense){\n            return null;\n        }\n\n        keysVals = pg.dense.keys_vals;\n        tags = {};\n        tagsList = [];\n\n        for(i = 0; i < keysVals.length;){\n            keyId = keysVals[i++];\n\n            if(keyId === 0){\n                tagsList.push(tags);\n\n                tags = {};\n\n                continue;\n            }\n            \n            valId = keysVals[i++];\n\n            key = pb.stringtable.getEntry(keyId);\n            val = pb.stringtable.getEntry(valId);\n\n            tags[key] = val;\n        }\n\n        return tagsList;\n    }\n\n    tagsList = createTagsList();\n\n    function collectDeltaData(){\n        var i, id, timestamp, changeset, uid, userIndex, deltaDataList, deltaData, lat, lon;\n\n        if(!pg.dense){\n            return null;\n        }\n\n        id = 0;\n        lat = 0;\n        lon = 0;\n\n        if(pg.dense.denseinfo){\n            timestamp = 0;\n            changeset = 0;\n            uid = 0;\n            userIndex = 0;\n        }\n\n        deltaDataList = [];\n\n        for(i = 0; i < length; ++i){\n            // TODO we should test wheather adding 64bit numbers works fine with high values\n            id += pg.dense.id[i].toNumber();\n\n            lat += pg.dense.lat[i].toNumber();\n            lon += pg.dense.lon[i].toNumber();\n\n            deltaData = {\n                id: id,\n                lat: lat,\n                lon: lon\n            };\n\n            if(pg.dense.denseinfo){\n                // TODO we should test wheather adding 64bit numbers works fine with high values\n                timestamp += pg.dense.denseinfo.timestamp[i].toNumber();\n                changeset += pg.dense.denseinfo.changeset[i].toNumber();\n\n                // TODO we should test wheather adding 64bit numbers works fine with high values\n                uid += pg.dense.denseinfo.uid[i];\n\n                userIndex += pg.dense.denseinfo.user_sid[i];\n\n                deltaData.timestamp = timestamp * pb.date_granularity;\n                deltaData.changeset = changeset;\n                deltaData.uid = uid;\n                deltaData.userIndex = userIndex;\n            }\n\n            deltaDataList.push(deltaData);\n        }\n\n        return deltaDataList;\n    }\n\n    deltaData = collectDeltaData();\n\n    function get(i){\n        var node, nodeDeltaData;\n\n        nodeDeltaData = deltaData[i];\n\n        node = {\n            id: '' + nodeDeltaData.id,\n            lat: (pb.lat_offset.toNumber() + (pb.granularity * nodeDeltaData.lat)) / 1000000000,\n            lon: (pb.lon_offset.toNumber() + (pb.granularity * nodeDeltaData.lon)) / 1000000000,\n            tags: tagsList[i]\n        };\n\n        if(pg.dense.denseinfo){\n            node.version = pg.dense.denseinfo.version[i];\n            node.timestamp = nodeDeltaData.timestamp;\n            node.changeset = nodeDeltaData.changeset;\n            node.uid = '' + nodeDeltaData.uid;\n            node.user = pb.stringtable.getEntry(nodeDeltaData.userIndex);\n        }\n\n        return node;\n    }\n\n    return {\n        length: length,\n        get: get\n    };\n}\n\nfunction createTagsObject(pb, entity){\n    var tags, i, len, keyI, valI, key, val;\n\n    tags = {};\n\n    for(i = 0, len = entity.keys.length; i < len; ++i){\n        keyI = entity.keys[i];\n        valI = entity.vals[i];\n\n        key = pb.stringtable.getEntry(keyI);\n        val = pb.stringtable.getEntry(valI);\n\n        tags[key] = val;\n    }\n\n    return tags;\n}\n\nfunction addInfo(pb, result, info){\n    if (info) {\n        if (info.version) {\n            result.version = info.version;\n        }\n        if (info.timestamp) {\n            result.timestamp = info.timestamp.toNumber() * pb.date_granularity;\n        }\n        if (info.changeset) {\n            result.changeset = info.changeset.toNumber();\n        }\n        if (info.uid) {\n            result.uid = '' + info.uid;\n        }\n        if (info.user_sid) {\n            result.user = pb.stringtable.getEntry(info.user_sid);\n        }\n    }\n}\n\nfunction createWaysView(pb, pg){\n    var length;\n\n    length = pg.ways.length;\n\n    function get(i){\n        var way, result, info;\n\n        way = pg.ways[i];\n\n        function createNodeRefIds(){\n            var nodeIds, lastRefId, i;\n\n            nodeIds = [];\n            lastRefId = 0;\n\n            for(i = 0; i < way.refs.length; ++i){\n                // TODO we should test wheather adding 64bit numbers works fine with high values\n                lastRefId += way.refs[i].toNumber();\n\n                nodeIds.push('' + lastRefId);\n            }\n\n            return nodeIds;\n        }\n\n        result = {\n            id: way.id.toString(),\n            tags: createTagsObject(pb, way),\n            nodeRefs: createNodeRefIds()\n        };\n\n        addInfo(pb, result, way.info);\n\n        return result;\n    }\n\n    return {\n        length: length,\n        get: get\n    };\n}\n\nfunction createRelationsView(pb, pg){\n    var length;\n\n    length = pg.relations.length;\n\n    function get(i){\n        var relation, result, info;\n\n        relation = pg.relations[i];\n\n        function createMembers(){\n            var members, memberObj, lastRefId, i, MemberType, type;\n\n            MemberType = blockFormat.Relation.MemberType;\n            members = [];\n            lastRefId = 0;\n\n            for(i = 0; i < relation.memids.length; ++i){\n                memberObj = {};\n\n                // TODO we should test wheather adding 64bit numbers works fine with high values\n                lastRefId += relation.memids[i].toNumber();\n                memberObj.ref = '' + lastRefId;\n\n                memberObj.role = pb.stringtable.getEntry(relation.roles_sid[i]);\n\n                type = relation.types[i];\n                if (MemberType.NODE === type) {\n                    memberObj.type = 'node';\n                } else if(MemberType.WAY === type) {\n                    memberObj.type = 'way';\n                } else if(MemberType.RELATION === type) {\n                    memberObj.type = 'relation';\n                }\n\n                members.push(memberObj);\n            }\n\n            return members;\n        }\n\n        result = {\n            id: relation.id.toString(),\n            tags: createTagsObject(pb, relation),\n            members: createMembers()\n        };\n\n        addInfo(pb, result, relation.info);\n\n        return result;\n    }\n\n    return {\n        length: length,\n        get: get\n    };\n}\n\nfunction extendPrimitiveGroup(pb, pg){\n    pg.nodesView = createNodesView(pb, pg);\n    pg.waysView = createWaysView(pb, pg);\n    pg.relationsView = createRelationsView(pb, pg);\n}\n\nfunction decodePrimitiveBlock(buffer){\n    var data, i;\n\n    data = blockFormat.PrimitiveBlock.decode(buffer);\n\n    // extend stringtable\n    extendStringTable(data.stringtable);\n\n    // extend primitivegroup\n    for(i = 0; i < data.primitivegroup.length; ++i){\n        extendPrimitiveGroup(data, data.primitivegroup[i]);\n    }\n\n    return data;\n}\n\nvar OSM_BLOB_DECODER_BY_TYPE = {\n    'OSMHeader': blockFormat.HeaderBlock.decode,\n    'OSMData': decodePrimitiveBlock\n};\n\nfunction createFileParser(fd, callback){\n    readFileBlocks(fd, function(err, fileBlocks){\n        if(err){\n            return callback(err);\n        }\n\n        function findFileBlocksByBlobType(blobType){\n            var blocks, i, block;\n\n            blocks = [];\n\n            for(i = 0; i < fileBlocks.length; ++i){\n                block = fileBlocks[i];\n\n                if(block.blobHeader.type !== blobType){\n                    continue;\n                }\n\n                blocks.push(block);\n            }\n\n            return blocks;\n        }\n\n        function readBlob(fileBlock, callback){\n            return reader.readPBFElement(fd, fileBlock.blobHeader.position, fileBlock.blobHeader.datasize, fileFormat.Blob.decode, callback);\n        }\n\n        function readBlock(fileBlock, callback){\n            return readBlob(fileBlock, function(err, blob){\n                if(err){\n                    return callback(err);\n                }\n\n                if(blob.raw_size === 0){\n                    return callback('Uncompressed pbfs are currently not supported.');\n                }\n\n                zlib.inflateBlob(blob, function(err, data){\n                    if(err){\n                        return callback(err);\n                    }\n\n                    return buf.readPBFElementFromBuffer(data, OSM_BLOB_DECODER_BY_TYPE[fileBlock.blobHeader.type], callback);\n                });\n            });\n        }\n\n        return callback(null, {\n            fileBlocks: fileBlocks,\n            \n            findFileBlocksByBlobType: findFileBlocksByBlobType,\n\n            readBlock: readBlock\n        });\n    });\n}\n\nmodule.exports = {\n    parse: parse,\n\n    createParser: createPathParser\n};\n","module.exports = require(\"protobufjs\").newBuilder().import({\n    \"package\": \"OSMPBF\",\n    \"messages\": [\n        {\n            \"name\": \"HeaderBlock\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"HeaderBBox\",\n                    \"name\": \"bbox\",\n                    \"id\": 1,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"required_features\",\n                    \"id\": 4,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"string\",\n                    \"name\": \"optional_features\",\n                    \"id\": 5,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"writingprogram\",\n                    \"id\": 16,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"source\",\n                    \"id\": 17,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"osmosis_replication_timestamp\",\n                    \"id\": 32,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"osmosis_replication_sequence_number\",\n                    \"id\": 33,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"string\",\n                    \"name\": \"osmosis_replication_base_url\",\n                    \"id\": 34,\n                    \"options\": {}\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"HeaderBBox\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"sint64\",\n                    \"name\": \"left\",\n                    \"id\": 1,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"sint64\",\n                    \"name\": \"right\",\n                    \"id\": 2,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"sint64\",\n                    \"name\": \"top\",\n                    \"id\": 3,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"sint64\",\n                    \"name\": \"bottom\",\n                    \"id\": 4,\n                    \"options\": {}\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"PrimitiveBlock\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"StringTable\",\n                    \"name\": \"stringtable\",\n                    \"id\": 1,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"PrimitiveGroup\",\n                    \"name\": \"primitivegroup\",\n                    \"id\": 2,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"granularity\",\n                    \"id\": 17,\n                    \"options\": {\n                        \"default\": 100\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"lat_offset\",\n                    \"id\": 19,\n                    \"options\": {\n                        \"default\": 0\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"lon_offset\",\n                    \"id\": 20,\n                    \"options\": {\n                        \"default\": 0\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"date_granularity\",\n                    \"id\": 18,\n                    \"options\": {\n                        \"default\": 1000\n                    }\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"PrimitiveGroup\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"Node\",\n                    \"name\": \"nodes\",\n                    \"id\": 1,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"DenseNodes\",\n                    \"name\": \"dense\",\n                    \"id\": 2,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"Way\",\n                    \"name\": \"ways\",\n                    \"id\": 3,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"Relation\",\n                    \"name\": \"relations\",\n                    \"id\": 4,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"ChangeSet\",\n                    \"name\": \"changesets\",\n                    \"id\": 5,\n                    \"options\": {}\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"StringTable\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"bytes\",\n                    \"name\": \"s\",\n                    \"id\": 1,\n                    \"options\": {}\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"Info\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"version\",\n                    \"id\": 1,\n                    \"options\": {\n                        \"default\": -1\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 2,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int64\",\n                    \"name\": \"changeset\",\n                    \"id\": 3,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"uid\",\n                    \"id\": 4,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"uint32\",\n                    \"name\": \"user_sid\",\n                    \"id\": 5,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bool\",\n                    \"name\": \"visible\",\n                    \"id\": 6,\n                    \"options\": {}\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"DenseInfo\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"int32\",\n                    \"name\": \"version\",\n                    \"id\": 1,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"sint64\",\n                    \"name\": \"timestamp\",\n                    \"id\": 2,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"sint64\",\n                    \"name\": \"changeset\",\n                    \"id\": 3,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"sint32\",\n                    \"name\": \"uid\",\n                    \"id\": 4,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"sint32\",\n                    \"name\": \"user_sid\",\n                    \"id\": 5,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"bool\",\n                    \"name\": \"visible\",\n                    \"id\": 6,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"ChangeSet\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"int64\",\n                    \"name\": \"id\",\n                    \"id\": 1,\n                    \"options\": {}\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"Node\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"sint64\",\n                    \"name\": \"id\",\n                    \"id\": 1,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"uint32\",\n                    \"name\": \"keys\",\n                    \"id\": 2,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"uint32\",\n                    \"name\": \"vals\",\n                    \"id\": 3,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"Info\",\n                    \"name\": \"info\",\n                    \"id\": 4,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"sint64\",\n                    \"name\": \"lat\",\n                    \"id\": 8,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"sint64\",\n                    \"name\": \"lon\",\n                    \"id\": 9,\n                    \"options\": {}\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"DenseNodes\",\n            \"fields\": [\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"sint64\",\n                    \"name\": \"id\",\n                    \"id\": 1,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"DenseInfo\",\n                    \"name\": \"denseinfo\",\n                    \"id\": 5,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"sint64\",\n                    \"name\": \"lat\",\n                    \"id\": 8,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"sint64\",\n                    \"name\": \"lon\",\n                    \"id\": 9,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"int32\",\n                    \"name\": \"keys_vals\",\n                    \"id\": 10,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"Way\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"int64\",\n                    \"name\": \"id\",\n                    \"id\": 1,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"uint32\",\n                    \"name\": \"keys\",\n                    \"id\": 2,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"uint32\",\n                    \"name\": \"vals\",\n                    \"id\": 3,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"Info\",\n                    \"name\": \"info\",\n                    \"id\": 4,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"sint64\",\n                    \"name\": \"refs\",\n                    \"id\": 8,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"Relation\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"int64\",\n                    \"name\": \"id\",\n                    \"id\": 1,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"uint32\",\n                    \"name\": \"keys\",\n                    \"id\": 2,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"uint32\",\n                    \"name\": \"vals\",\n                    \"id\": 3,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"Info\",\n                    \"name\": \"info\",\n                    \"id\": 4,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"int32\",\n                    \"name\": \"roles_sid\",\n                    \"id\": 8,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"sint64\",\n                    \"name\": \"memids\",\n                    \"id\": 9,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                },\n                {\n                    \"rule\": \"repeated\",\n                    \"type\": \"MemberType\",\n                    \"name\": \"types\",\n                    \"id\": 10,\n                    \"options\": {\n                        \"packed\": true\n                    }\n                }\n            ],\n            \"enums\": [\n                {\n                    \"name\": \"MemberType\",\n                    \"values\": [\n                        {\n                            \"name\": \"NODE\",\n                            \"id\": 0\n                        },\n                        {\n                            \"name\": \"WAY\",\n                            \"id\": 1\n                        },\n                        {\n                            \"name\": \"RELATION\",\n                            \"id\": 2\n                        }\n                    ],\n                    \"options\": {}\n                }\n            ],\n            \"messages\": [],\n            \"options\": {}\n        }\n    ],\n    \"enums\": [],\n    \"imports\": [],\n    \"options\": {\n        \"optimize_for\": \"LITE_RUNTIME\",\n        \"java_package\": \"org.openstreetmap.osmosis.osmbinary\"\n    },\n    \"services\": []\n}).build(\"OSMPBF\");\n","function readPBFElementFromBuffer(buffer, pbfDecode, callback){\n    return callback(null, pbfDecode(buffer));\n}\n\nmodule.exports = {\n    readPBFElementFromBuffer: readPBFElementFromBuffer\n};\n","// don't use npm 'zlibjs' module, would require shims for the Node.js wrappers\nvar Zlib = require('../../node_modules/zlibjs/bin/inflate.min.js').Zlib;\n\nfunction inflateBlob(blob, callback){\n    var infl = new Zlib.Inflate(new Uint8Array(blob.zlib_data.toBuffer()), {\n        bufferSize: blob.raw_size\n    });\n    return callback(null, infl.decompress());\n}\n\nmodule.exports = {\n    inflateBlob: inflateBlob\n};\n","var buf = require('../buffer.js');\nrequire(\"setimmediate\");\n\nfunction readBlobHeaderSize(fd, position, size, callback){\n    var headerSize = new DataView(fd).getInt32(position, false);\n    return callback(null, headerSize);\n}\n\nfunction readPBFElement(fd, position, size, pbfDecode, callback){\n    //var buffer = new Uint8Array(fd, position, size);\n    var buffer = new Uint8Array(size);\n    buffer.set(new Uint8Array(fd, position, size));\n\n    // async call to avoid flooding the call stack when reading an already\n    // loaded ArrayBuffer in the Browser (#30)\n    setImmediate(function(){\n        buf.readPBFElementFromBuffer(buffer, pbfDecode, callback);\n    });\n}\n\nfunction getFileSize(fd, callback){\n    return callback(null, fd.byteLength);\n}\n\nfunction get(url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onerror = function(evt) {\n        callback(new Error(this.status + ': ' + this.statusText));\n    };\n    xhr.onload = function(evt) {\n        callback(null, this.response);\n    };\n    xhr.send();\n}\n\nfunction open(opts, callback){\n    if (opts.filePath) {\n        get(opts.filePath, callback);\n    } else if (opts.buffer) {\n        callback(null, opts.buffer);\n    } else {\n        callback(new Error('Use either the \"filePath\" option to pass an URL'\n            + ' or the \"buffer\" option to pass an ArrayBuffer.'));\n    }\n}\n\nfunction close(fd, callback){\n    if (callback) {\n        callback(null);\n    }\n}\n\nmodule.exports = {\n    readBlobHeaderSize: readBlobHeaderSize,\n    readPBFElement: readPBFElement,\n    getFileSize: getFileSize,\n    open: open,\n    close: close\n};\n","module.exports = require(\"protobufjs\").newBuilder().import({\n    \"package\": \"OSMPBF\",\n    \"messages\": [\n        {\n            \"name\": \"Blob\",\n            \"fields\": [\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"raw\",\n                    \"id\": 1,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"int32\",\n                    \"name\": \"raw_size\",\n                    \"id\": 2,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"zlib_data\",\n                    \"id\": 3,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"lzma_data\",\n                    \"id\": 4,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"OBSOLETE_bzip2_data\",\n                    \"id\": 5,\n                    \"options\": {\n                        \"deprecated\": true\n                    }\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        },\n        {\n            \"name\": \"BlobHeader\",\n            \"fields\": [\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"string\",\n                    \"name\": \"type\",\n                    \"id\": 1,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"optional\",\n                    \"type\": \"bytes\",\n                    \"name\": \"indexdata\",\n                    \"id\": 2,\n                    \"options\": {}\n                },\n                {\n                    \"rule\": \"required\",\n                    \"type\": \"int32\",\n                    \"name\": \"datasize\",\n                    \"id\": 3,\n                    \"options\": {}\n                }\n            ],\n            \"enums\": [],\n            \"messages\": [],\n            \"options\": {}\n        }\n    ],\n    \"enums\": [],\n    \"imports\": [],\n    \"options\": {\n        \"optimize_for\": \"LITE_RUNTIME\",\n        \"java_package\": \"org.openstreetmap.osmosis.osmbinary\"\n    },\n    \"services\": []\n}).build(\"OSMPBF\");\n","var buf = require('../buffer.js');\n\nfunction readBlobHeaderSize(file, position, size, callback){\n    read(file, position, size, function(err, buffer){\n        if (err) {\n            return callback(err);\n        }\n\n        var headerSize = new DataView(buffer).getInt32(0, false);\n        return callback(null, headerSize);\n    });\n}\n\nfunction readPBFElement(file, position, size, pbfDecode, callback){\n    read(file, position, size, function(err, buffer){\n        if(err){\n            return callback(err);\n        }\n\n        buf.readPBFElementFromBuffer(buffer, pbfDecode, callback);\n    });    \n}\n\nfunction getFileSize(file, callback){\n    return callback(null, file.size);\n}\n\nfunction read(file, position, size, callback){\n    var reader, slice;\n    \n    reader = new FileReader();\n\n    reader.onerror = function(e){\n        return callback(new Error('Error reading file (' + reader.error.code + ')'));\n    };\n    reader.onload = function(e){\n        return callback(null, reader.result);\n    };\n\n    // Safari still prefixed according to MDN (as of 11/2014)\n    // https://developer.mozilla.org/en-US/docs/Web/API/Blob.slice#Browser_compatibility\n    if(file.webkitSlice){\n        slice = file.webkitSlice(position, position + size);\n    } else {\n        slice = file.slice(position, position + size);\n    }\n\n    reader.readAsArrayBuffer(slice);\n}\n\nfunction open(opts, callback){\n    return callback(null, opts.file);\n}\n\nfunction close(file, callback){\n    if(callback){\n        return callback(null);\n    }\n}\n\nmodule.exports = {\n    readBlobHeaderSize: readBlobHeaderSize,\n    readPBFElement: readPBFElement,\n    getFileSize: getFileSize,\n    open: open,\n    close: close\n};\n","var zlib = require('zlib');\n\nfunction inflateBlob(blob, callback){\n    zlib.inflate(blob.zlib_data.toBuffer(), callback);\n}\n\nmodule.exports = {\n    inflateBlob: inflateBlob\n};","var fs = require('fs');\nvar buf = require('../buffer.js');\n\nfunction bytesReadFail(callback, expectedBytes, readBytes){\n    return callback(new Error('Expected ' + expectedBytes + ' bytes but got ' + readBytes));\n}\n\nfunction readBlobHeaderSize(fd, position, size, callback){\n    var buffer;\n\n    buffer = new Buffer(size);\n\n    fs.read(fd, buffer, 0, size, position, function(err, bytesRead, buffer){\n        if(bytesRead !== size){\n            return bytesReadFail(callback, size, bytesRead);\n        }\n\n        return callback(null, buffer.readInt32BE(0));\n    });\n}\n\nfunction readPBFElement(fd, position, size, pbfDecode, callback){\n    var buffer;\n\n    if(size > 32 * 1024 * 1024){\n        return callback(new Error('PBF element too big: ' + size + ' bytes'));\n    }\n\n    buffer = new Buffer(size);\n\n    fs.read(fd, buffer, 0, size, position, function(err, bytesRead, buffer){\n        if(bytesRead !== size){\n            return bytesReadFail(callback, size, bytesRead);\n        }\n\n        return buf.readPBFElementFromBuffer(buffer, pbfDecode, callback);\n    });\n}\n\nfunction getFileSize(fd, callback){\n    fs.fstat(fd, function(err, fdStatus){\n        return callback(err, fdStatus.size);\n    });\n}\n\nfunction open(opts, callback){\n    fs.open(opts.filePath, 'r', callback);\n}\n\nfunction close(fd, callback){\n    return fs.close(fd, callback);\n}\n\nmodule.exports = {\n    readBlobHeaderSize: readBlobHeaderSize,\n    readPBFElement: readPBFElement,\n    getFileSize: getFileSize,\n    open: open,\n    close: close\n};\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';var m=this;function q(c,d){var a=c.split(\".\"),b=m;!(a[0]in b)&&b.execScript&&b.execScript(\"var \"+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&void 0!==d?b[e]=d:b=b[e]?b[e]:b[e]={}};var s=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;function t(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,l,p,n,r,K;for(n=0;n<d;++n)c[n]>a&&(a=c[n]),c[n]<b&&(b=c[n]);e=1<<a;f=new (s?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(n=0;n<d;++n)if(c[n]===g){l=0;p=h;for(r=0;r<g;++r)l=l<<1|p&1,p>>=1;K=g<<16|n;for(r=l;r<e;r+=k)f[r]=K;++h}++g;h<<=1;k<<=1}return[f,a,b]};function u(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=s?new Uint8Array(c):c;this.m=!1;this.i=v;this.s=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.s=d.resize);switch(this.i){case w:this.b=32768;this.c=new (s?Uint8Array:Array)(32768+this.h+258);break;case v:this.b=0;this.c=new (s?Uint8Array:Array)(this.h);this.e=this.A;this.n=this.w;this.j=this.z;break;default:throw Error(\"invalid inflate mode\");\n}}var w=0,v=1,x={u:w,t:v};\nu.prototype.k=function(){for(;!this.m;){var c=y(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=void 0,h=void 0,k=b.length,l=void 0;this.d=this.f=0;if(a+1>=f)throw Error(\"invalid uncompressed block header: LEN\");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error(\"invalid uncompressed block header: NLEN\");h=d[a++]|d[a++]<<8;if(g===~h)throw Error(\"invalid uncompressed block header: length verify\");if(a+g>d.length)throw Error(\"input buffer is broken\");switch(this.i){case w:for(;e+\ng>b.length;){l=k-e;g-=l;if(s)b.set(d.subarray(a,a+l),e),e+=l,a+=l;else for(;l--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case v:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error(\"invalid inflate mode\");}if(s)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(z,A);break;case 2:B(this);break;default:throw Error(\"unknown BTYPE: \"+c);}}return this.n()};\nvar C=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=s?new Uint16Array(C):C,E=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],F=s?new Uint16Array(E):E,G=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],H=s?new Uint8Array(G):G,I=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],J=s?new Uint16Array(I):I,L=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,\n13],M=s?new Uint8Array(L):L,N=new (s?Uint8Array:Array)(288),O,P;O=0;for(P=N.length;O<P;++O)N[O]=143>=O?8:255>=O?9:279>=O?7:8;var z=t(N),Q=new (s?Uint8Array:Array)(30),R,S;R=0;for(S=Q.length;R<S;++R)Q[R]=5;var A=t(Q);function y(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error(\"input buffer is broken\");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}\nfunction T(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],l,p;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;l=h[a&(1<<k)-1];p=l>>>16;c.f=a>>p;c.d=b-p;c.a=f;return l&65535}\nfunction B(c){function d(a,c,b){var d,e=this.q,f,g;for(g=0;g<a;)switch(d=T(this,c),d){case 16:for(f=3+y(this,2);f--;)b[g++]=e;break;case 17:for(f=3+y(this,3);f--;)b[g++]=0;e=0;break;case 18:for(f=11+y(this,7);f--;)b[g++]=0;e=0;break;default:e=b[g++]=d}this.q=e;return b}var a=y(c,5)+257,b=y(c,5)+1,e=y(c,4)+4,f=new (s?Uint8Array:Array)(D.length),g,h,k,l;for(l=0;l<e;++l)f[D[l]]=y(c,3);if(!s){l=e;for(e=f.length;l<e;++l)f[D[l]]=0}g=t(f);h=new (s?Uint8Array:Array)(a);k=new (s?Uint8Array:Array)(b);c.q=0;\nc.j(t(d.call(c,a,g,h)),t(d.call(c,b,g,k)))}u.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=T(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=F[g];0<H[g]&&(k+=y(this,H[g]));f=T(this,d);h=J[f];0<M[f]&&(h+=y(this,M[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nu.prototype.z=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=T(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=F[g];0<H[g]&&(k+=y(this,H[g]));f=T(this,d);h=J[f];0<M[f]&&(h+=y(this,M[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nu.prototype.e=function(){var c=new (s?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(s)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(s)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};\nu.prototype.A=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&(\"number\"===typeof c.p&&(a=c.p),\"number\"===typeof c.v&&(a+=c.v));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;s?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};\nu.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (s?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return s?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};\nu.prototype.w=function(){var c,d=this.b;s?this.s?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function U(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.B=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case V:this.method=V;break;default:throw Error(\"unsupported compression method\");}if(0!==((a<<8)+b)%31)throw Error(\"invalid fcheck flag:\"+((a<<8)+b)%31);if(b&32)throw Error(\"fdict flag is not supported\");this.r=new u(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}\nU.prototype.k=function(){var c=this.input,d,a;d=this.r.k();this.a=this.r.a;if(this.B){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if(\"string\"===typeof b){var e=b.split(\"\"),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,l=b.length,p,n=0;0<l;){p=1024<l?1024:l;l-=p;do h+=b[n++],k+=h;while(--p);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error(\"invalid adler-32 checksum\");}return d};var V=8;q(\"Zlib.Inflate\",U);q(\"Zlib.Inflate.prototype.decompress\",U.prototype.k);var W={ADAPTIVE:x.t,BLOCK:x.u},X,Y,Z,$;if(Object.keys)X=Object.keys(W);else for(Y in X=[],Z=0,W)X[Z++]=Y;Z=0;for($=X.length;Z<$;++Z)Y=X[Z],q(\"Zlib.Inflate.BufferType.\"+Y,W[Y]);}).call(this); //@ sourceMappingURL=inflate.min.js.map\n","/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license ProtoBuf.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/ProtoBuf.js for details\r\n */\r\n(function(global) {\r\n    \"use strict\";\r\n\r\n    function init(ByteBuffer) {\r\n\r\n        /**\r\n         * The ProtoBuf namespace.\r\n         * @exports ProtoBuf\r\n         * @namespace\r\n         * @expose\r\n         */\r\n        var ProtoBuf = {};\r\n\r\n        /**\r\n         * ProtoBuf.js version.\r\n         * @type {string}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.VERSION = \"3.8.2\";\r\n\r\n        /**\r\n         * Wire types.\r\n         * @type {Object.<string,number>}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.WIRE_TYPES = {};\r\n\r\n        /**\r\n         * Varint wire type.\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        ProtoBuf.WIRE_TYPES.VARINT = 0;\r\n\r\n        /**\r\n         * Fixed 64 bits wire type.\r\n         * @type {number}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.WIRE_TYPES.BITS64 = 1;\r\n\r\n        /**\r\n         * Length delimited wire type.\r\n         * @type {number}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.WIRE_TYPES.LDELIM = 2;\r\n\r\n        /**\r\n         * Start group wire type.\r\n         * @type {number}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.WIRE_TYPES.STARTGROUP = 3;\r\n\r\n        /**\r\n         * End group wire type.\r\n         * @type {number}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.WIRE_TYPES.ENDGROUP = 4;\r\n\r\n        /**\r\n         * Fixed 32 bits wire type.\r\n         * @type {number}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.WIRE_TYPES.BITS32 = 5;\r\n\r\n        /**\r\n         * Packable wire types.\r\n         * @type {!Array.<number>}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.PACKABLE_WIRE_TYPES = [\r\n            ProtoBuf.WIRE_TYPES.VARINT,\r\n            ProtoBuf.WIRE_TYPES.BITS64,\r\n            ProtoBuf.WIRE_TYPES.BITS32\r\n        ];\r\n\r\n        /**\r\n         * Types.\r\n         * @dict\r\n         * @type {Object.<string,{name: string, wireType: number}>}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.TYPES = {\r\n            // According to the protobuf spec.\r\n            \"int32\": {\r\n                name: \"int32\",\r\n                wireType: ProtoBuf.WIRE_TYPES.VARINT\r\n            },\r\n            \"uint32\": {\r\n                name: \"uint32\",\r\n                wireType: ProtoBuf.WIRE_TYPES.VARINT\r\n            },\r\n            \"sint32\": {\r\n                name: \"sint32\",\r\n                wireType: ProtoBuf.WIRE_TYPES.VARINT\r\n            },\r\n            \"int64\": {\r\n                name: \"int64\",\r\n                wireType: ProtoBuf.WIRE_TYPES.VARINT\r\n            },\r\n            \"uint64\": {\r\n                name: \"uint64\",\r\n                wireType: ProtoBuf.WIRE_TYPES.VARINT\r\n            },\r\n            \"sint64\": {\r\n                name: \"sint64\",\r\n                wireType: ProtoBuf.WIRE_TYPES.VARINT\r\n            },\r\n            \"bool\": {\r\n                name: \"bool\",\r\n                wireType: ProtoBuf.WIRE_TYPES.VARINT\r\n            },\r\n            \"double\": {\r\n                name: \"double\",\r\n                wireType: ProtoBuf.WIRE_TYPES.BITS64\r\n            },\r\n            \"string\": {\r\n                name: \"string\",\r\n                wireType: ProtoBuf.WIRE_TYPES.LDELIM\r\n            },\r\n            \"bytes\": {\r\n                name: \"bytes\",\r\n                wireType: ProtoBuf.WIRE_TYPES.LDELIM\r\n            },\r\n            \"fixed32\": {\r\n                name: \"fixed32\",\r\n                wireType: ProtoBuf.WIRE_TYPES.BITS32\r\n            },\r\n            \"sfixed32\": {\r\n                name: \"sfixed32\",\r\n                wireType: ProtoBuf.WIRE_TYPES.BITS32\r\n            },\r\n            \"fixed64\": {\r\n                name: \"fixed64\",\r\n                wireType: ProtoBuf.WIRE_TYPES.BITS64\r\n            },\r\n            \"sfixed64\": {\r\n                name: \"sfixed64\",\r\n                wireType: ProtoBuf.WIRE_TYPES.BITS64\r\n            },\r\n            \"float\": {\r\n                name: \"float\",\r\n                wireType: ProtoBuf.WIRE_TYPES.BITS32\r\n            },\r\n            \"enum\": {\r\n                name: \"enum\",\r\n                wireType: ProtoBuf.WIRE_TYPES.VARINT\r\n            },\r\n            \"message\": {\r\n                name: \"message\",\r\n                wireType: ProtoBuf.WIRE_TYPES.LDELIM\r\n            },\r\n            \"group\": {\r\n                name: \"group\",\r\n                wireType: ProtoBuf.WIRE_TYPES.STARTGROUP\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Minimum field id.\r\n         * @type {number}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.ID_MIN = 1;\r\n\r\n        /**\r\n         * Maximum field id.\r\n         * @type {number}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ProtoBuf.ID_MAX = 0x1FFFFFFF;\r\n\r\n        /**\r\n         * @type {!function(new: ByteBuffer, ...[*])}\r\n         * @expose\r\n         */\r\n        ProtoBuf.ByteBuffer = ByteBuffer;\r\n\r\n        /**\r\n         * @type {?function(new: Long, ...[*])}\r\n         * @expose\r\n         */\r\n        ProtoBuf.Long = ByteBuffer.Long || null;\r\n\r\n        /**\r\n         * If set to `true`, field names will be converted from underscore notation to camel case. Defaults to `false`.\r\n         *  Must be set prior to parsing.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        ProtoBuf.convertFieldsToCamelCase = false;\r\n\r\n        /**\r\n         * By default, messages are populated with (setX, set_x) accessors for each field. This can be disabled by\r\n         *  setting this to `false` prior to building messages.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        ProtoBuf.populateAccessors = true;\r\n\r\n        /**\r\n         * @alias ProtoBuf.Util\r\n         * @expose\r\n         */\r\n        ProtoBuf.Util = (function() {\r\n            \"use strict\";\r\n\r\n            // Object.create polyfill\r\n            // ref: https://developer.mozilla.org/de/docs/JavaScript/Reference/Global_Objects/Object/create\r\n            if (!Object.create)\r\n                /** @expose */\r\n                Object.create = function (o) {\r\n                    if (arguments.length > 1)\r\n                        throw Error('Object.create polyfill only accepts the first parameter.');\r\n                    function F() {}\r\n                    F.prototype = o;\r\n                    return new F();\r\n                };\r\n\r\n            /**\r\n             * ProtoBuf utilities.\r\n             * @exports ProtoBuf.Util\r\n             * @namespace\r\n             */\r\n            var Util = {};\r\n\r\n            /**\r\n             * Flag if running in node (fs is available) or not.\r\n             * @type {boolean}\r\n             * @const\r\n             * @expose\r\n             */\r\n            Util.IS_NODE = false;\r\n            try {\r\n                // There is no reliable way to detect node.js as an environment, so our\r\n                // best bet is to feature-detect what we actually need.\r\n                Util.IS_NODE =\r\n                    typeof require === 'function' &&\r\n                    typeof require(\"fs\").readFileSync === 'function' &&\r\n                    typeof require(\"path\").resolve === 'function';\r\n            } catch (e) {}\r\n\r\n            /**\r\n             * Constructs a XMLHttpRequest object.\r\n             * @return {XMLHttpRequest}\r\n             * @throws {Error} If XMLHttpRequest is not supported\r\n             * @expose\r\n             */\r\n            Util.XHR = function() {\r\n                // No dependencies please, ref: http://www.quirksmode.org/js/xmlhttp.html\r\n                var XMLHttpFactories = [\r\n                    function () {return new XMLHttpRequest()},\r\n                    function () {return new ActiveXObject(\"Msxml2.XMLHTTP\")},\r\n                    function () {return new ActiveXObject(\"Msxml3.XMLHTTP\")},\r\n                    function () {return new ActiveXObject(\"Microsoft.XMLHTTP\")}\r\n                ];\r\n                /** @type {?XMLHttpRequest} */\r\n                var xhr = null;\r\n                for (var i=0;i<XMLHttpFactories.length;i++) {\r\n                    try { xhr = XMLHttpFactories[i](); }\r\n                    catch (e) { continue; }\r\n                    break;\r\n                }\r\n                if (!xhr)\r\n                    throw Error(\"XMLHttpRequest is not supported\");\r\n                return xhr;\r\n            };\r\n\r\n            /**\r\n             * Fetches a resource.\r\n             * @param {string} path Resource path\r\n             * @param {function(?string)=} callback Callback receiving the resource's contents. If omitted the resource will\r\n             *   be fetched synchronously. If the request failed, contents will be null.\r\n             * @return {?string|undefined} Resource contents if callback is omitted (null if the request failed), else undefined.\r\n             * @expose\r\n             */\r\n            Util.fetch = function(path, callback) {\r\n                if (callback && typeof callback != 'function')\r\n                    callback = null;\r\n                if (Util.IS_NODE) {\r\n                    if (callback) {\r\n                        require(\"fs\").readFile(path, function(err, data) {\r\n                            if (err)\r\n                                callback(null);\r\n                            else\r\n                                callback(\"\"+data);\r\n                        });\r\n                    } else\r\n                        try {\r\n                            return require(\"fs\").readFileSync(path);\r\n                        } catch (e) {\r\n                            return null;\r\n                        }\r\n                } else {\r\n                    var xhr = Util.XHR();\r\n                    xhr.open('GET', path, callback ? true : false);\r\n                    // xhr.setRequestHeader('User-Agent', 'XMLHTTP/1.0');\r\n                    xhr.setRequestHeader('Accept', 'text/plain');\r\n                    if (typeof xhr.overrideMimeType === 'function') xhr.overrideMimeType('text/plain');\r\n                    if (callback) {\r\n                        xhr.onreadystatechange = function() {\r\n                            if (xhr.readyState != 4) return;\r\n                            if (/* remote */ xhr.status == 200 || /* local */ (xhr.status == 0 && typeof xhr.responseText === 'string'))\r\n                                callback(xhr.responseText);\r\n                            else\r\n                                callback(null);\r\n                        };\r\n                        if (xhr.readyState == 4)\r\n                            return;\r\n                        xhr.send(null);\r\n                    } else {\r\n                        xhr.send(null);\r\n                        if (/* remote */ xhr.status == 200 || /* local */ (xhr.status == 0 && typeof xhr.responseText === 'string'))\r\n                            return xhr.responseText;\r\n                        return null;\r\n                    }\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Tests if an object is an array.\r\n             * @function\r\n             * @param {*} obj Object to test\r\n             * @returns {boolean} true if it is an array, else false\r\n             * @expose\r\n             */\r\n            Util.isArray = Array.isArray || function(obj) {\r\n                return Object.prototype.toString.call(obj) === \"[object Array]\";\r\n            };\r\n\r\n            return Util;\r\n        })();\r\n\r\n        /**\r\n         * Language expressions.\r\n         * @type {!Object.<string,string|!RegExp>}\r\n         * @expose\r\n         */\r\n        ProtoBuf.Lang = {\r\n            OPEN: \"{\",\r\n            CLOSE: \"}\",\r\n            OPTOPEN: \"[\",\r\n            OPTCLOSE: \"]\",\r\n            OPTEND: \",\",\r\n            EQUAL: \"=\",\r\n            END: \";\",\r\n            STRINGOPEN: '\"',\r\n            STRINGCLOSE: '\"',\r\n            STRINGOPEN_SQ: \"'\",\r\n            STRINGCLOSE_SQ: \"'\",\r\n            COPTOPEN: '(',\r\n            COPTCLOSE: ')',\r\n            DELIM: /[\\s\\{\\}=;\\[\\],'\"\\(\\)]/g,\r\n            // KEYWORD: /^(?:package|option|import|message|enum|extend|service|syntax|extensions|group)$/,\r\n            RULE: /^(?:required|optional|repeated)$/,\r\n            TYPE: /^(?:double|float|int32|uint32|sint32|int64|uint64|sint64|fixed32|sfixed32|fixed64|sfixed64|bool|string|bytes)$/,\r\n            NAME: /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n            TYPEDEF: /^[a-zA-Z][a-zA-Z_0-9]*$/,\r\n            TYPEREF: /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/,\r\n            FQTYPEREF: /^(?:\\.[a-zA-Z][a-zA-Z_0-9]*)+$/,\r\n            NUMBER: /^-?(?:[1-9][0-9]*|0|0x[0-9a-fA-F]+|0[0-7]+|([0-9]*\\.[0-9]+([Ee][+-]?[0-9]+)?))$/,\r\n            NUMBER_DEC: /^(?:[1-9][0-9]*|0)$/,\r\n            NUMBER_HEX: /^0x[0-9a-fA-F]+$/,\r\n            NUMBER_OCT: /^0[0-7]+$/,\r\n            NUMBER_FLT: /^[0-9]*\\.[0-9]+([Ee][+-]?[0-9]+)?$/,\r\n            ID: /^(?:[1-9][0-9]*|0|0x[0-9a-fA-F]+|0[0-7]+)$/,\r\n            NEGID: /^\\-?(?:[1-9][0-9]*|0|0x[0-9a-fA-F]+|0[0-7]+)$/,\r\n            WHITESPACE: /\\s/,\r\n            STRING: /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")|(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g,\r\n            BOOL: /^(?:true|false)$/i\r\n        };\r\n\r\n\r\n        /**\r\n         * @alias ProtoBuf.Reflect\r\n         * @expose\r\n         */\r\n        ProtoBuf.Reflect = (function(ProtoBuf) {\r\n            \"use strict\";\r\n\r\n            /**\r\n             * Reflection types.\r\n             * @exports ProtoBuf.Reflect\r\n             * @namespace\r\n             */\r\n            var Reflect = {};\r\n\r\n            /**\r\n             * Constructs a Reflect base class.\r\n             * @exports ProtoBuf.Reflect.T\r\n             * @constructor\r\n             * @abstract\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {?ProtoBuf.Reflect.T} parent Parent object\r\n             * @param {string} name Object name\r\n             */\r\n            var T = function(builder, parent, name) {\r\n\r\n                /**\r\n                 * Builder reference.\r\n                 * @type {!ProtoBuf.Builder}\r\n                 * @expose\r\n                 */\r\n                this.builder = builder;\r\n\r\n                /**\r\n                 * Parent object.\r\n                 * @type {?ProtoBuf.Reflect.T}\r\n                 * @expose\r\n                 */\r\n                this.parent = parent;\r\n\r\n                /**\r\n                 * Object name in namespace.\r\n                 * @type {string}\r\n                 * @expose\r\n                 */\r\n                this.name = name;\r\n\r\n                /**\r\n                 * Fully qualified class name\r\n                 * @type {string}\r\n                 * @expose\r\n                 */\r\n                this.className;\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.T.prototype\r\n             * @inner\r\n             */\r\n            var TPrototype = T.prototype;\r\n\r\n            /**\r\n             * Returns the fully qualified name of this object.\r\n             * @returns {string} Fully qualified name as of \".PATH.TO.THIS\"\r\n             * @expose\r\n             */\r\n            TPrototype.fqn = function() {\r\n                var name = this.name,\r\n                    ptr = this;\r\n                do {\r\n                    ptr = ptr.parent;\r\n                    if (ptr == null)\r\n                        break;\r\n                    name = ptr.name+\".\"+name;\r\n                } while (true);\r\n                return name;\r\n            };\r\n\r\n            /**\r\n             * Returns a string representation of this Reflect object (its fully qualified name).\r\n             * @param {boolean=} includeClass Set to true to include the class name. Defaults to false.\r\n             * @return String representation\r\n             * @expose\r\n             */\r\n            TPrototype.toString = function(includeClass) {\r\n                return (includeClass ? this.className + \" \" : \"\") + this.fqn();\r\n            };\r\n\r\n            /**\r\n             * Builds this type.\r\n             * @throws {Error} If this type cannot be built directly\r\n             * @expose\r\n             */\r\n            TPrototype.build = function() {\r\n                throw Error(this.toString(true)+\" cannot be built directly\");\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.T\r\n             * @expose\r\n             */\r\n            Reflect.T = T;\r\n\r\n            /**\r\n             * Constructs a new Namespace.\r\n             * @exports ProtoBuf.Reflect.Namespace\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {?ProtoBuf.Reflect.Namespace} parent Namespace parent\r\n             * @param {string} name Namespace name\r\n             * @param {Object.<string,*>=} options Namespace options\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.T\r\n             */\r\n            var Namespace = function(builder, parent, name, options) {\r\n                T.call(this, builder, parent, name);\r\n\r\n                /**\r\n                 * @override\r\n                 */\r\n                this.className = \"Namespace\";\r\n\r\n                /**\r\n                 * Children inside the namespace.\r\n                 * @type {!Array.<ProtoBuf.Reflect.T>}\r\n                 */\r\n                this.children = [];\r\n\r\n                /**\r\n                 * Options.\r\n                 * @type {!Object.<string, *>}\r\n                 */\r\n                this.options = options || {};\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Namespace.prototype\r\n             * @inner\r\n             */\r\n            var NamespacePrototype = Namespace.prototype = Object.create(T.prototype);\r\n\r\n            /**\r\n             * Returns an array of the namespace's children.\r\n             * @param {ProtoBuf.Reflect.T=} type Filter type (returns instances of this type only). Defaults to null (all children).\r\n             * @return {Array.<ProtoBuf.Reflect.T>}\r\n             * @expose\r\n             */\r\n            NamespacePrototype.getChildren = function(type) {\r\n                type = type || null;\r\n                if (type == null)\r\n                    return this.children.slice();\r\n                var children = [];\r\n                for (var i=0, k=this.children.length; i<k; ++i)\r\n                    if (this.children[i] instanceof type)\r\n                        children.push(this.children[i]);\r\n                return children;\r\n            };\r\n\r\n            /**\r\n             * Adds a child to the namespace.\r\n             * @param {ProtoBuf.Reflect.T} child Child\r\n             * @throws {Error} If the child cannot be added (duplicate)\r\n             * @expose\r\n             */\r\n            NamespacePrototype.addChild = function(child) {\r\n                var other;\r\n                if (other = this.getChild(child.name)) {\r\n                    // Try to revert camelcase transformation on collision\r\n                    if (other instanceof Message.Field && other.name !== other.originalName && this.getChild(other.originalName) === null)\r\n                        other.name = other.originalName; // Revert previous first (effectively keeps both originals)\r\n                    else if (child instanceof Message.Field && child.name !== child.originalName && this.getChild(child.originalName) === null)\r\n                        child.name = child.originalName;\r\n                    else\r\n                        throw Error(\"Duplicate name in namespace \"+this.toString(true)+\": \"+child.name);\r\n                }\r\n                this.children.push(child);\r\n            };\r\n\r\n            /**\r\n             * Gets a child by its name or id.\r\n             * @param {string|number} nameOrId Child name or id\r\n             * @return {?ProtoBuf.Reflect.T} The child or null if not found\r\n             * @expose\r\n             */\r\n            NamespacePrototype.getChild = function(nameOrId) {\r\n                var key = typeof nameOrId === 'number' ? 'id' : 'name';\r\n                for (var i=0, k=this.children.length; i<k; ++i)\r\n                    if (this.children[i][key] === nameOrId)\r\n                        return this.children[i];\r\n                return null;\r\n            };\r\n\r\n            /**\r\n             * Resolves a reflect object inside of this namespace.\r\n             * @param {string} qn Qualified name to resolve\r\n             * @param {boolean=} excludeFields Excludes fields, defaults to `false`\r\n             * @return {?ProtoBuf.Reflect.Namespace} The resolved type or null if not found\r\n             * @expose\r\n             */\r\n            NamespacePrototype.resolve = function(qn, excludeFields) {\r\n                var part = qn.split(\".\"),\r\n                    ptr = this,\r\n                    i = 0;\r\n                if (part[i] === \"\") { // Fully qualified name, e.g. \".My.Message'\r\n                    while (ptr.parent !== null)\r\n                        ptr = ptr.parent;\r\n                    i++;\r\n                }\r\n                var child;\r\n                do {\r\n                    do {\r\n                        child = ptr.getChild(part[i]);\r\n                        if (!child || !(child instanceof Reflect.T) || (excludeFields && child instanceof Reflect.Message.Field)) {\r\n                            ptr = null;\r\n                            break;\r\n                        }\r\n                        ptr = child; i++;\r\n                    } while (i < part.length);\r\n                    if (ptr != null)\r\n                        break; // Found\r\n                    // Else search the parent\r\n                    if (this.parent !== null) {\r\n                        return this.parent.resolve(qn, excludeFields);\r\n                    }\r\n                } while (ptr != null);\r\n                return ptr;\r\n            };\r\n\r\n            /**\r\n             * Builds the namespace and returns the runtime counterpart.\r\n             * @return {Object.<string,Function|Object>} Runtime namespace\r\n             * @expose\r\n             */\r\n            NamespacePrototype.build = function() {\r\n                /** @dict */\r\n                var ns = {};\r\n                var children = this.children;\r\n                for (var i=0, k=children.length, child; i<k; ++i) {\r\n                    child = children[i];\r\n                    if (child instanceof Namespace)\r\n                        ns[child.name] = child.build();\r\n                }\r\n                if (Object.defineProperty)\r\n                    Object.defineProperty(ns, \"$options\", { \"value\": this.buildOpt() });\r\n                return ns;\r\n            };\r\n\r\n            /**\r\n             * Builds the namespace's '$options' property.\r\n             * @return {Object.<string,*>}\r\n             */\r\n            NamespacePrototype.buildOpt = function() {\r\n                var opt = {},\r\n                    keys = Object.keys(this.options);\r\n                for (var i=0, k=keys.length; i<k; ++i) {\r\n                    var key = keys[i],\r\n                        val = this.options[keys[i]];\r\n                    // TODO: Options are not resolved, yet.\r\n                    // if (val instanceof Namespace) {\r\n                    //     opt[key] = val.build();\r\n                    // } else {\r\n                    opt[key] = val;\r\n                    // }\r\n                }\r\n                return opt;\r\n            };\r\n\r\n            /**\r\n             * Gets the value assigned to the option with the specified name.\r\n             * @param {string=} name Returns the option value if specified, otherwise all options are returned.\r\n             * @return {*|Object.<string,*>}null} Option value or NULL if there is no such option\r\n             */\r\n            NamespacePrototype.getOption = function(name) {\r\n                if (typeof name === 'undefined')\r\n                    return this.options;\r\n                return typeof this.options[name] !== 'undefined' ? this.options[name] : null;\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Namespace\r\n             * @expose\r\n             */\r\n            Reflect.Namespace = Namespace;\r\n\r\n            /**\r\n             * Constructs a new Message.\r\n             * @exports ProtoBuf.Reflect.Message\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.Namespace} parent Parent message or namespace\r\n             * @param {string} name Message name\r\n             * @param {Object.<string,*>=} options Message options\r\n             * @param {boolean=} isGroup `true` if this is a legacy group\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.Namespace\r\n             */\r\n            var Message = function(builder, parent, name, options, isGroup) {\r\n                Namespace.call(this, builder, parent, name, options);\r\n\r\n                /**\r\n                 * @override\r\n                 */\r\n                this.className = \"Message\";\r\n\r\n                /**\r\n                 * Extensions range.\r\n                 * @type {!Array.<number>}\r\n                 * @expose\r\n                 */\r\n                this.extensions = [ProtoBuf.ID_MIN, ProtoBuf.ID_MAX];\r\n\r\n                /**\r\n                 * Runtime message class.\r\n                 * @type {?function(new:ProtoBuf.Builder.Message)}\r\n                 * @expose\r\n                 */\r\n                this.clazz = null;\r\n\r\n                /**\r\n                 * Whether this is a legacy group or not.\r\n                 * @type {boolean}\r\n                 * @expose\r\n                 */\r\n                this.isGroup = !!isGroup;\r\n\r\n                // The following cached collections are used to efficiently iterate over or look up fields when decoding.\r\n\r\n                /**\r\n                 * Cached fields.\r\n                 * @type {?Array.<!ProtoBuf.Reflect.Message.Field>}\r\n                 * @private\r\n                 */\r\n                this._fields = null;\r\n\r\n                /**\r\n                 * Cached fields by id.\r\n                 * @type {?Object.<number,!ProtoBuf.Reflect.Message.Field>}\r\n                 * @private\r\n                 */\r\n                this._fieldsById = null;\r\n\r\n                /**\r\n                 * Cached fields by name.\r\n                 * @type {?Object.<string,!ProtoBuf.Reflect.Message.Field>}\r\n                 * @private\r\n                 */\r\n                this._fieldsByName = null;\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Message.prototype\r\n             * @inner\r\n             */\r\n            var MessagePrototype = Message.prototype = Object.create(Namespace.prototype);\r\n\r\n            /**\r\n             * Builds the message and returns the runtime counterpart, which is a fully functional class.\r\n             * @see ProtoBuf.Builder.Message\r\n             * @param {boolean=} rebuild Whether to rebuild or not, defaults to false\r\n             * @return {ProtoBuf.Reflect.Message} Message class\r\n             * @throws {Error} If the message cannot be built\r\n             * @expose\r\n             */\r\n            MessagePrototype.build = function(rebuild) {\r\n                if (this.clazz && !rebuild)\r\n                    return this.clazz;\r\n\r\n                // Create the runtime Message class in its own scope\r\n                var clazz = (function(ProtoBuf, T) {\r\n\r\n                    var fields = T.getChildren(ProtoBuf.Reflect.Message.Field),\r\n                        oneofs = T.getChildren(ProtoBuf.Reflect.Message.OneOf);\r\n\r\n                    /**\r\n                     * Constructs a new runtime Message.\r\n                     * @name ProtoBuf.Builder.Message\r\n                     * @class Barebone of all runtime messages.\r\n                     * @param {!Object.<string,*>|string} values Preset values\r\n                     * @param {...string} var_args\r\n                     * @constructor\r\n                     * @throws {Error} If the message cannot be created\r\n                     */\r\n                    var Message = function(values, var_args) {\r\n                        ProtoBuf.Builder.Message.call(this);\r\n\r\n                        // Create virtual oneof properties\r\n                        for (var i=0, k=oneofs.length; i<k; ++i)\r\n                            this[oneofs[i].name] = null;\r\n                        // Create fields and set default values\r\n                        for (i=0, k=fields.length; i<k; ++i) {\r\n                            var field = fields[i];\r\n                            this[field.name] = field.repeated ? [] : null;\r\n                            if (field.required && field.defaultValue !== null)\r\n                                this[field.name] = field.defaultValue;\r\n                        }\r\n\r\n                        if (arguments.length > 0) {\r\n                            // Set field values from a values object\r\n                            if (arguments.length === 1 && typeof values === 'object' &&\r\n                                /* not another Message */ typeof values.encode !== 'function' &&\r\n                                /* not a repeated field */ !ProtoBuf.Util.isArray(values) &&\r\n                                /* not a ByteBuffer */ !(values instanceof ByteBuffer) &&\r\n                                /* not an ArrayBuffer */ !(values instanceof ArrayBuffer) &&\r\n                                /* not a Long */ !(ProtoBuf.Long && values instanceof ProtoBuf.Long)) {\r\n                                var keys = Object.keys(values);\r\n                                for (i=0, k=keys.length; i<k; ++i)\r\n                                    this.$set(keys[i], values[keys[i]]); // May throw\r\n                            } else // Set field values from arguments, in declaration order\r\n                                for (i=0, k=arguments.length; i<k; ++i)\r\n                                    this.$set(fields[i].name, arguments[i]); // May throw\r\n                        }\r\n                    };\r\n\r\n                    /**\r\n                     * @alias ProtoBuf.Builder.Message.prototype\r\n                     * @inner\r\n                     */\r\n                    var MessagePrototype = Message.prototype = Object.create(ProtoBuf.Builder.Message.prototype);\r\n\r\n                    /**\r\n                     * Adds a value to a repeated field.\r\n                     * @name ProtoBuf.Builder.Message#add\r\n                     * @function\r\n                     * @param {string} key Field name\r\n                     * @param {*} value Value to add\r\n                     * @param {boolean=} noAssert Whether to assert the value or not (asserts by default)\r\n                     * @throws {Error} If the value cannot be added\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.add = function(key, value, noAssert) {\r\n                        var field = T._fieldsByName[key];\r\n                        if (!noAssert) {\r\n                            if (!field)\r\n                                throw Error(this+\"#\"+key+\" is undefined\");\r\n                            if (!(field instanceof ProtoBuf.Reflect.Message.Field))\r\n                                throw Error(this+\"#\"+key+\" is not a field: \"+field.toString(true)); // May throw if it's an enum or embedded message\r\n                            if (!field.repeated)\r\n                                throw Error(this+\"#\"+key+\" is not a repeated field\");\r\n                        }\r\n                        if (this[field.name] === null)\r\n                            this[field.name] = [];\r\n                        this[field.name].push(noAssert ? value : field.verifyValue(value, true));\r\n                    };\r\n\r\n                    /**\r\n                     * Adds a value to a repeated field. This is an alias for {@link ProtoBuf.Builder.Message#add}.\r\n                     * @name ProtoBuf.Builder.Message#$add\r\n                     * @function\r\n                     * @param {string} key Field name\r\n                     * @param {*} value Value to add\r\n                     * @param {boolean=} noAssert Whether to assert the value or not (asserts by default)\r\n                     * @throws {Error} If the value cannot be added\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.$add = MessagePrototype.add;\r\n\r\n                    /**\r\n                     * Sets a field's value.\r\n                     * @name ProtoBuf.Builder.Message#set\r\n                     * @function\r\n                     * @param {string} key Key\r\n                     * @param {*} value Value to set\r\n                     * @param {boolean=} noAssert Whether to not assert for an actual field / proper value type, defaults to `false`\r\n                     * @returns {!ProtoBuf.Builder.Message} this\r\n                     * @throws {Error} If the value cannot be set\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.set = function(key, value, noAssert) {\r\n                        if (key && typeof key === 'object') {\r\n                            for (var i in key)\r\n                                if (key.hasOwnProperty(i))\r\n                                    this.$set(i, key[i], noAssert);\r\n                            return this;\r\n                        }\r\n                        var field = T._fieldsByName[key];\r\n                        if (!noAssert) {\r\n                            if (!field)\r\n                                throw Error(this+\"#\"+key+\" is not a field: undefined\");\r\n                            if (!(field instanceof ProtoBuf.Reflect.Message.Field))\r\n                                throw Error(this+\"#\"+key+\" is not a field: \"+field.toString(true));\r\n                            this[field.name] = (value = field.verifyValue(value)); // May throw\r\n                        } else {\r\n                            this[field.name] = value;\r\n                        }\r\n                        if (field.oneof) {\r\n                            if (value !== null) {\r\n                                if (this[field.oneof.name] !== null)\r\n                                    this[this[field.oneof.name]] = null; // Unset the previous (field name is the oneof field's value)\r\n                                this[field.oneof.name] = field.name;\r\n                            } else if (field.oneof.name === key)\r\n                                this[field.oneof.name] = null;\r\n                        }\r\n                        return this;\r\n                    };\r\n\r\n                    /**\r\n                     * Sets a field's value. This is an alias for [@link ProtoBuf.Builder.Message#set}.\r\n                     * @name ProtoBuf.Builder.Message#$set\r\n                     * @function\r\n                     * @param {string} key Key\r\n                     * @param {*} value Value to set\r\n                     * @param {boolean=} noAssert Whether to not assert the value, defaults to `false`\r\n                     * @throws {Error} If the value cannot be set\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.$set = MessagePrototype.set;\r\n\r\n                    /**\r\n                     * Gets a field's value.\r\n                     * @name ProtoBuf.Builder.Message#get\r\n                     * @function\r\n                     * @param {string} key Key\r\n                     * @param {boolean=} noAssert Whether to not assert for an actual field, defaults to `false`\r\n                     * @return {*} Value\r\n                     * @throws {Error} If there is no such field\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.get = function(key, noAssert) {\r\n                        if (noAssert)\r\n                            return this[key];\r\n                        var field = T._fieldsByName[key];\r\n                        if (!field || !(field instanceof ProtoBuf.Reflect.Message.Field))\r\n                            throw Error(this+\"#\"+key+\" is not a field: undefined\");\r\n                        if (!(field instanceof ProtoBuf.Reflect.Message.Field))\r\n                            throw Error(this+\"#\"+key+\" is not a field: \"+field.toString(true));\r\n                        return this[field.name];\r\n                    };\r\n\r\n                    /**\r\n                     * Gets a field's value. This is an alias for {@link ProtoBuf.Builder.Message#$get}.\r\n                     * @name ProtoBuf.Builder.Message#$get\r\n                     * @function\r\n                     * @param {string} key Key\r\n                     * @return {*} Value\r\n                     * @throws {Error} If there is no such field\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.$get = MessagePrototype.get;\r\n\r\n                    // Getters and setters\r\n\r\n                    for (var i=0; i<fields.length; i++) {\r\n                        var field = fields[i];\r\n                        // no setters for extension fields as these are named by their fqn\r\n                        if (field instanceof ProtoBuf.Reflect.Message.ExtensionField)\r\n                            continue;\r\n\r\n                        if (T.builder.options['populateAccessors'])\r\n                            (function(field) {\r\n                                // set/get[SomeValue]\r\n                                var Name = field.originalName.replace(/(_[a-zA-Z])/g, function(match) {\r\n                                    return match.toUpperCase().replace('_','');\r\n                                });\r\n                                Name = Name.substring(0,1).toUpperCase() + Name.substring(1);\r\n\r\n                                // set/get_[some_value] FIXME: Do we really need these?\r\n                                var name = field.originalName.replace(/([A-Z])/g, function(match) {\r\n                                    return \"_\"+match;\r\n                                });\r\n\r\n                                /**\r\n                                 * The current field's unbound setter function.\r\n                                 * @function\r\n                                 * @param {*} value\r\n                                 * @param {boolean=} noAssert\r\n                                 * @returns {!ProtoBuf.Builder.Message}\r\n                                 * @inner\r\n                                 */\r\n                                var setter = function(value, noAssert) {\r\n                                    this[field.name] = noAssert ? value : field.verifyValue(value);\r\n                                    return this;\r\n                                };\r\n\r\n                                /**\r\n                                 * The current field's unbound getter function.\r\n                                 * @function\r\n                                 * @returns {*}\r\n                                 * @inner\r\n                                 */\r\n                                var getter = function() {\r\n                                    return this[field.name];\r\n                                };\r\n\r\n                                /**\r\n                                 * Sets a value. This method is present for each field, but only if there is no name conflict with\r\n                                 *  another field.\r\n                                 * @name ProtoBuf.Builder.Message#set[SomeField]\r\n                                 * @function\r\n                                 * @param {*} value Value to set\r\n                                 * @param {boolean=} noAssert Whether to not assert the value, defaults to `false`\r\n                                 * @returns {!ProtoBuf.Builder.Message} this\r\n                                 * @abstract\r\n                                 * @throws {Error} If the value cannot be set\r\n                                 */\r\n                                if (T.getChild(\"set\"+Name) === null)\r\n                                    MessagePrototype[\"set\"+Name] = setter;\r\n\r\n                                /**\r\n                                 * Sets a value. This method is present for each field, but only if there is no name conflict with\r\n                                 *  another field.\r\n                                 * @name ProtoBuf.Builder.Message#set_[some_field]\r\n                                 * @function\r\n                                 * @param {*} value Value to set\r\n                                 * @param {boolean=} noAssert Whether to not assert the value, defaults to `false`\r\n                                 * @returns {!ProtoBuf.Builder.Message} this\r\n                                 * @abstract\r\n                                 * @throws {Error} If the value cannot be set\r\n                                 */\r\n                                if (T.getChild(\"set_\"+name) === null)\r\n                                    MessagePrototype[\"set_\"+name] = setter;\r\n\r\n                                /**\r\n                                 * Gets a value. This method is present for each field, but only if there is no name conflict with\r\n                                 *  another field.\r\n                                 * @name ProtoBuf.Builder.Message#get[SomeField]\r\n                                 * @function\r\n                                 * @abstract\r\n                                 * @return {*} The value\r\n                                 */\r\n                                if (T.getChild(\"get\"+Name) === null)\r\n                                    MessagePrototype[\"get\"+Name] = getter;\r\n\r\n                                /**\r\n                                 * Gets a value. This method is present for each field, but only if there is no name conflict with\r\n                                 *  another field.\r\n                                 * @name ProtoBuf.Builder.Message#get_[some_field]\r\n                                 * @function\r\n                                 * @return {*} The value\r\n                                 * @abstract\r\n                                 */\r\n                                if (T.getChild(\"get_\"+name) === null)\r\n                                    MessagePrototype[\"get_\"+name] = getter;\r\n\r\n                            })(field);\r\n                    }\r\n\r\n                    // En-/decoding\r\n\r\n                    /**\r\n                     * Encodes the message.\r\n                     * @name ProtoBuf.Builder.Message#$encode\r\n                     * @function\r\n                     * @param {(!ByteBuffer|boolean)=} buffer ByteBuffer to encode to. Will create a new one and flip it if omitted.\r\n                     * @param {boolean=} noVerify Whether to not verify field values, defaults to `false`\r\n                     * @return {!ByteBuffer} Encoded message as a ByteBuffer\r\n                     * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still\r\n                     *  returns the encoded ByteBuffer in the `encoded` property on the error.\r\n                     * @expose\r\n                     * @see ProtoBuf.Builder.Message#encode64\r\n                     * @see ProtoBuf.Builder.Message#encodeHex\r\n                     * @see ProtoBuf.Builder.Message#encodeAB\r\n                     */\r\n                    MessagePrototype.encode = function(buffer, noVerify) {\r\n                        if (typeof buffer === 'boolean')\r\n                            noVerify = buffer,\r\n                            buffer = undefined;\r\n                        var isNew = false;\r\n                        if (!buffer)\r\n                            buffer = new ByteBuffer(),\r\n                            isNew = true;\r\n                        var le = buffer.littleEndian;\r\n                        try {\r\n                            T.encode(this, buffer.LE(), noVerify);\r\n                            return (isNew ? buffer.flip() : buffer).LE(le);\r\n                        } catch (e) {\r\n                            buffer.LE(le);\r\n                            throw(e);\r\n                        }\r\n                    };\r\n\r\n                    /**\r\n                     * Calculates the byte length of the message.\r\n                     * @name ProtoBuf.Builder.Message#calculate\r\n                     * @function\r\n                     * @returns {number} Byte length\r\n                     * @throws {Error} If the message cannot be calculated or if required fields are missing.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.calculate = function() {\r\n                        return T.calculate(this);\r\n                    };\r\n\r\n                    /**\r\n                     * Encodes the varint32 length-delimited message.\r\n                     * @name ProtoBuf.Builder.Message#encodeDelimited\r\n                     * @function\r\n                     * @param {(!ByteBuffer|boolean)=} buffer ByteBuffer to encode to. Will create a new one and flip it if omitted.\r\n                     * @return {!ByteBuffer} Encoded message as a ByteBuffer\r\n                     * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still\r\n                     *  returns the encoded ByteBuffer in the `encoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.encodeDelimited = function(buffer) {\r\n                        var isNew = false;\r\n                        if (!buffer)\r\n                            buffer = new ByteBuffer(),\r\n                            isNew = true;\r\n                        var enc = new ByteBuffer().LE();\r\n                        T.encode(this, enc).flip();\r\n                        buffer.writeVarint32(enc.remaining());\r\n                        buffer.append(enc);\r\n                        return isNew ? buffer.flip() : buffer;\r\n                    };\r\n\r\n                    /**\r\n                     * Directly encodes the message to an ArrayBuffer.\r\n                     * @name ProtoBuf.Builder.Message#encodeAB\r\n                     * @function\r\n                     * @return {ArrayBuffer} Encoded message as ArrayBuffer\r\n                     * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still\r\n                     *  returns the encoded ArrayBuffer in the `encoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.encodeAB = function() {\r\n                        try {\r\n                            return this.encode().toArrayBuffer();\r\n                        } catch (e) {\r\n                            if (e[\"encoded\"]) e[\"encoded\"] = e[\"encoded\"].toArrayBuffer();\r\n                            throw(e);\r\n                        }\r\n                    };\r\n\r\n                    /**\r\n                     * Returns the message as an ArrayBuffer. This is an alias for {@link ProtoBuf.Builder.Message#encodeAB}.\r\n                     * @name ProtoBuf.Builder.Message#toArrayBuffer\r\n                     * @function\r\n                     * @return {ArrayBuffer} Encoded message as ArrayBuffer\r\n                     * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still\r\n                     *  returns the encoded ArrayBuffer in the `encoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.toArrayBuffer = MessagePrototype.encodeAB;\r\n\r\n                    /**\r\n                     * Directly encodes the message to a node Buffer.\r\n                     * @name ProtoBuf.Builder.Message#encodeNB\r\n                     * @function\r\n                     * @return {!Buffer}\r\n                     * @throws {Error} If the message cannot be encoded, not running under node.js or if required fields are\r\n                     *  missing. The later still returns the encoded node Buffer in the `encoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.encodeNB = function() {\r\n                        try {\r\n                            return this.encode().toBuffer();\r\n                        } catch (e) {\r\n                            if (e[\"encoded\"]) e[\"encoded\"] = e[\"encoded\"].toBuffer();\r\n                            throw(e);\r\n                        }\r\n                    };\r\n\r\n                    /**\r\n                     * Returns the message as a node Buffer. This is an alias for {@link ProtoBuf.Builder.Message#encodeNB}.\r\n                     * @name ProtoBuf.Builder.Message#toBuffer\r\n                     * @function\r\n                     * @return {!Buffer}\r\n                     * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still\r\n                     *  returns the encoded node Buffer in the `encoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.toBuffer = MessagePrototype.encodeNB;\r\n\r\n                    /**\r\n                     * Directly encodes the message to a base64 encoded string.\r\n                     * @name ProtoBuf.Builder.Message#encode64\r\n                     * @function\r\n                     * @return {string} Base64 encoded string\r\n                     * @throws {Error} If the underlying buffer cannot be encoded or if required fields are missing. The later\r\n                     *  still returns the encoded base64 string in the `encoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.encode64 = function() {\r\n                        try {\r\n                            return this.encode().toBase64();\r\n                        } catch (e) {\r\n                            if (e[\"encoded\"]) e[\"encoded\"] = e[\"encoded\"].toBase64();\r\n                            throw(e);\r\n                        }\r\n                    };\r\n\r\n                    /**\r\n                     * Returns the message as a base64 encoded string. This is an alias for {@link ProtoBuf.Builder.Message#encode64}.\r\n                     * @name ProtoBuf.Builder.Message#toBase64\r\n                     * @function\r\n                     * @return {string} Base64 encoded string\r\n                     * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still\r\n                     *  returns the encoded base64 string in the `encoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.toBase64 = MessagePrototype.encode64;\r\n\r\n                    /**\r\n                     * Directly encodes the message to a hex encoded string.\r\n                     * @name ProtoBuf.Builder.Message#encodeHex\r\n                     * @function\r\n                     * @return {string} Hex encoded string\r\n                     * @throws {Error} If the underlying buffer cannot be encoded or if required fields are missing. The later\r\n                     *  still returns the encoded hex string in the `encoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.encodeHex = function() {\r\n                        try {\r\n                            return this.encode().toHex();\r\n                        } catch (e) {\r\n                            if (e[\"encoded\"]) e[\"encoded\"] = e[\"encoded\"].toHex();\r\n                            throw(e);\r\n                        }\r\n                    };\r\n\r\n                    /**\r\n                     * Returns the message as a hex encoded string. This is an alias for {@link ProtoBuf.Builder.Message#encodeHex}.\r\n                     * @name ProtoBuf.Builder.Message#toHex\r\n                     * @function\r\n                     * @return {string} Hex encoded string\r\n                     * @throws {Error} If the message cannot be encoded or if required fields are missing. The later still\r\n                     *  returns the encoded hex string in the `encoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.toHex = MessagePrototype.encodeHex;\r\n\r\n                    /**\r\n                     * Clones a message object to a raw object.\r\n                     * @param {*} obj Object to clone\r\n                     * @param {boolean} includeBinaryAsBase64 Whether to include binary data as base64 strings or not\r\n                     * @returns {*} Cloned object\r\n                     * @inner\r\n                     */\r\n                    function cloneRaw(obj, includeBinaryAsBase64) {\r\n                        var clone = {};\r\n                        for (var i in obj)\r\n                            if (obj.hasOwnProperty(i)) {\r\n                                if (obj[i] === null || typeof obj[i] !== 'object')\r\n                                    clone[i] = obj[i];\r\n                                else if (obj[i] instanceof ByteBuffer) {\r\n                                    if (includeBinaryAsBase64)\r\n                                        clone[i] = obj[i].toBase64();\r\n                                } else // is a non-null object\r\n                                    clone[i] = cloneRaw(obj[i], includeBinaryAsBase64);\r\n                            }\r\n                        return clone;\r\n                    }\r\n\r\n                    /**\r\n                     * Returns the message's raw payload.\r\n                     * @param {boolean=} includeBinaryAsBase64 Whether to include binary data as base64 strings or not, defaults to `false`\r\n                     * @returns {Object.<string,*>} Raw payload\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.toRaw = function(includeBinaryAsBase64) {\r\n                        return cloneRaw(this, !!includeBinaryAsBase64);\r\n                    };\r\n\r\n                    /**\r\n                     * Decodes a message from the specified buffer or string.\r\n                     * @name ProtoBuf.Builder.Message.decode\r\n                     * @function\r\n                     * @param {!ByteBuffer|!ArrayBuffer|!Buffer|string} buffer Buffer to decode from\r\n                     * @param {string=} enc Encoding if buffer is a string: hex, utf8 (not recommended), defaults to base64\r\n                     * @return {!ProtoBuf.Builder.Message} Decoded message\r\n                     * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still\r\n                     *  returns the decoded message with missing fields in the `decoded` property on the error.\r\n                     * @expose\r\n                     * @see ProtoBuf.Builder.Message.decode64\r\n                     * @see ProtoBuf.Builder.Message.decodeHex\r\n                     */\r\n                    Message.decode = function(buffer, enc) {\r\n                        if (typeof buffer === 'string')\r\n                            buffer = ByteBuffer.wrap(buffer, enc ? enc : \"base64\");\r\n                        buffer = buffer instanceof ByteBuffer ? buffer : ByteBuffer.wrap(buffer); // May throw\r\n                        var le = buffer.littleEndian;\r\n                        try {\r\n                            var msg = T.decode(buffer.LE());\r\n                            buffer.LE(le);\r\n                            return msg;\r\n                        } catch (e) {\r\n                            buffer.LE(le);\r\n                            throw(e);\r\n                        }\r\n                    };\r\n\r\n                    /**\r\n                     * Decodes a varint32 length-delimited message from the specified buffer or string.\r\n                     * @name ProtoBuf.Builder.Message.decodeDelimited\r\n                     * @function\r\n                     * @param {!ByteBuffer|!ArrayBuffer|!Buffer|string} buffer Buffer to decode from\r\n                     * @param {string=} enc Encoding if buffer is a string: hex, utf8 (not recommended), defaults to base64\r\n                     * @return {ProtoBuf.Builder.Message} Decoded message or `null` if not enough bytes are available yet\r\n                     * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still\r\n                     *  returns the decoded message with missing fields in the `decoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    Message.decodeDelimited = function(buffer, enc) {\r\n                        if (typeof buffer === 'string')\r\n                            buffer = ByteBuffer.wrap(buffer, enc ? enc : \"base64\");\r\n                        buffer = buffer instanceof ByteBuffer ? buffer : ByteBuffer.wrap(buffer); // May throw\r\n                        if (buffer.remaining() < 1)\r\n                            return null;\r\n                        var off = buffer.offset,\r\n                            len = buffer.readVarint32();\r\n                        if (buffer.remaining() < len) {\r\n                            buffer.offset = off;\r\n                            return null;\r\n                        }\r\n                        try {\r\n                            var msg = T.decode(buffer.slice(buffer.offset, buffer.offset + len).LE());\r\n                            buffer.offset += len;\r\n                            return msg;\r\n                        } catch (err) {\r\n                            buffer.offset += len;\r\n                            throw err;\r\n                        }\r\n                    };\r\n\r\n                    /**\r\n                     * Decodes the message from the specified base64 encoded string.\r\n                     * @name ProtoBuf.Builder.Message.decode64\r\n                     * @function\r\n                     * @param {string} str String to decode from\r\n                     * @return {!ProtoBuf.Builder.Message} Decoded message\r\n                     * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still\r\n                     *  returns the decoded message with missing fields in the `decoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    Message.decode64 = function(str) {\r\n                        return Message.decode(str, \"base64\");\r\n                    };\r\n\r\n                    /**\r\n                     * Decodes the message from the specified hex encoded string.\r\n                     * @name ProtoBuf.Builder.Message.decodeHex\r\n                     * @function\r\n                     * @param {string} str String to decode from\r\n                     * @return {!ProtoBuf.Builder.Message} Decoded message\r\n                     * @throws {Error} If the message cannot be decoded or if required fields are missing. The later still\r\n                     *  returns the decoded message with missing fields in the `decoded` property on the error.\r\n                     * @expose\r\n                     */\r\n                    Message.decodeHex = function(str) {\r\n                        return Message.decode(str, \"hex\");\r\n                    };\r\n\r\n                    // Utility\r\n\r\n                    /**\r\n                     * Returns a string representation of this Message.\r\n                     * @name ProtoBuf.Builder.Message#toString\r\n                     * @function\r\n                     * @return {string} String representation as of \".Fully.Qualified.MessageName\"\r\n                     * @expose\r\n                     */\r\n                    MessagePrototype.toString = function() {\r\n                        return T.toString();\r\n                    };\r\n\r\n                    // Properties\r\n\r\n                    /**\r\n                     * Options.\r\n                     * @name ProtoBuf.Builder.Message.$options\r\n                     * @type {Object.<string,*>}\r\n                     * @expose\r\n                     */\r\n                    var $options; // cc\r\n\r\n                    /**\r\n                     * Reflection type.\r\n                     * @name ProtoBuf.Builder.Message#$type\r\n                     * @type {!ProtoBuf.Reflect.Message}\r\n                     * @expose\r\n                     */\r\n                    var $type; // cc\r\n\r\n                    if (Object.defineProperty)\r\n                        Object.defineProperty(Message, '$options', { \"value\": T.buildOpt() }),\r\n                        Object.defineProperty(MessagePrototype, \"$type\", {\r\n                            get: function() { return T; }\r\n                        });\r\n\r\n                    return Message;\r\n\r\n                })(ProtoBuf, this);\r\n\r\n                // Static enums and prototyped sub-messages / cached collections\r\n                this._fields = [];\r\n                this._fieldsById = {};\r\n                this._fieldsByName = {};\r\n                for (var i=0, k=this.children.length, child; i<k; i++) {\r\n                    child = this.children[i];\r\n                    if (child instanceof Enum)\r\n                        clazz[child.name] = child.build();\r\n                    else if (child instanceof Message)\r\n                        clazz[child.name] = child.build();\r\n                    else if (child instanceof Message.Field)\r\n                        child.build(),\r\n                        this._fields.push(child),\r\n                        this._fieldsById[child.id] = child,\r\n                        this._fieldsByName[child.name] = child;\r\n                    else if (!(child instanceof Message.OneOf) && !(child instanceof Extension)) // Not built\r\n                        throw Error(\"Illegal reflect child of \"+this.toString(true)+\": \"+children[i].toString(true));\r\n                }\r\n\r\n                return this.clazz = clazz;\r\n            };\r\n\r\n            /**\r\n             * Encodes a runtime message's contents to the specified buffer.\r\n             * @param {!ProtoBuf.Builder.Message} message Runtime message to encode\r\n             * @param {ByteBuffer} buffer ByteBuffer to write to\r\n             * @param {boolean=} noVerify Whether to not verify field values, defaults to `false`\r\n             * @return {ByteBuffer} The ByteBuffer for chaining\r\n             * @throws {Error} If required fields are missing or the message cannot be encoded for another reason\r\n             * @expose\r\n             */\r\n            MessagePrototype.encode = function(message, buffer, noVerify) {\r\n                var fieldMissing = null,\r\n                    field;\r\n                for (var i=0, k=this._fields.length, val; i<k; ++i) {\r\n                    field = this._fields[i];\r\n                    val = message[field.name];\r\n                    if (field.required && val === null) {\r\n                        if (fieldMissing === null)\r\n                            fieldMissing = field;\r\n                    } else\r\n                        field.encode(noVerify ? val : field.verifyValue(val), buffer);\r\n                }\r\n                if (fieldMissing !== null) {\r\n                    var err = Error(\"Missing at least one required field for \"+this.toString(true)+\": \"+fieldMissing);\r\n                    err[\"encoded\"] = buffer; // Still expose what we got\r\n                    throw(err);\r\n                }\r\n                return buffer;\r\n            };\r\n\r\n            /**\r\n             * Calculates a runtime message's byte length.\r\n             * @param {!ProtoBuf.Builder.Message} message Runtime message to encode\r\n             * @returns {number} Byte length\r\n             * @throws {Error} If required fields are missing or the message cannot be calculated for another reason\r\n             * @expose\r\n             */\r\n            MessagePrototype.calculate = function(message) {\r\n                for (var n=0, i=0, k=this._fields.length, field, val; i<k; ++i) {\r\n                    field = this._fields[i];\r\n                    val = message[field.name];\r\n                    if (field.required && val === null)\r\n                       throw Error(\"Missing at least one required field for \"+this.toString(true)+\": \"+field);\r\n                    else\r\n                        n += field.calculate(val);\r\n                }\r\n                return n;\r\n            };\r\n\r\n            /**\r\n             * Skips all data until the end of the specified group has been reached.\r\n             * @param {number} expectedId Expected GROUPEND id\r\n             * @param {!ByteBuffer} buf ByteBuffer\r\n             * @returns {boolean} `true` if a value as been skipped, `false` if the end has been reached\r\n             * @throws {Error} If it wasn't possible to find the end of the group (buffer overrun or end tag mismatch)\r\n             * @inner\r\n             */\r\n            function skipTillGroupEnd(expectedId, buf) {\r\n                var tag = buf.readVarint32(), // Throws on OOB\r\n                    wireType = tag & 0x07,\r\n                    id = tag >> 3;\r\n                switch (wireType) {\r\n                    case ProtoBuf.WIRE_TYPES.VARINT:\r\n                        do tag = buf.readUint8();\r\n                        while ((tag & 0x80) === 0x80);\r\n                        break;\r\n                    case ProtoBuf.WIRE_TYPES.BITS64:\r\n                        buf.offset += 8;\r\n                        break;\r\n                    case ProtoBuf.WIRE_TYPES.LDELIM:\r\n                        tag = buf.readVarint32(); // reads the varint\r\n                        buf.offset += tag;        // skips n bytes\r\n                        break;\r\n                    case ProtoBuf.WIRE_TYPES.STARTGROUP:\r\n                        skipTillGroupEnd(id, buf);\r\n                        break;\r\n                    case ProtoBuf.WIRE_TYPES.ENDGROUP:\r\n                        if (id === expectedId)\r\n                            return false;\r\n                        else\r\n                            throw Error(\"Illegal GROUPEND after unknown group: \"+id+\" (\"+expectedId+\" expected)\");\r\n                    case ProtoBuf.WIRE_TYPES.BITS32:\r\n                        buf.offset += 4;\r\n                        break;\r\n                    default:\r\n                        throw Error(\"Illegal wire type in unknown group \"+expectedId+\": \"+wireType);\r\n                }\r\n                return true;\r\n            }\r\n\r\n            /**\r\n             * Decodes an encoded message and returns the decoded message.\r\n             * @param {ByteBuffer} buffer ByteBuffer to decode from\r\n             * @param {number=} length Message length. Defaults to decode all the available data.\r\n             * @param {number=} expectedGroupEndId Expected GROUPEND id if this is a legacy group\r\n             * @return {ProtoBuf.Builder.Message} Decoded message\r\n             * @throws {Error} If the message cannot be decoded\r\n             * @expose\r\n             */\r\n            MessagePrototype.decode = function(buffer, length, expectedGroupEndId) {\r\n                length = typeof length === 'number' ? length : -1;\r\n                var start = buffer.offset,\r\n                    msg = new (this.clazz)(),\r\n                    tag, wireType, id, field;\r\n                while (buffer.offset < start+length || (length === -1 && buffer.remaining() > 0)) {\r\n                    tag = buffer.readVarint32();\r\n                    wireType = tag & 0x07;\r\n                    id = tag >> 3;\r\n                    if (wireType === ProtoBuf.WIRE_TYPES.ENDGROUP) {\r\n                        if (id !== expectedGroupEndId)\r\n                            throw Error(\"Illegal group end indicator for \"+this.toString(true)+\": \"+id+\" (\"+(expectedGroupEndId ? expectedGroupEndId+\" expected\" : \"not a group\")+\")\");\r\n                        break;\r\n                    }\r\n                    if (!(field = this._fieldsById[id])) {\r\n                        // \"messages created by your new code can be parsed by your old code: old binaries simply ignore the new field when parsing.\"\r\n                        switch (wireType) {\r\n                            case ProtoBuf.WIRE_TYPES.VARINT:\r\n                                buffer.readVarint32();\r\n                                break;\r\n                            case ProtoBuf.WIRE_TYPES.BITS32:\r\n                                buffer.offset += 4;\r\n                                break;\r\n                            case ProtoBuf.WIRE_TYPES.BITS64:\r\n                                buffer.offset += 8;\r\n                                break;\r\n                            case ProtoBuf.WIRE_TYPES.LDELIM:\r\n                                var len = buffer.readVarint32();\r\n                                buffer.offset += len;\r\n                                break;\r\n                            case ProtoBuf.WIRE_TYPES.STARTGROUP:\r\n                                while (skipTillGroupEnd(id, buffer)) {}\r\n                                break;\r\n                            default:\r\n                                throw Error(\"Illegal wire type for unknown field \"+id+\" in \"+this.toString(true)+\"#decode: \"+wireType);\r\n                        }\r\n                        continue;\r\n                    }\r\n                    if (field.repeated && !field.options[\"packed\"])\r\n                        msg[field.name].push(field.decode(wireType, buffer));\r\n                    else {\r\n                        msg[field.name] = field.decode(wireType, buffer);\r\n                        if (field.oneof) {\r\n                            if (this[field.oneof.name] !== null)\r\n                                this[this[field.oneof.name]] = null;\r\n                            msg[field.oneof.name] = field.name;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Check if all required fields are present and set default values for optional fields that are not\r\n                for (var i=0, k=this._fields.length; i<k; ++i) {\r\n                    field = this._fields[i];\r\n                    if (msg[field.name] === null)\r\n                        if (field.required) {\r\n                            var err = Error(\"Missing at least one required field for \"+this.toString(true)+\": \"+field.name);\r\n                            err[\"decoded\"] = msg; // Still expose what we got\r\n                            throw(err);\r\n                        } else if (field.defaultValue !== null)\r\n                            msg[field.name] = field.defaultValue;\r\n                }\r\n                return msg;\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Message\r\n             * @expose\r\n             */\r\n            Reflect.Message = Message;\r\n\r\n            /**\r\n             * Constructs a new Message Field.\r\n             * @exports ProtoBuf.Reflect.Message.Field\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.Message} message Message reference\r\n             * @param {string} rule Rule, one of requried, optional, repeated\r\n             * @param {string} type Data type, e.g. int32\r\n             * @param {string} name Field name\r\n             * @param {number} id Unique field id\r\n             * @param {Object.<string,*>=} options Options\r\n             * @param {!ProtoBuf.Reflect.Message.OneOf=} oneof Enclosing OneOf\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.T\r\n             */\r\n            var Field = function(builder, message, rule, type, name, id, options, oneof) {\r\n                T.call(this, builder, message, name);\r\n\r\n                /**\r\n                 * @override\r\n                 */\r\n                this.className = \"Message.Field\";\r\n\r\n                /**\r\n                 * Message field required flag.\r\n                 * @type {boolean}\r\n                 * @expose\r\n                 */\r\n                this.required = rule === \"required\";\r\n\r\n                /**\r\n                 * Message field repeated flag.\r\n                 * @type {boolean}\r\n                 * @expose\r\n                 */\r\n                this.repeated = rule === \"repeated\";\r\n\r\n                /**\r\n                 * Message field type. Type reference string if unresolved, protobuf type if resolved.\r\n                 * @type {string|{name: string, wireType: number}}\r\n                 * @expose\r\n                 */\r\n                this.type = type;\r\n\r\n                /**\r\n                 * Resolved type reference inside the global namespace.\r\n                 * @type {ProtoBuf.Reflect.T|null}\r\n                 * @expose\r\n                 */\r\n                this.resolvedType = null;\r\n\r\n                /**\r\n                 * Unique message field id.\r\n                 * @type {number}\r\n                 * @expose\r\n                 */\r\n                this.id = id;\r\n\r\n                /**\r\n                 * Message field options.\r\n                 * @type {!Object.<string,*>}\r\n                 * @dict\r\n                 * @expose\r\n                 */\r\n                this.options = options || {};\r\n\r\n                /**\r\n                 * Default value.\r\n                 * @type {*}\r\n                 * @expose\r\n                 */\r\n                this.defaultValue = null;\r\n\r\n                /**\r\n                 * Enclosing OneOf.\r\n                 * @type {?ProtoBuf.Reflect.Message.OneOf}\r\n                 * @expose\r\n                 */\r\n                this.oneof = oneof || null;\r\n\r\n                /**\r\n                 * Original field name.\r\n                 * @type {string}\r\n                 * @expose\r\n                 */\r\n                this.originalName = this.name; // Used to revert camelcase transformation on naming collisions\r\n\r\n                // Convert field names to camel case notation if the override is set\r\n                if (this.builder.options['convertFieldsToCamelCase'] && !(this instanceof Message.ExtensionField))\r\n                    this.name = Field._toCamelCase(this.name);\r\n            };\r\n\r\n            /**\r\n             * Converts a field name to camel case.\r\n             * @param {string} name Likely underscore notated name\r\n             * @returns {string} Camel case notated name\r\n             * @private\r\n             */\r\n            Field._toCamelCase = function(name) {\r\n                return name.replace(/_([a-zA-Z])/g, function($0, $1) {\r\n                    return $1.toUpperCase();\r\n                });\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Message.Field.prototype\r\n             * @inner\r\n             */\r\n            var FieldPrototype = Field.prototype = Object.create(T.prototype);\r\n\r\n            /**\r\n             * Builds the field.\r\n             * @override\r\n             * @expose\r\n             */\r\n            FieldPrototype.build = function() {\r\n                this.defaultValue = typeof this.options['default'] !== 'undefined'\r\n                    ? this.verifyValue(this.options['default']) : null;\r\n            };\r\n\r\n            /**\r\n             * Makes a Long from a value.\r\n             * @param {{low: number, high: number, unsigned: boolean}|string|number} value Value\r\n             * @param {boolean=} unsigned Whether unsigned or not, defaults to reuse it from Long-like objects or to signed for\r\n             *  strings and numbers\r\n             * @returns {!Long}\r\n             * @throws {Error} If the value cannot be converted to a Long\r\n             * @inner\r\n             */\r\n            function mkLong(value, unsigned) {\r\n                if (value && typeof value.low === 'number' && typeof value.high === 'number' && typeof value.unsigned === 'boolean'\r\n                    && value.low === value.low && value.high === value.high)\r\n                    return new ProtoBuf.Long(value.low, value.high, typeof unsigned === 'undefined' ? value.unsigned : unsigned);\r\n                if (typeof value === 'string')\r\n                    return ProtoBuf.Long.fromString(value, unsigned || false, 10);\r\n                if (typeof value === 'number')\r\n                    return ProtoBuf.Long.fromNumber(value, unsigned || false);\r\n                throw Error(\"not convertible to Long\");\r\n            }\r\n\r\n            /**\r\n             * Checks if the given value can be set for this field.\r\n             * @param {*} value Value to check\r\n             * @param {boolean=} skipRepeated Whether to skip the repeated value check or not. Defaults to false.\r\n             * @return {*} Verified, maybe adjusted, value\r\n             * @throws {Error} If the value cannot be set for this field\r\n             * @expose\r\n             */\r\n            FieldPrototype.verifyValue = function(value, skipRepeated) {\r\n                skipRepeated = skipRepeated || false;\r\n                var fail = function(val, msg) {\r\n                    throw Error(\"Illegal value for \"+this.toString(true)+\" of type \"+this.type.name+\": \"+val+\" (\"+msg+\")\");\r\n                }.bind(this);\r\n                if (value === null) { // NULL values for optional fields\r\n                    if (this.required)\r\n                        fail(typeof value, \"required\");\r\n                    return null;\r\n                }\r\n                var i;\r\n                if (this.repeated && !skipRepeated) { // Repeated values as arrays\r\n                    if (!ProtoBuf.Util.isArray(value))\r\n                        value = [value];\r\n                    var res = [];\r\n                    for (i=0; i<value.length; i++)\r\n                        res.push(this.verifyValue(value[i], true));\r\n                    return res;\r\n                }\r\n                // All non-repeated fields expect no array\r\n                if (!this.repeated && ProtoBuf.Util.isArray(value))\r\n                    fail(typeof value, \"no array expected\");\r\n\r\n                switch (this.type) {\r\n                    // Signed 32bit\r\n                    case ProtoBuf.TYPES[\"int32\"]:\r\n                    case ProtoBuf.TYPES[\"sint32\"]:\r\n                    case ProtoBuf.TYPES[\"sfixed32\"]:\r\n                        // Account for !NaN: value === value\r\n                        if (typeof value !== 'number' || (value === value && value % 1 !== 0))\r\n                            fail(typeof value, \"not an integer\");\r\n                        return value > 4294967295 ? value | 0 : value;\r\n\r\n                    // Unsigned 32bit\r\n                    case ProtoBuf.TYPES[\"uint32\"]:\r\n                    case ProtoBuf.TYPES[\"fixed32\"]:\r\n                        if (typeof value !== 'number' || (value === value && value % 1 !== 0))\r\n                            fail(typeof value, \"not an integer\");\r\n                        return value < 0 ? value >>> 0 : value;\r\n\r\n                    // Signed 64bit\r\n                    case ProtoBuf.TYPES[\"int64\"]:\r\n                    case ProtoBuf.TYPES[\"sint64\"]:\r\n                    case ProtoBuf.TYPES[\"sfixed64\"]: {\r\n                        if (ProtoBuf.Long)\r\n                            try {\r\n                                return mkLong(value, false);\r\n                            } catch (e) {\r\n                                fail(typeof value, e.message);\r\n                            }\r\n                        else\r\n                            fail(typeof value, \"requires Long.js\");\r\n                    }\r\n\r\n                    // Unsigned 64bit\r\n                    case ProtoBuf.TYPES[\"uint64\"]:\r\n                    case ProtoBuf.TYPES[\"fixed64\"]: {\r\n                        if (ProtoBuf.Long)\r\n                            try {\r\n                                return mkLong(value, true);\r\n                            } catch (e) {\r\n                                fail(typeof value, e.message);\r\n                            }\r\n                        else\r\n                            fail(typeof value, \"requires Long.js\");\r\n                    }\r\n\r\n                    // Bool\r\n                    case ProtoBuf.TYPES[\"bool\"]:\r\n                        if (typeof value !== 'boolean')\r\n                            fail(typeof value, \"not a boolean\");\r\n                        return value;\r\n\r\n                    // Float\r\n                    case ProtoBuf.TYPES[\"float\"]:\r\n                    case ProtoBuf.TYPES[\"double\"]:\r\n                        if (typeof value !== 'number')\r\n                            fail(typeof value, \"not a number\");\r\n                        return value;\r\n\r\n                    // Length-delimited string\r\n                    case ProtoBuf.TYPES[\"string\"]:\r\n                        if (typeof value !== 'string' && !(value && value instanceof String))\r\n                            fail(typeof value, \"not a string\");\r\n                        return \"\"+value; // Convert String object to string\r\n\r\n                    // Length-delimited bytes\r\n                    case ProtoBuf.TYPES[\"bytes\"]:\r\n                        if (ByteBuffer.isByteBuffer(value))\r\n                            return value;\r\n                        return ByteBuffer.wrap(value, \"base64\");\r\n\r\n                    // Constant enum value\r\n                    case ProtoBuf.TYPES[\"enum\"]: {\r\n                        var values = this.resolvedType.getChildren(Enum.Value);\r\n                        for (i=0; i<values.length; i++)\r\n                            if (values[i].name == value)\r\n                                return values[i].id;\r\n                            else if (values[i].id == value)\r\n                                return values[i].id;\r\n                        fail(value, \"not a valid enum value\");\r\n                    }\r\n                    // Embedded message\r\n                    case ProtoBuf.TYPES[\"group\"]:\r\n                    case ProtoBuf.TYPES[\"message\"]: {\r\n                        if (!value || typeof value !== 'object')\r\n                            fail(typeof value, \"object expected\");\r\n                        if (value instanceof this.resolvedType.clazz)\r\n                            return value;\r\n                        if (value instanceof ProtoBuf.Builder.Message) {\r\n                            // Mismatched type: Convert to object (see: https://github.com/dcodeIO/ProtoBuf.js/issues/180)\r\n                            var obj = {};\r\n                            for (var i in value)\r\n                                if (value.hasOwnProperty(i))\r\n                                    obj[i] = value[i];\r\n                            value = obj;\r\n                        }\r\n                        // Else let's try to construct one from a key-value object\r\n                        return new (this.resolvedType.clazz)(value); // May throw for a hundred of reasons\r\n                    }\r\n                }\r\n\r\n                // We should never end here\r\n                throw Error(\"[INTERNAL] Illegal value for \"+this.toString(true)+\": \"+value+\" (undefined type \"+this.type+\")\");\r\n            };\r\n\r\n            /**\r\n             * Encodes the specified field value to the specified buffer.\r\n             * @param {*} value Verified field value\r\n             * @param {ByteBuffer} buffer ByteBuffer to encode to\r\n             * @return {ByteBuffer} The ByteBuffer for chaining\r\n             * @throws {Error} If the field cannot be encoded\r\n             * @expose\r\n             */\r\n            FieldPrototype.encode = function(value, buffer) {\r\n                if (this.type === null || typeof this.type !== 'object')\r\n                    throw Error(\"[INTERNAL] Unresolved type in \"+this.toString(true)+\": \"+this.type);\r\n                if (value === null || (this.repeated && value.length == 0))\r\n                    return buffer; // Optional omitted\r\n                try {\r\n                    if (this.repeated) {\r\n                        var i;\r\n                        // \"Only repeated fields of primitive numeric types (types which use the varint, 32-bit, or 64-bit wire\r\n                        // types) can be declared 'packed'.\"\r\n                        if (this.options[\"packed\"] && ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {\r\n                            // \"All of the elements of the field are packed into a single key-value pair with wire type 2\r\n                            // (length-delimited). Each element is encoded the same way it would be normally, except without a\r\n                            // tag preceding it.\"\r\n                            buffer.writeVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);\r\n                            buffer.ensureCapacity(buffer.offset += 1); // We do not know the length yet, so let's assume a varint of length 1\r\n                            var start = buffer.offset; // Remember where the contents begin\r\n                            for (i=0; i<value.length; i++)\r\n                                this.encodeValue(value[i], buffer);\r\n                            var len = buffer.offset-start,\r\n                                varintLen = ByteBuffer.calculateVarint32(len);\r\n                            if (varintLen > 1) { // We need to move the contents\r\n                                var contents = buffer.slice(start, buffer.offset);\r\n                                start += varintLen-1;\r\n                                buffer.offset = start;\r\n                                buffer.append(contents);\r\n                            }\r\n                            buffer.writeVarint32(len, start-varintLen);\r\n                        } else {\r\n                            // \"If your message definition has repeated elements (without the [packed=true] option), the encoded\r\n                            // message has zero or more key-value pairs with the same tag number\"\r\n                            for (i=0; i<value.length; i++)\r\n                                buffer.writeVarint32((this.id << 3) | this.type.wireType),\r\n                                this.encodeValue(value[i], buffer);\r\n                        }\r\n                    } else\r\n                        buffer.writeVarint32((this.id << 3) | this.type.wireType),\r\n                        this.encodeValue(value, buffer);\r\n                } catch (e) {\r\n                    throw Error(\"Illegal value for \"+this.toString(true)+\": \"+value+\" (\"+e+\")\");\r\n                }\r\n                return buffer;\r\n            };\r\n\r\n            /**\r\n             * Encodes a value to the specified buffer. Does not encode the key.\r\n             * @param {*} value Field value\r\n             * @param {ByteBuffer} buffer ByteBuffer to encode to\r\n             * @return {ByteBuffer} The ByteBuffer for chaining\r\n             * @throws {Error} If the value cannot be encoded\r\n             * @expose\r\n             */\r\n            FieldPrototype.encodeValue = function(value, buffer) {\r\n                if (value === null) return buffer; // Nothing to encode\r\n                // Tag has already been written\r\n\r\n                switch (this.type) {\r\n                    // 32bit signed varint\r\n                    case ProtoBuf.TYPES[\"int32\"]:\r\n                        // \"If you use int32 or int64 as the type for a negative number, the resulting varint is always ten bytes\r\n                        // long – it is, effectively, treated like a very large unsigned integer.\" (see #122)\r\n                        if (value < 0)\r\n                            buffer.writeVarint64(value);\r\n                        else\r\n                            buffer.writeVarint32(value);\r\n                        break;\r\n\r\n                    // 32bit unsigned varint\r\n                    case ProtoBuf.TYPES[\"uint32\"]:\r\n                        buffer.writeVarint32(value);\r\n                        break;\r\n\r\n                    // 32bit varint zig-zag\r\n                    case ProtoBuf.TYPES[\"sint32\"]:\r\n                        buffer.writeVarint32ZigZag(value);\r\n                        break;\r\n\r\n                    // Fixed unsigned 32bit\r\n                    case ProtoBuf.TYPES[\"fixed32\"]:\r\n                        buffer.writeUint32(value);\r\n                        break;\r\n\r\n                    // Fixed signed 32bit\r\n                    case ProtoBuf.TYPES[\"sfixed32\"]:\r\n                        buffer.writeInt32(value);\r\n                        break;\r\n\r\n                    // 64bit varint as-is\r\n                    case ProtoBuf.TYPES[\"int64\"]:\r\n                    case ProtoBuf.TYPES[\"uint64\"]:\r\n                        buffer.writeVarint64(value); // throws\r\n                        break;\r\n\r\n                    // 64bit varint zig-zag\r\n                    case ProtoBuf.TYPES[\"sint64\"]:\r\n                        buffer.writeVarint64ZigZag(value); // throws\r\n                        break;\r\n\r\n                    // Fixed unsigned 64bit\r\n                    case ProtoBuf.TYPES[\"fixed64\"]:\r\n                        buffer.writeUint64(value); // throws\r\n                        break;\r\n\r\n                    // Fixed signed 64bit\r\n                    case ProtoBuf.TYPES[\"sfixed64\"]:\r\n                        buffer.writeInt64(value); // throws\r\n                        break;\r\n\r\n                    // Bool\r\n                    case ProtoBuf.TYPES[\"bool\"]:\r\n                        if (typeof value === 'string')\r\n                            buffer.writeVarint32(value.toLowerCase() === 'false' ? 0 : !!value);\r\n                        else\r\n                            buffer.writeVarint32(value ? 1 : 0);\r\n                        break;\r\n\r\n                    // Constant enum value\r\n                    case ProtoBuf.TYPES[\"enum\"]:\r\n                        buffer.writeVarint32(value);\r\n                        break;\r\n\r\n                    // 32bit float\r\n                    case ProtoBuf.TYPES[\"float\"]:\r\n                        buffer.writeFloat32(value);\r\n                        break;\r\n\r\n                    // 64bit float\r\n                    case ProtoBuf.TYPES[\"double\"]:\r\n                        buffer.writeFloat64(value);\r\n                        break;\r\n\r\n                    // Length-delimited string\r\n                    case ProtoBuf.TYPES[\"string\"]:\r\n                        buffer.writeVString(value);\r\n                        break;\r\n\r\n                    // Length-delimited bytes\r\n                    case ProtoBuf.TYPES[\"bytes\"]:\r\n                        if (value.remaining() < 0)\r\n                            throw Error(\"Illegal value for \"+this.toString(true)+\": \"+value.remaining()+\" bytes remaining\");\r\n                        var prevOffset = value.offset;\r\n                        buffer.writeVarint32(value.remaining());\r\n                        buffer.append(value);\r\n                        value.offset = prevOffset;\r\n                        break;\r\n\r\n                    // Embedded message\r\n                    case ProtoBuf.TYPES[\"message\"]:\r\n                        var bb = new ByteBuffer().LE();\r\n                        this.resolvedType.encode(value, bb);\r\n                        buffer.writeVarint32(bb.offset);\r\n                        buffer.append(bb.flip());\r\n                        break;\r\n\r\n                    // Legacy group\r\n                    case ProtoBuf.TYPES[\"group\"]:\r\n                        this.resolvedType.encode(value, buffer);\r\n                        buffer.writeVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.ENDGROUP);\r\n                        break;\r\n\r\n                    default:\r\n                        // We should never end here\r\n                        throw Error(\"[INTERNAL] Illegal value to encode in \"+this.toString(true)+\": \"+value+\" (unknown type)\");\r\n                }\r\n                return buffer;\r\n            };\r\n\r\n            /**\r\n             * Calculates the length of this field's value on the network level.\r\n             * @param {*} value Field value\r\n             * @returns {number} Byte length\r\n             * @expose\r\n             */\r\n            FieldPrototype.calculate = function(value) {\r\n                value = this.verifyValue(value); // May throw\r\n                if (this.type === null || typeof this.type !== 'object')\r\n                    throw Error(\"[INTERNAL] Unresolved type in \"+this.toString(true)+\": \"+this.type);\r\n                if (value === null || (this.repeated && value.length == 0))\r\n                    return 0; // Optional omitted\r\n                var n = 0;\r\n                try {\r\n                    if (this.repeated) {\r\n                        var i, ni;\r\n                        if (this.options[\"packed\"] && ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {\r\n                            n += ByteBuffer.calculateVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.LDELIM);\r\n                            ni = 0;\r\n                            for (i=0; i<value.length; i++)\r\n                                ni += this.calculateValue(value[i]);\r\n                            n += ByteBuffer.calculateVarint32(ni);\r\n                            n += ni;\r\n                        } else {\r\n                            for (i=0; i<value.length; i++)\r\n                                n += ByteBuffer.calculateVarint32((this.id << 3) | this.type.wireType),\r\n                                n += this.calculateValue(value[i]);\r\n                        }\r\n                    } else {\r\n                        n += ByteBuffer.calculateVarint32((this.id << 3) | this.type.wireType);\r\n                        n += this.calculateValue(value);\r\n                    }\r\n                } catch (e) {\r\n                    throw Error(\"Illegal value for \"+this.toString(true)+\": \"+value+\" (\"+e+\")\");\r\n                }\r\n                return n;\r\n            };\r\n\r\n            /**\r\n             * Calculates the byte length of a value.\r\n             * @param {*} value Field value\r\n             * @returns {number} Byte length\r\n             * @throws {Error} If the value cannot be calculated\r\n             * @expose\r\n             */\r\n            FieldPrototype.calculateValue = function(value) {\r\n                if (value === null) return 0; // Nothing to encode\r\n                // Tag has already been written\r\n                var n;\r\n                switch (this.type) {\r\n                    case ProtoBuf.TYPES[\"int32\"]:\r\n                        return value < 0 ? ByteBuffer.calculateVarint64(value) : ByteBuffer.calculateVarint32(value);\r\n                    case ProtoBuf.TYPES[\"uint32\"]:\r\n                        return ByteBuffer.calculateVarint32(value);\r\n                    case ProtoBuf.TYPES[\"sint32\"]:\r\n                        return ByteBuffer.calculateVarint32(ByteBuffer.zigZagEncode32(value));\r\n                    case ProtoBuf.TYPES[\"fixed32\"]:\r\n                    case ProtoBuf.TYPES[\"sfixed32\"]:\r\n                    case ProtoBuf.TYPES[\"float\"]:\r\n                        return 4;\r\n                    case ProtoBuf.TYPES[\"int64\"]:\r\n                    case ProtoBuf.TYPES[\"uint64\"]:\r\n                        return ByteBuffer.calculateVarint64(value);\r\n                    case ProtoBuf.TYPES[\"sint64\"]:\r\n                        return ByteBuffer.calculateVarint64(ByteBuffer.zigZagEncode64(value));\r\n                    case ProtoBuf.TYPES[\"fixed64\"]:\r\n                    case ProtoBuf.TYPES[\"sfixed64\"]:\r\n                        return 8;\r\n                    case ProtoBuf.TYPES[\"bool\"]:\r\n                        return 1;\r\n                    case ProtoBuf.TYPES[\"enum\"]:\r\n                        return ByteBuffer.calculateVarint32(value);\r\n                    case ProtoBuf.TYPES[\"double\"]:\r\n                        return 8;\r\n                    case ProtoBuf.TYPES[\"string\"]:\r\n                        n = ByteBuffer.calculateUTF8Bytes(value);\r\n                        return ByteBuffer.calculateVarint32(n) + n;\r\n                    case ProtoBuf.TYPES[\"bytes\"]:\r\n                        if (value.remaining() < 0)\r\n                            throw Error(\"Illegal value for \"+this.toString(true)+\": \"+value.remaining()+\" bytes remaining\");\r\n                        return ByteBuffer.calculateVarint32(value.remaining()) + value.remaining();\r\n                    case ProtoBuf.TYPES[\"message\"]:\r\n                        n = this.resolvedType.calculate(value);\r\n                        return ByteBuffer.calculateVarint32(n) + n;\r\n                    case ProtoBuf.TYPES[\"group\"]:\r\n                        n = this.resolvedType.calculate(value);\r\n                        return n + ByteBuffer.calculateVarint32((this.id << 3) | ProtoBuf.WIRE_TYPES.ENDGROUP);\r\n                }\r\n                // We should never end here\r\n                throw Error(\"[INTERNAL] Illegal value to encode in \"+this.toString(true)+\": \"+value+\" (unknown type)\");\r\n            };\r\n\r\n            /**\r\n             * Decode the field value from the specified buffer.\r\n             * @param {number} wireType Leading wire type\r\n             * @param {ByteBuffer} buffer ByteBuffer to decode from\r\n             * @param {boolean=} skipRepeated Whether to skip the repeated check or not. Defaults to false.\r\n             * @return {*} Decoded value\r\n             * @throws {Error} If the field cannot be decoded\r\n             * @expose\r\n             */\r\n            FieldPrototype.decode = function(wireType, buffer, skipRepeated) {\r\n                var value, nBytes;\r\n                if (wireType != this.type.wireType && (skipRepeated || (wireType != ProtoBuf.WIRE_TYPES.LDELIM || !this.repeated)))\r\n                    throw Error(\"Illegal wire type for field \"+this.toString(true)+\": \"+wireType+\" (\"+this.type.wireType+\" expected)\");\r\n                if (wireType == ProtoBuf.WIRE_TYPES.LDELIM && this.repeated && this.options[\"packed\"] && ProtoBuf.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {\r\n                    if (!skipRepeated) {\r\n                        nBytes = buffer.readVarint32();\r\n                        nBytes = buffer.offset + nBytes; // Limit\r\n                        var values = [];\r\n                        while (buffer.offset < nBytes)\r\n                            values.push(this.decode(this.type.wireType, buffer, true));\r\n                        return values;\r\n                    }\r\n                    // Read the next value otherwise...\r\n                }\r\n                switch (this.type) {\r\n                    // 32bit signed varint\r\n                    case ProtoBuf.TYPES[\"int32\"]:\r\n                        return buffer.readVarint32() | 0;\r\n\r\n                    // 32bit unsigned varint\r\n                    case ProtoBuf.TYPES[\"uint32\"]:\r\n                        return buffer.readVarint32() >>> 0;\r\n\r\n                    // 32bit signed varint zig-zag\r\n                    case ProtoBuf.TYPES[\"sint32\"]:\r\n                        return buffer.readVarint32ZigZag() | 0;\r\n\r\n                    // Fixed 32bit unsigned\r\n                    case ProtoBuf.TYPES[\"fixed32\"]:\r\n                        return buffer.readUint32() >>> 0;\r\n\r\n                    case ProtoBuf.TYPES[\"sfixed32\"]:\r\n                        return buffer.readInt32() | 0;\r\n\r\n                    // 64bit signed varint\r\n                    case ProtoBuf.TYPES[\"int64\"]:\r\n                        return buffer.readVarint64();\r\n\r\n                    // 64bit unsigned varint\r\n                    case ProtoBuf.TYPES[\"uint64\"]:\r\n                        return buffer.readVarint64().toUnsigned();\r\n\r\n                    // 64bit signed varint zig-zag\r\n                    case ProtoBuf.TYPES[\"sint64\"]:\r\n                        return buffer.readVarint64ZigZag();\r\n\r\n                    // Fixed 64bit unsigned\r\n                    case ProtoBuf.TYPES[\"fixed64\"]:\r\n                        return buffer.readUint64();\r\n\r\n                    // Fixed 64bit signed\r\n                    case ProtoBuf.TYPES[\"sfixed64\"]:\r\n                        return buffer.readInt64();\r\n\r\n                    // Bool varint\r\n                    case ProtoBuf.TYPES[\"bool\"]:\r\n                        return !!buffer.readVarint32();\r\n\r\n                    // Constant enum value (varint)\r\n                    case ProtoBuf.TYPES[\"enum\"]:\r\n                        // The following Builder.Message#set will already throw\r\n                        return buffer.readVarint32();\r\n\r\n                    // 32bit float\r\n                    case ProtoBuf.TYPES[\"float\"]:\r\n                        return buffer.readFloat();\r\n\r\n                    // 64bit float\r\n                    case ProtoBuf.TYPES[\"double\"]:\r\n                        return buffer.readDouble();\r\n\r\n                    // Length-delimited string\r\n                    case ProtoBuf.TYPES[\"string\"]:\r\n                        return buffer.readVString();\r\n\r\n                    // Length-delimited bytes\r\n                    case ProtoBuf.TYPES[\"bytes\"]: {\r\n                        nBytes = buffer.readVarint32();\r\n                        if (buffer.remaining() < nBytes)\r\n                            throw Error(\"Illegal number of bytes for \"+this.toString(true)+\": \"+nBytes+\" required but got only \"+buffer.remaining());\r\n                        value = buffer.clone(); // Offset already set\r\n                        value.limit = value.offset+nBytes;\r\n                        buffer.offset += nBytes;\r\n                        return value;\r\n                    }\r\n\r\n                    // Length-delimited embedded message\r\n                    case ProtoBuf.TYPES[\"message\"]: {\r\n                        nBytes = buffer.readVarint32();\r\n                        return this.resolvedType.decode(buffer, nBytes);\r\n                    }\r\n\r\n                    // Legacy group\r\n                    case ProtoBuf.TYPES[\"group\"]:\r\n                        return this.resolvedType.decode(buffer, -1, this.id);\r\n                }\r\n\r\n                // We should never end here\r\n                throw Error(\"[INTERNAL] Illegal wire type for \"+this.toString(true)+\": \"+wireType);\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Message.Field\r\n             * @expose\r\n             */\r\n            Reflect.Message.Field = Field;\r\n\r\n            /**\r\n             * Constructs a new Message ExtensionField.\r\n             * @exports ProtoBuf.Reflect.Message.ExtensionField\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.Message} message Message reference\r\n             * @param {string} rule Rule, one of requried, optional, repeated\r\n             * @param {string} type Data type, e.g. int32\r\n             * @param {string} name Field name\r\n             * @param {number} id Unique field id\r\n             * @param {Object.<string,*>=} options Options\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.Message.Field\r\n             */\r\n            var ExtensionField = function(builder, message, rule, type, name, id, options) {\r\n                Field.call(this, builder, message, rule, type, name, id, options);\r\n\r\n                /**\r\n                 * Extension reference.\r\n                 * @type {!ProtoBuf.Reflect.Extension}\r\n                 * @expose\r\n                 */\r\n                this.extension;\r\n            };\r\n\r\n            // Extends Field\r\n            ExtensionField.prototype = Object.create(Field.prototype);\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Message.ExtensionField\r\n             * @expose\r\n             */\r\n            Reflect.Message.ExtensionField = ExtensionField;\r\n\r\n            /**\r\n             * Constructs a new Message OneOf.\r\n             * @exports ProtoBuf.Reflect.Message.OneOf\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.Message} message Message reference\r\n             * @param {string} name OneOf name\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.T\r\n             */\r\n            var OneOf = function(builder, message, name) {\r\n                T.call(this, builder, message, name);\r\n\r\n                /**\r\n                 * Enclosed fields.\r\n                 * @type {!Array.<!ProtoBuf.Reflect.Message.Field>}\r\n                 * @expose\r\n                 */\r\n                this.fields = [];\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Message.OneOf\r\n             * @expose\r\n             */\r\n            Reflect.Message.OneOf = OneOf;\r\n\r\n            /**\r\n             * Constructs a new Enum.\r\n             * @exports ProtoBuf.Reflect.Enum\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.T} parent Parent Reflect object\r\n             * @param {string} name Enum name\r\n             * @param {Object.<string,*>=} options Enum options\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.Namespace\r\n             */\r\n            var Enum = function(builder, parent, name, options) {\r\n                Namespace.call(this, builder, parent, name, options);\r\n\r\n                /**\r\n                 * @override\r\n                 */\r\n                this.className = \"Enum\";\r\n\r\n                /**\r\n                 * Runtime enum object.\r\n                 * @type {Object.<string,number>|null}\r\n                 * @expose\r\n                 */\r\n                this.object = null;\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Enum.prototype\r\n             * @inner\r\n             */\r\n            var EnumPrototype = Enum.prototype = Object.create(Namespace.prototype);\r\n\r\n            /**\r\n             * Builds this enum and returns the runtime counterpart.\r\n             * @return {Object<string,*>}\r\n             * @expose\r\n             */\r\n            EnumPrototype.build = function() {\r\n                var enm = {},\r\n                    values = this.getChildren(Enum.Value);\r\n                for (var i=0, k=values.length; i<k; ++i)\r\n                    enm[values[i]['name']] = values[i]['id'];\r\n                if (Object.defineProperty)\r\n                    Object.defineProperty(enm, '$options', { \"value\": this.buildOpt() });\r\n                return this.object = enm;\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Enum\r\n             * @expose\r\n             */\r\n            Reflect.Enum = Enum;\r\n\r\n            /**\r\n             * Constructs a new Enum Value.\r\n             * @exports ProtoBuf.Reflect.Enum.Value\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.Enum} enm Enum reference\r\n             * @param {string} name Field name\r\n             * @param {number} id Unique field id\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.T\r\n             */\r\n            var Value = function(builder, enm, name, id) {\r\n                T.call(this, builder, enm, name);\r\n\r\n                /**\r\n                 * @override\r\n                 */\r\n                this.className = \"Enum.Value\";\r\n\r\n                /**\r\n                 * Unique enum value id.\r\n                 * @type {number}\r\n                 * @expose\r\n                 */\r\n                this.id = id;\r\n            };\r\n\r\n            // Extends T\r\n            Value.prototype = Object.create(T.prototype);\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Enum.Value\r\n             * @expose\r\n             */\r\n            Reflect.Enum.Value = Value;\r\n\r\n            /**\r\n             * An extension (field).\r\n             * @exports ProtoBuf.Reflect.Extension\r\n             * @constructor\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.T} parent Parent object\r\n             * @param {string} name Object name\r\n             * @param {!ProtoBuf.Reflect.Message.Field} field Extension field\r\n             */\r\n            var Extension = function(builder, parent, name, field) {\r\n                T.call(this, builder, parent, name);\r\n\r\n                /**\r\n                 * Extended message field.\r\n                 * @type {!ProtoBuf.Reflect.Message.Field}\r\n                 * @expose\r\n                 */\r\n                this.field = field;\r\n            };\r\n\r\n            // Extends T\r\n            Extension.prototype = Object.create(T.prototype);\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Extension\r\n             * @expose\r\n             */\r\n            Reflect.Extension = Extension;\r\n\r\n            /**\r\n             * Constructs a new Service.\r\n             * @exports ProtoBuf.Reflect.Service\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.Namespace} root Root\r\n             * @param {string} name Service name\r\n             * @param {Object.<string,*>=} options Options\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.Namespace\r\n             */\r\n            var Service = function(builder, root, name, options) {\r\n                Namespace.call(this, builder, root, name, options);\r\n\r\n                /**\r\n                 * @override\r\n                 */\r\n                this.className = \"Service\";\r\n\r\n                /**\r\n                 * Built runtime service class.\r\n                 * @type {?function(new:ProtoBuf.Builder.Service)}\r\n                 */\r\n                this.clazz = null;\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Service.prototype\r\n             * @inner\r\n             */\r\n            var ServicePrototype = Service.prototype = Object.create(Namespace.prototype);\r\n\r\n            /**\r\n             * Builds the service and returns the runtime counterpart, which is a fully functional class.\r\n             * @see ProtoBuf.Builder.Service\r\n             * @param {boolean=} rebuild Whether to rebuild or not\r\n             * @return {Function} Service class\r\n             * @throws {Error} If the message cannot be built\r\n             * @expose\r\n             */\r\n            ServicePrototype.build = function(rebuild) {\r\n                if (this.clazz && !rebuild)\r\n                    return this.clazz;\r\n\r\n                // Create the runtime Service class in its own scope\r\n                return this.clazz = (function(ProtoBuf, T) {\r\n\r\n                    /**\r\n                     * Constructs a new runtime Service.\r\n                     * @name ProtoBuf.Builder.Service\r\n                     * @param {function(string, ProtoBuf.Builder.Message, function(Error, ProtoBuf.Builder.Message=))=} rpcImpl RPC implementation receiving the method name and the message\r\n                     * @class Barebone of all runtime services.\r\n                     * @constructor\r\n                     * @throws {Error} If the service cannot be created\r\n                     */\r\n                    var Service = function(rpcImpl) {\r\n                        ProtoBuf.Builder.Service.call(this);\r\n\r\n                        /**\r\n                         * Service implementation.\r\n                         * @name ProtoBuf.Builder.Service#rpcImpl\r\n                         * @type {!function(string, ProtoBuf.Builder.Message, function(Error, ProtoBuf.Builder.Message=))}\r\n                         * @expose\r\n                         */\r\n                        this.rpcImpl = rpcImpl || function(name, msg, callback) {\r\n                            // This is what a user has to implement: A function receiving the method name, the actual message to\r\n                            // send (type checked) and the callback that's either provided with the error as its first\r\n                            // argument or null and the actual response message.\r\n                            setTimeout(callback.bind(this, Error(\"Not implemented, see: https://github.com/dcodeIO/ProtoBuf.js/wiki/Services\")), 0); // Must be async!\r\n                        };\r\n                    };\r\n\r\n                    /**\r\n                     * @alias ProtoBuf.Builder.Service.prototype\r\n                     * @inner\r\n                     */\r\n                    var ServicePrototype = Service.prototype = Object.create(ProtoBuf.Builder.Service.prototype);\r\n\r\n                    if (Object.defineProperty)\r\n                        Object.defineProperty(Service, \"$options\", { \"value\": T.buildOpt() }),\r\n                        Object.defineProperty(ServicePrototype, \"$options\", { \"value\": Service[\"$options\"] });\r\n\r\n                    /**\r\n                     * Asynchronously performs an RPC call using the given RPC implementation.\r\n                     * @name ProtoBuf.Builder.Service.[Method]\r\n                     * @function\r\n                     * @param {!function(string, ProtoBuf.Builder.Message, function(Error, ProtoBuf.Builder.Message=))} rpcImpl RPC implementation\r\n                     * @param {ProtoBuf.Builder.Message} req Request\r\n                     * @param {function(Error, (ProtoBuf.Builder.Message|ByteBuffer|Buffer|string)=)} callback Callback receiving\r\n                     *  the error if any and the response either as a pre-parsed message or as its raw bytes\r\n                     * @abstract\r\n                     */\r\n\r\n                    /**\r\n                     * Asynchronously performs an RPC call using the instance's RPC implementation.\r\n                     * @name ProtoBuf.Builder.Service#[Method]\r\n                     * @function\r\n                     * @param {ProtoBuf.Builder.Message} req Request\r\n                     * @param {function(Error, (ProtoBuf.Builder.Message|ByteBuffer|Buffer|string)=)} callback Callback receiving\r\n                     *  the error if any and the response either as a pre-parsed message or as its raw bytes\r\n                     * @abstract\r\n                     */\r\n\r\n                    var rpc = T.getChildren(ProtoBuf.Reflect.Service.RPCMethod);\r\n                    for (var i=0; i<rpc.length; i++) {\r\n                        (function(method) {\r\n\r\n                            // service#Method(message, callback)\r\n                            ServicePrototype[method.name] = function(req, callback) {\r\n                                try {\r\n                                    if (!req || !(req instanceof method.resolvedRequestType.clazz)) {\r\n                                        setTimeout(callback.bind(this, Error(\"Illegal request type provided to service method \"+T.name+\"#\"+method.name)), 0);\r\n                                        return;\r\n                                    }\r\n                                    this.rpcImpl(method.fqn(), req, function(err, res) { // Assumes that this is properly async\r\n                                        if (err) {\r\n                                            callback(err);\r\n                                            return;\r\n                                        }\r\n                                        try { res = method.resolvedResponseType.clazz.decode(res); } catch (notABuffer) {}\r\n                                        if (!res || !(res instanceof method.resolvedResponseType.clazz)) {\r\n                                            callback(Error(\"Illegal response type received in service method \"+ T.name+\"#\"+method.name));\r\n                                            return;\r\n                                        }\r\n                                        callback(null, res);\r\n                                    });\r\n                                } catch (err) {\r\n                                    setTimeout(callback.bind(this, err), 0);\r\n                                }\r\n                            };\r\n\r\n                            // Service.Method(rpcImpl, message, callback)\r\n                            Service[method.name] = function(rpcImpl, req, callback) {\r\n                                new Service(rpcImpl)[method.name](req, callback);\r\n                            };\r\n\r\n                            if (Object.defineProperty)\r\n                                Object.defineProperty(Service[method.name], \"$options\", { \"value\": method.buildOpt() }),\r\n                                Object.defineProperty(ServicePrototype[method.name], \"$options\", { \"value\": Service[method.name][\"$options\"] });\r\n                        })(rpc[i]);\r\n                    }\r\n\r\n                    return Service;\r\n\r\n                })(ProtoBuf, this);\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Service\r\n             * @expose\r\n             */\r\n            Reflect.Service = Service;\r\n\r\n            /**\r\n             * Abstract service method.\r\n             * @exports ProtoBuf.Reflect.Service.Method\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.Service} svc Service\r\n             * @param {string} name Method name\r\n             * @param {Object.<string,*>=} options Options\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.T\r\n             */\r\n            var Method = function(builder, svc, name, options) {\r\n                T.call(this, builder, svc, name);\r\n\r\n                /**\r\n                 * @override\r\n                 */\r\n                this.className = \"Service.Method\";\r\n\r\n                /**\r\n                 * Options.\r\n                 * @type {Object.<string, *>}\r\n                 * @expose\r\n                 */\r\n                this.options = options || {};\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Service.Method.prototype\r\n             * @inner\r\n             */\r\n            var MethodPrototype = Method.prototype = Object.create(T.prototype);\r\n\r\n            /**\r\n             * Builds the method's '$options' property.\r\n             * @name ProtoBuf.Reflect.Service.Method#buildOpt\r\n             * @function\r\n             * @return {Object.<string,*>}\r\n             */\r\n            MethodPrototype.buildOpt = NamespacePrototype.buildOpt;\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Service.Method\r\n             * @expose\r\n             */\r\n            Reflect.Service.Method = Method;\r\n\r\n            /**\r\n             * RPC service method.\r\n             * @exports ProtoBuf.Reflect.Service.RPCMethod\r\n             * @param {!ProtoBuf.Builder} builder Builder reference\r\n             * @param {!ProtoBuf.Reflect.Service} svc Service\r\n             * @param {string} name Method name\r\n             * @param {string} request Request message name\r\n             * @param {string} response Response message name\r\n             * @param {Object.<string,*>=} options Options\r\n             * @constructor\r\n             * @extends ProtoBuf.Reflect.Service.Method\r\n             */\r\n            var RPCMethod = function(builder, svc, name, request, response, options) {\r\n                Method.call(this, builder, svc, name, options);\r\n\r\n                /**\r\n                 * @override\r\n                 */\r\n                this.className = \"Service.RPCMethod\";\r\n\r\n                /**\r\n                 * Request message name.\r\n                 * @type {string}\r\n                 * @expose\r\n                 */\r\n                this.requestName = request;\r\n\r\n                /**\r\n                 * Response message name.\r\n                 * @type {string}\r\n                 * @expose\r\n                 */\r\n                this.responseName = response;\r\n\r\n                /**\r\n                 * Resolved request message type.\r\n                 * @type {ProtoBuf.Reflect.Message}\r\n                 * @expose\r\n                 */\r\n                this.resolvedRequestType = null;\r\n\r\n                /**\r\n                 * Resolved response message type.\r\n                 * @type {ProtoBuf.Reflect.Message}\r\n                 * @expose\r\n                 */\r\n                this.resolvedResponseType = null;\r\n            };\r\n\r\n            // Extends Method\r\n            RPCMethod.prototype = Object.create(Method.prototype);\r\n\r\n            /**\r\n             * @alias ProtoBuf.Reflect.Service.RPCMethod\r\n             * @expose\r\n             */\r\n            Reflect.Service.RPCMethod = RPCMethod;\r\n\r\n            return Reflect;\r\n\r\n        })(ProtoBuf);\r\n\r\n        /**\r\n         * @alias ProtoBuf.Builder\r\n         * @expose\r\n         */\r\n        ProtoBuf.Builder = (function(ProtoBuf, Lang, Reflect) {\r\n            \"use strict\";\r\n\r\n            /**\r\n             * Constructs a new Builder.\r\n             * @exports ProtoBuf.Builder\r\n             * @class Provides the functionality to build protocol messages.\r\n             * @param {Object.<string,*>=} options Options\r\n             * @constructor\r\n             */\r\n            var Builder = function(options) {\r\n\r\n                /**\r\n                 * Namespace.\r\n                 * @type {ProtoBuf.Reflect.Namespace}\r\n                 * @expose\r\n                 */\r\n                this.ns = new Reflect.Namespace(this, null, \"\"); // Global namespace\r\n\r\n                /**\r\n                 * Namespace pointer.\r\n                 * @type {ProtoBuf.Reflect.T}\r\n                 * @expose\r\n                 */\r\n                this.ptr = this.ns;\r\n\r\n                /**\r\n                 * Resolved flag.\r\n                 * @type {boolean}\r\n                 * @expose\r\n                 */\r\n                this.resolved = false;\r\n\r\n                /**\r\n                 * The current building result.\r\n                 * @type {Object.<string,ProtoBuf.Builder.Message|Object>|null}\r\n                 * @expose\r\n                 */\r\n                this.result = null;\r\n\r\n                /**\r\n                 * Imported files.\r\n                 * @type {Array.<string>}\r\n                 * @expose\r\n                 */\r\n                this.files = {};\r\n\r\n                /**\r\n                 * Import root override.\r\n                 * @type {?string}\r\n                 * @expose\r\n                 */\r\n                this.importRoot = null;\r\n\r\n                /**\r\n                 * Options.\r\n                 * @type {!Object.<string, *>}\r\n                 * @expose\r\n                 */\r\n                this.options = options || {};\r\n            };\r\n\r\n            /**\r\n             * @alias ProtoBuf.Builder.prototype\r\n             * @inner\r\n             */\r\n            var BuilderPrototype = Builder.prototype;\r\n\r\n            /**\r\n             * Resets the pointer to the root namespace.\r\n             * @expose\r\n             */\r\n            BuilderPrototype.reset = function() {\r\n                this.ptr = this.ns;\r\n            };\r\n\r\n            /**\r\n             * Defines a package on top of the current pointer position and places the pointer on it.\r\n             * @param {string} pkg\r\n             * @param {Object.<string,*>=} options\r\n             * @return {ProtoBuf.Builder} this\r\n             * @throws {Error} If the package name is invalid\r\n             * @expose\r\n             */\r\n            BuilderPrototype.define = function(pkg, options) {\r\n                if (typeof pkg !== 'string' || !Lang.TYPEREF.test(pkg))\r\n                    throw Error(\"Illegal package: \"+pkg);\r\n                var part = pkg.split(\".\"), i;\r\n                for (i=0; i<part.length; i++) // To be absolutely sure\r\n                    if (!Lang.NAME.test(part[i]))\r\n                        throw Error(\"Illegal package: \"+part[i]);\r\n                for (i=0; i<part.length; i++) {\r\n                    if (this.ptr.getChild(part[i]) === null) // Keep existing namespace\r\n                        this.ptr.addChild(new Reflect.Namespace(this, this.ptr, part[i], options));\r\n                    this.ptr = this.ptr.getChild(part[i]);\r\n                }\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * Tests if a definition is a valid message definition.\r\n             * @param {Object.<string,*>} def Definition\r\n             * @return {boolean} true if valid, else false\r\n             * @expose\r\n             */\r\n            Builder.isValidMessage = function(def) {\r\n                // Messages require a string name\r\n                if (typeof def[\"name\"] !== 'string' || !Lang.NAME.test(def[\"name\"]))\r\n                    return false;\r\n                // Messages must not contain values (that'd be an enum) or methods (that'd be a service)\r\n                if (typeof def[\"values\"] !== 'undefined' || typeof def[\"rpc\"] !== 'undefined')\r\n                    return false;\r\n                // Fields, enums and messages are arrays if provided\r\n                var i;\r\n                if (typeof def[\"fields\"] !== 'undefined') {\r\n                    if (!ProtoBuf.Util.isArray(def[\"fields\"]))\r\n                        return false;\r\n                    var ids = [], id; // IDs must be unique\r\n                    for (i=0; i<def[\"fields\"].length; i++) {\r\n                        if (!Builder.isValidMessageField(def[\"fields\"][i]))\r\n                            return false;\r\n                        id = parseInt(def[\"fields\"][i][\"id\"], 10);\r\n                        if (ids.indexOf(id) >= 0)\r\n                            return false;\r\n                        ids.push(id);\r\n                    }\r\n                    ids = null;\r\n                }\r\n                if (typeof def[\"enums\"] !== 'undefined') {\r\n                    if (!ProtoBuf.Util.isArray(def[\"enums\"]))\r\n                        return false;\r\n                    for (i=0; i<def[\"enums\"].length; i++)\r\n                        if (!Builder.isValidEnum(def[\"enums\"][i]))\r\n                            return false;\r\n                }\r\n                if (typeof def[\"messages\"] !== 'undefined') {\r\n                    if (!ProtoBuf.Util.isArray(def[\"messages\"]))\r\n                        return false;\r\n                    for (i=0; i<def[\"messages\"].length; i++)\r\n                        if (!Builder.isValidMessage(def[\"messages\"][i]) && !Builder.isValidExtend(def[\"messages\"][i]))\r\n                            return false;\r\n                }\r\n                if (typeof def[\"extensions\"] !== 'undefined')\r\n                    if (!ProtoBuf.Util.isArray(def[\"extensions\"]) || def[\"extensions\"].length !== 2 || typeof def[\"extensions\"][0] !== 'number' || typeof def[\"extensions\"][1] !== 'number')\r\n                        return false;\r\n                return true;\r\n            };\r\n\r\n            /**\r\n             * Tests if a definition is a valid message field definition.\r\n             * @param {Object} def Definition\r\n             * @return {boolean} true if valid, else false\r\n             * @expose\r\n             */\r\n            Builder.isValidMessageField = function(def) {\r\n                // Message fields require a string rule, name and type and an id\r\n                if (typeof def[\"rule\"] !== 'string' || typeof def[\"name\"] !== 'string' || typeof def[\"type\"] !== 'string' || typeof def[\"id\"] === 'undefined')\r\n                    return false;\r\n                if (!Lang.RULE.test(def[\"rule\"]) || !Lang.NAME.test(def[\"name\"]) || !Lang.TYPEREF.test(def[\"type\"]) || !Lang.ID.test(\"\"+def[\"id\"]))\r\n                    return false;\r\n                if (typeof def[\"options\"] !== 'undefined') {\r\n                    // Options are objects\r\n                    if (typeof def[\"options\"] !== 'object')\r\n                        return false;\r\n                    // Options are <string,string|number|boolean>\r\n                    var keys = Object.keys(def[\"options\"]);\r\n                    for (var i=0, key; i<keys.length; i++)\r\n                        if (typeof (key = keys[i]) !== 'string' || (typeof def[\"options\"][key] !== 'string' && typeof def[\"options\"][key] !== 'number' && typeof def[\"options\"][key] !== 'boolean'))\r\n                            return false;\r\n                }\r\n                return true;\r\n            };\r\n\r\n            /**\r\n             * Tests if a definition is a valid enum definition.\r\n             * @param {Object} def Definition\r\n             * @return {boolean} true if valid, else false\r\n             * @expose\r\n             */\r\n            Builder.isValidEnum = function(def) {\r\n                // Enums require a string name\r\n                if (typeof def[\"name\"] !== 'string' || !Lang.NAME.test(def[\"name\"]))\r\n                    return false;\r\n                // Enums require at least one value\r\n                if (typeof def[\"values\"] === 'undefined' || !ProtoBuf.Util.isArray(def[\"values\"]) || def[\"values\"].length == 0)\r\n                    return false;\r\n                for (var i=0; i<def[\"values\"].length; i++) {\r\n                    // Values are objects\r\n                    if (typeof def[\"values\"][i] != \"object\")\r\n                        return false;\r\n                    // Values require a string name and an id\r\n                    if (typeof def[\"values\"][i][\"name\"] !== 'string' || typeof def[\"values\"][i][\"id\"] === 'undefined')\r\n                        return false;\r\n                    if (!Lang.NAME.test(def[\"values\"][i][\"name\"]) || !Lang.NEGID.test(\"\"+def[\"values\"][i][\"id\"]))\r\n                        return false;\r\n                }\r\n                // It's not important if there are other fields because [\"values\"] is already unique\r\n                return true;\r\n            };\r\n\r\n            /**\r\n             * Creates ths specified protocol types at the current pointer position.\r\n             * @param {Array.<Object.<string,*>>} defs Messages, enums or services to create\r\n             * @return {ProtoBuf.Builder} this\r\n             * @throws {Error} If a message definition is invalid\r\n             * @expose\r\n             */\r\n            BuilderPrototype.create = function(defs) {\r\n                if (!defs)\r\n                    return this; // Nothing to create\r\n                if (!ProtoBuf.Util.isArray(defs))\r\n                    defs = [defs];\r\n                if (defs.length == 0)\r\n                    return this;\r\n\r\n                // It's quite hard to keep track of scopes and memory here, so let's do this iteratively.\r\n                var stack = [];\r\n                stack.push(defs); // One level [a, b, c]\r\n                while (stack.length > 0) {\r\n                    defs = stack.pop();\r\n                    if (ProtoBuf.Util.isArray(defs)) { // Stack always contains entire namespaces\r\n                        while (defs.length > 0) {\r\n                            var def = defs.shift(); // Namespace always contains an array of messages, enums and services\r\n                            if (Builder.isValidMessage(def)) {\r\n                                var obj = new Reflect.Message(this, this.ptr, def[\"name\"], def[\"options\"], def[\"isGroup\"]);\r\n                                // Create OneOfs\r\n                                var oneofs = {};\r\n                                if (def[\"oneofs\"]) {\r\n                                    var keys = Object.keys(def[\"oneofs\"]);\r\n                                    for (var i=0, k=keys.length; i<k; ++i)\r\n                                        obj.addChild(oneofs[keys[i]] = new Reflect.Message.OneOf(this, obj, keys[i]));\r\n                                }\r\n                                // Create fields\r\n                                if (def[\"fields\"] && def[\"fields\"].length > 0) {\r\n                                    for (i=0, k=def[\"fields\"].length; i<k; ++i) { // i:k=Fields\r\n                                        var fld = def['fields'][i];\r\n                                        if (obj.getChild(fld['id']) !== null)\r\n                                            throw Error(\"Duplicate field id in message \"+obj.name+\": \"+fld['id']);\r\n                                        if (fld[\"options\"]) {\r\n                                            var opts = Object.keys(fld[\"options\"]);\r\n                                            for (var j= 0,l=opts.length; j<l; ++j) { // j:l=Option names\r\n                                                if (typeof opts[j] !== 'string')\r\n                                                    throw Error(\"Illegal field option name in message \"+obj.name+\"#\"+fld[\"name\"]+\": \"+opts[j]);\r\n                                                if (typeof fld[\"options\"][opts[j]] !== 'string' && typeof fld[\"options\"][opts[j]] !== 'number' && typeof fld[\"options\"][opts[j]] !== 'boolean')\r\n                                                    throw Error(\"Illegal field option value in message \"+obj.name+\"#\"+fld[\"name\"]+\"#\"+opts[j]+\": \"+fld[\"options\"][opts[j]]);\r\n                                            }\r\n                                        }\r\n                                        var oneof = null;\r\n                                        if (typeof fld[\"oneof\"] === 'string') {\r\n                                            oneof = oneofs[fld[\"oneof\"]];\r\n                                            if (typeof oneof === 'undefined')\r\n                                                throw Error(\"Illegal oneof in message \"+obj.name+\"#\"+fld[\"name\"]+\": \"+fld[\"oneof\"]);\r\n                                        }\r\n                                        fld = new Reflect.Message.Field(this, obj, fld[\"rule\"], fld[\"type\"], fld[\"name\"], fld[\"id\"], fld[\"options\"], oneof);\r\n                                        if (oneof)\r\n                                            oneof.fields.push(fld);\r\n                                        obj.addChild(fld);\r\n                                    }\r\n                                }\r\n                                // Push enums and messages to stack\r\n                                var subObj = [];\r\n                                if (typeof def[\"enums\"] !== 'undefined' && def['enums'].length > 0)\r\n                                    for (i=0; i<def[\"enums\"].length; i++)\r\n                                        subObj.push(def[\"enums\"][i]);\r\n                                if (def[\"messages\"] && def[\"messages\"].length > 0)\r\n                                    for (i=0; i<def[\"messages\"].length; i++)\r\n                                        subObj.push(def[\"messages\"][i]);\r\n                                // Set extension range\r\n                                if (def[\"extensions\"]) {\r\n                                    obj.extensions = def[\"extensions\"];\r\n                                    if (obj.extensions[0] < ProtoBuf.ID_MIN)\r\n                                        obj.extensions[0] = ProtoBuf.ID_MIN;\r\n                                    if (obj.extensions[1] > ProtoBuf.ID_MAX)\r\n                                        obj.extensions[1] = ProtoBuf.ID_MAX;\r\n                                }\r\n                                this.ptr.addChild(obj); // Add to current namespace\r\n                                if (subObj.length > 0) {\r\n                                    stack.push(defs); // Push the current level back\r\n                                    defs = subObj; // Continue processing sub level\r\n                                    subObj = null;\r\n                                    this.ptr = obj; // And move the pointer to this namespace\r\n                                    obj = null;\r\n                                    continue;\r\n                                }\r\n                                subObj = null;\r\n                                obj = null;\r\n                            } else if (Builder.isValidEnum(def)) {\r\n                                obj = new Reflect.Enum(this, this.ptr, def[\"name\"], def[\"options\"]);\r\n                                for (i=0; i<def[\"values\"].length; i++)\r\n                                    obj.addChild(new Reflect.Enum.Value(this, obj, def[\"values\"][i][\"name\"], def[\"values\"][i][\"id\"]));\r\n                                this.ptr.addChild(obj);\r\n                                obj = null;\r\n                            } else if (Builder.isValidService(def)) {\r\n                                obj = new Reflect.Service(this, this.ptr, def[\"name\"], def[\"options\"]);\r\n                                for (i in def[\"rpc\"])\r\n                                    if (def[\"rpc\"].hasOwnProperty(i))\r\n                                        obj.addChild(new Reflect.Service.RPCMethod(this, obj, i, def[\"rpc\"][i][\"request\"], def[\"rpc\"][i][\"response\"], def[\"rpc\"][i][\"options\"]));\r\n                                this.ptr.addChild(obj);\r\n                                obj = null;\r\n                            } else if (Builder.isValidExtend(def)) {\r\n                                obj = this.ptr.resolve(def[\"ref\"]);\r\n                                if (obj) {\r\n                                    for (i=0; i<def[\"fields\"].length; i++) { // i=Fields\r\n                                        if (obj.getChild(def['fields'][i]['id']) !== null)\r\n                                            throw Error(\"Duplicate extended field id in message \"+obj.name+\": \"+def['fields'][i]['id']);\r\n                                        if (def['fields'][i]['id'] < obj.extensions[0] || def['fields'][i]['id'] > obj.extensions[1])\r\n                                            throw Error(\"Illegal extended field id in message \"+obj.name+\": \"+def['fields'][i]['id']+\" (\"+obj.extensions.join(' to ')+\" expected)\");\r\n                                        // Convert extension field names to camel case notation if the override is set\r\n                                        var name = def[\"fields\"][i][\"name\"];\r\n                                        if (this.options['convertFieldsToCamelCase'])\r\n                                            name = Reflect.Message.Field._toCamelCase(def[\"fields\"][i][\"name\"]);\r\n                                        // see #161: Extensions use their fully qualified name as their runtime key and...\r\n                                        fld = new Reflect.Message.ExtensionField(this, obj, def[\"fields\"][i][\"rule\"], def[\"fields\"][i][\"type\"], this.ptr.fqn()+'.'+name, def[\"fields\"][i][\"id\"], def[\"fields\"][i][\"options\"]);\r\n                                        // ...are added on top of the current namespace as an extension which is used for\r\n                                        // resolving their type later on (the extension always keeps the original name to\r\n                                        // prevent naming collisions)\r\n                                        var ext = new Reflect.Extension(this, this.ptr, def[\"fields\"][i][\"name\"], fld);\r\n                                        fld.extension = ext;\r\n                                        this.ptr.addChild(ext);\r\n                                        obj.addChild(fld);\r\n                                    }\r\n                                } else if (!/\\.?google\\.protobuf\\./.test(def[\"ref\"])) // Silently skip internal extensions\r\n                                    throw Error(\"Extended message \"+def[\"ref\"]+\" is not defined\");\r\n                            } else\r\n                                throw Error(\"Not a valid definition: \"+JSON.stringify(def));\r\n                            def = null;\r\n                        }\r\n                        // Break goes here\r\n                    } else\r\n                        throw Error(\"Not a valid namespace: \"+JSON.stringify(defs));\r\n                    defs = null;\r\n                    this.ptr = this.ptr.parent; // This namespace is s done\r\n                }\r\n                this.resolved = false; // Require re-resolve\r\n                this.result = null; // Require re-build\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * Imports another definition into this builder.\r\n             * @param {Object.<string,*>} json Parsed import\r\n             * @param {(string|{root: string, file: string})=} filename Imported file name\r\n             * @return {ProtoBuf.Builder} this\r\n             * @throws {Error} If the definition or file cannot be imported\r\n             * @expose\r\n             */\r\n            BuilderPrototype[\"import\"] = function(json, filename) {\r\n                if (typeof filename === 'string') {\r\n                    if (ProtoBuf.Util.IS_NODE)\r\n                        filename = require(\"path\")['resolve'](filename);\r\n                    if (this.files[filename] === true) {\r\n                        this.reset();\r\n                        return this; // Skip duplicate imports\r\n                    }\r\n                    this.files[filename] = true;\r\n                }\r\n                if (!!json['imports'] && json['imports'].length > 0) {\r\n                    var importRoot, delim = '/', resetRoot = false;\r\n                    if (typeof filename === 'object') { // If an import root is specified, override\r\n                        this.importRoot = filename[\"root\"]; resetRoot = true; // ... and reset afterwards\r\n                        importRoot = this.importRoot;\r\n                        filename = filename[\"file\"];\r\n                        if (importRoot.indexOf(\"\\\\\") >= 0 || filename.indexOf(\"\\\\\") >= 0) delim = '\\\\';\r\n                    } else if (typeof filename === 'string') {\r\n                        if (this.importRoot) // If import root is overridden, use it\r\n                            importRoot = this.importRoot;\r\n                        else { // Otherwise compute from filename\r\n                            if (filename.indexOf(\"/\") >= 0) { // Unix\r\n                                importRoot = filename.replace(/\\/[^\\/]*$/, \"\");\r\n                                if (/* /file.proto */ importRoot === \"\")\r\n                                    importRoot = \"/\";\r\n                            } else if (filename.indexOf(\"\\\\\") >= 0) { // Windows\r\n                                importRoot = filename.replace(/\\\\[^\\\\]*$/, \"\");\r\n                                delim = '\\\\';\r\n                            } else\r\n                                importRoot = \".\";\r\n                        }\r\n                    } else\r\n                        importRoot = null;\r\n\r\n                    for (var i=0; i<json['imports'].length; i++) {\r\n                        if (typeof json['imports'][i] === 'string') { // Import file\r\n                            if (!importRoot)\r\n                                throw Error(\"Cannot determine import root: File name is unknown\");\r\n                            var importFilename = json['imports'][i];\r\n                            if (/^google\\/protobuf\\//.test(importFilename))\r\n                                continue; // Not needed and therefore not used\r\n                            importFilename = importRoot+delim+importFilename;\r\n                            if (this.files[importFilename] === true)\r\n                                continue; // Already imported\r\n                            if (/\\.proto$/i.test(importFilename) && !ProtoBuf.DotProto)     // If this is a NOPARSE build\r\n                                importFilename = importFilename.replace(/\\.proto$/, \".json\"); // always load the JSON file\r\n                            var contents = ProtoBuf.Util.fetch(importFilename);\r\n                            if (contents === null)\r\n                                throw Error(\"Failed to import '\"+importFilename+\"' in '\"+filename+\"': File not found\");\r\n                            if (/\\.json$/i.test(importFilename)) // Always possible\r\n                                this[\"import\"](JSON.parse(contents+\"\"), importFilename); // May throw\r\n                            else\r\n                                this[\"import\"]((new ProtoBuf.DotProto.Parser(contents+\"\")).parse(), importFilename); // May throw\r\n                        } else // Import structure\r\n                            if (!filename)\r\n                                this[\"import\"](json['imports'][i]);\r\n                            else if (/\\.(\\w+)$/.test(filename)) // With extension: Append _importN to the name portion to make it unique\r\n                                this[\"import\"](json['imports'][i], filename.replace(/^(.+)\\.(\\w+)$/, function($0, $1, $2) { return $1+\"_import\"+i+\".\"+$2; }));\r\n                            else // Without extension: Append _importN to make it unique\r\n                                this[\"import\"](json['imports'][i], filename+\"_import\"+i);\r\n                    }\r\n                    if (resetRoot) // Reset import root override when all imports are done\r\n                        this.importRoot = null;\r\n                }\r\n                if (json['messages']) {\r\n                    if (json['package'])\r\n                        this.define(json['package'], json[\"options\"]);\r\n                    this.create(json['messages']);\r\n                    this.reset();\r\n                }\r\n                if (json['enums']) {\r\n                    if (json['package'])\r\n                        this.define(json['package'], json[\"options\"]);\r\n                    this.create(json['enums']);\r\n                    this.reset();\r\n                }\r\n                if (json['services']) {\r\n                    if (json['package'])\r\n                        this.define(json['package'], json[\"options\"]);\r\n                    this.create(json['services']);\r\n                    this.reset();\r\n                }\r\n                if (json['extends']) {\r\n                    if (json['package'])\r\n                        this.define(json['package'], json[\"options\"]);\r\n                    this.create(json['extends']);\r\n                    this.reset();\r\n                }\r\n                return this;\r\n            };\r\n\r\n            /**\r\n             * Tests if a definition is a valid service definition.\r\n             * @param {Object} def Definition\r\n             * @return {boolean} true if valid, else false\r\n             * @expose\r\n             */\r\n            Builder.isValidService = function(def) {\r\n                // Services require a string name and an rpc object\r\n                return !(typeof def[\"name\"] !== 'string' || !Lang.NAME.test(def[\"name\"]) || typeof def[\"rpc\"] !== 'object');\r\n            };\r\n\r\n            /**\r\n             * Tests if a definition is a valid extension.\r\n             * @param {Object} def Definition\r\n             * @returns {boolean} true if valid, else false\r\n             * @expose\r\n            */\r\n            Builder.isValidExtend = function(def) {\r\n                if (typeof def[\"ref\"] !== 'string' || !Lang.TYPEREF.test(def[\"ref\"]))\r\n                    return false;\r\n                var i;\r\n                if (typeof def[\"fields\"] !== 'undefined') {\r\n                    if (!ProtoBuf.Util.isArray(def[\"fields\"]))\r\n                        return false;\r\n                    var ids = [], id; // IDs must be unique (does not yet test for the extended message's ids)\r\n                    for (i=0; i<def[\"fields\"].length; i++) {\r\n                        if (!Builder.isValidMessageField(def[\"fields\"][i]))\r\n                            return false;\r\n                        id = parseInt(def[\"id\"], 10);\r\n                        if (ids.indexOf(id) >= 0)\r\n                            return false;\r\n                        ids.push(id);\r\n                    }\r\n                    ids = null;\r\n                }\r\n                return true;\r\n            };\r\n\r\n            /**\r\n             * Resolves all namespace objects.\r\n             * @throws {Error} If a type cannot be resolved\r\n             * @expose\r\n             */\r\n            BuilderPrototype.resolveAll = function() {\r\n                // Resolve all reflected objects\r\n                var res;\r\n                if (this.ptr == null || typeof this.ptr.type === 'object')\r\n                    return; // Done (already resolved)\r\n                if (this.ptr instanceof Reflect.Namespace) {\r\n                    // Build all children\r\n                    var children = this.ptr.children;\r\n                    for (var i= 0, k=children.length; i<k; ++i)\r\n                        this.ptr = children[i],\r\n                        this.resolveAll();\r\n                } else if (this.ptr instanceof Reflect.Message.Field) {\r\n                    if (!Lang.TYPE.test(this.ptr.type)) { // Resolve type...\r\n                        if (!Lang.TYPEREF.test(this.ptr.type))\r\n                            throw Error(\"Illegal type reference in \"+this.ptr.toString(true)+\": \"+this.ptr.type);\r\n                        res = (this.ptr instanceof Reflect.Message.ExtensionField ? this.ptr.extension.parent : this.ptr.parent).resolve(this.ptr.type, true);\r\n                        if (!res)\r\n                            throw Error(\"Unresolvable type reference in \"+this.ptr.toString(true)+\": \"+this.ptr.type);\r\n                        this.ptr.resolvedType = res;\r\n                        if (res instanceof Reflect.Enum)\r\n                            this.ptr.type = ProtoBuf.TYPES[\"enum\"];\r\n                        else if (res instanceof Reflect.Message)\r\n                            this.ptr.type = res.isGroup ? ProtoBuf.TYPES[\"group\"] : ProtoBuf.TYPES[\"message\"];\r\n                        else\r\n                            throw Error(\"Illegal type reference in \"+this.ptr.toString(true)+\": \"+this.ptr.type);\r\n                    } else\r\n                        this.ptr.type = ProtoBuf.TYPES[this.ptr.type];\r\n                } else if (this.ptr instanceof ProtoBuf.Reflect.Enum.Value) {\r\n                    // No need to build enum values (built in enum)\r\n                } else if (this.ptr instanceof ProtoBuf.Reflect.Service.Method) {\r\n                    if (this.ptr instanceof ProtoBuf.Reflect.Service.RPCMethod) {\r\n                        res = this.ptr.parent.resolve(this.ptr.requestName);\r\n                        if (!res || !(res instanceof ProtoBuf.Reflect.Message))\r\n                            throw Error(\"Illegal type reference in \"+this.ptr.toString(true)+\": \"+this.ptr.requestName);\r\n                        this.ptr.resolvedRequestType = res;\r\n                        res = this.ptr.parent.resolve(this.ptr.responseName);\r\n                        if (!res || !(res instanceof ProtoBuf.Reflect.Message))\r\n                            throw Error(\"Illegal type reference in \"+this.ptr.toString(true)+\": \"+this.ptr.responseName);\r\n                        this.ptr.resolvedResponseType = res;\r\n                    } else {\r\n                        // Should not happen as nothing else is implemented\r\n                        throw Error(\"Illegal service type in \"+this.ptr.toString(true));\r\n                    }\r\n                } else if (!(this.ptr instanceof ProtoBuf.Reflect.Message.OneOf) && !(this.ptr instanceof ProtoBuf.Reflect.Extension))\r\n                    throw Error(\"Illegal object in namespace: \"+typeof(this.ptr)+\":\"+this.ptr);\r\n                this.reset();\r\n            };\r\n\r\n            /**\r\n             * Builds the protocol. This will first try to resolve all definitions and, if this has been successful,\r\n             * return the built package.\r\n             * @param {string=} path Specifies what to return. If omitted, the entire namespace will be returned.\r\n             * @return {ProtoBuf.Builder.Message|Object.<string,*>}\r\n             * @throws {Error} If a type could not be resolved\r\n             * @expose\r\n             */\r\n            BuilderPrototype.build = function(path) {\r\n                this.reset();\r\n                if (!this.resolved)\r\n                    this.resolveAll(),\r\n                    this.resolved = true,\r\n                    this.result = null; // Require re-build\r\n                if (this.result == null) // (Re-)Build\r\n                    this.result = this.ns.build();\r\n                if (!path)\r\n                    return this.result;\r\n                else {\r\n                    var part = path.split(\".\");\r\n                    var ptr = this.result; // Build namespace pointer (no hasChild etc.)\r\n                    for (var i=0; i<part.length; i++)\r\n                        if (ptr[part[i]])\r\n                            ptr = ptr[part[i]];\r\n                        else {\r\n                            ptr = null;\r\n                            break;\r\n                        }\r\n                    return ptr;\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Similar to {@link ProtoBuf.Builder#build}, but looks up the internal reflection descriptor.\r\n             * @param {string=} path Specifies what to return. If omitted, the entire namespace wiil be returned.\r\n             * @return {ProtoBuf.Reflect.T} Reflection descriptor or `null` if not found\r\n             */\r\n            BuilderPrototype.lookup = function(path) {\r\n                return path ? this.ns.resolve(path) : this.ns;\r\n            };\r\n\r\n            /**\r\n             * Returns a string representation of this object.\r\n             * @return {string} String representation as of \"Builder\"\r\n             * @expose\r\n             */\r\n            BuilderPrototype.toString = function() {\r\n                return \"Builder\";\r\n            };\r\n\r\n            // Pseudo types documented in Reflect.js.\r\n            // Exist for the sole purpose of being able to \"... instanceof ProtoBuf.Builder.Message\" etc.\r\n            Builder.Message = function() {};\r\n            Builder.Service = function() {};\r\n\r\n            return Builder;\r\n\r\n        })(ProtoBuf, ProtoBuf.Lang, ProtoBuf.Reflect);\r\n\r\n\r\n        /**\r\n         * Constructs a new empty Builder.\r\n         * @param {Object.<string,*>=} options Builder options, defaults to global options set on ProtoBuf\r\n         * @return {!ProtoBuf.Builder} Builder\r\n         * @expose\r\n         */\r\n        ProtoBuf.newBuilder = function(options) {\r\n            options = options || {};\r\n            if (typeof options['convertFieldsToCamelCase'] === 'undefined')\r\n                options['convertFieldsToCamelCase'] = ProtoBuf.convertFieldsToCamelCase;\r\n            if (typeof options['populateAccessors'] === 'undefined')\r\n                options['populateAccessors'] = ProtoBuf.populateAccessors;\r\n            return new ProtoBuf.Builder(options);\r\n        };\r\n\r\n        /**\r\n         * Loads a .json definition and returns the Builder.\r\n         * @param {!*|string} json JSON definition\r\n         * @param {(ProtoBuf.Builder|string|{root: string, file: string})=} builder Builder to append to. Will create a new one if omitted.\r\n         * @param {(string|{root: string, file: string})=} filename The corresponding file name if known. Must be specified for imports.\r\n         * @return {ProtoBuf.Builder} Builder to create new messages\r\n         * @throws {Error} If the definition cannot be parsed or built\r\n         * @expose\r\n         */\r\n        ProtoBuf.loadJson = function(json, builder, filename) {\r\n            if (typeof builder === 'string' || (builder && typeof builder[\"file\"] === 'string' && typeof builder[\"root\"] === 'string'))\r\n                filename = builder,\r\n                builder = null;\r\n            if (!builder || typeof builder !== 'object')\r\n                builder = ProtoBuf.newBuilder();\r\n            if (typeof json === 'string')\r\n                json = JSON.parse(json);\r\n            builder[\"import\"](json, filename);\r\n            builder.resolveAll();\r\n            return builder;\r\n        };\r\n\r\n        /**\r\n         * Loads a .json file and returns the Builder.\r\n         * @param {string|!{root: string, file: string}} filename Path to json file or an object specifying 'file' with\r\n         *  an overridden 'root' path for all imported files.\r\n         * @param {function(?Error, !ProtoBuf.Builder=)=} callback Callback that will receive `null` as the first and\r\n         *  the Builder as its second argument on success, otherwise the error as its first argument. If omitted, the\r\n         *  file will be read synchronously and this function will return the Builder.\r\n         * @param {ProtoBuf.Builder=} builder Builder to append to. Will create a new one if omitted.\r\n         * @return {?ProtoBuf.Builder|undefined} The Builder if synchronous (no callback specified, will be NULL if the\r\n         *   request has failed), else undefined\r\n         * @expose\r\n         */\r\n        ProtoBuf.loadJsonFile = function(filename, callback, builder) {\r\n            if (callback && typeof callback === 'object')\r\n                builder = callback,\r\n                callback = null;\r\n            else if (!callback || typeof callback !== 'function')\r\n                callback = null;\r\n            if (callback)\r\n                return ProtoBuf.Util.fetch(typeof filename === 'string' ? filename : filename[\"root\"]+\"/\"+filename[\"file\"], function(contents) {\r\n                    if (contents === null) {\r\n                        callback(Error(\"Failed to fetch file\"));\r\n                        return;\r\n                    }\r\n                    try {\r\n                        callback(null, ProtoBuf.loadJson(JSON.parse(contents), builder, filename));\r\n                    } catch (e) {\r\n                        callback(e);\r\n                    }\r\n                });\r\n            var contents = ProtoBuf.Util.fetch(typeof filename === 'object' ? filename[\"root\"]+\"/\"+filename[\"file\"] : filename);\r\n            return contents === null ? null : ProtoBuf.loadJson(JSON.parse(contents), builder, filename);\r\n        };\r\n\r\n        return ProtoBuf;\r\n    }\r\n\r\n    /* CommonJS */ if (typeof require === 'function' && typeof module === 'object' && module && typeof exports === 'object' && exports)\r\n        module['exports'] = init(require(\"bytebuffer\"));\r\n    /* AMD */ else if (typeof define === 'function' && define[\"amd\"])\r\n        define([\"ByteBuffer\"], init);\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"ProtoBuf\"] = init(global[\"dcodeIO\"][\"ByteBuffer\"]);\r\n\r\n})(this);\r\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var setImmediate;\n\n    function addFromSetImmediateArguments(args) {\n        tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);\n        return nextHandle++;\n    }\n\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    function partiallyApplied(handler) {\n        var args = [].slice.call(arguments, 1);\n        return function() {\n            if (typeof handler === \"function\") {\n                handler.apply(undefined, args);\n            } else {\n                (new Function(\"\" + handler))();\n            }\n        };\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(partiallyApplied(runIfPresent, handle), 0);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    task();\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function installNextTickImplementation() {\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            process.nextTick(partiallyApplied(runIfPresent, handle));\n            return handle;\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            global.postMessage(messagePrefix + handle, \"*\");\n            return handle;\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        setImmediate = function() {\n            var handle = addFromSetImmediateArguments(arguments);\n            setTimeout(partiallyApplied(runIfPresent, handle), 0);\n            return handle;\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(new Function(\"return this\")()));\n","/*\r\n Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license ByteBuffer.js (c) 2013-2014 Daniel Wirtz <dcode@dcode.io>\r\n * This version of ByteBuffer.js uses an ArrayBuffer (AB) as its backing buffer and is compatible with modern browsers.\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/ByteBuffer.js for details\r\n */ //\r\n(function(global) {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * @param {function(new: Long, number, number, boolean=)=} Long\r\n     * @returns {function(new: ByteBuffer, number=, boolean=, boolean=)}}\r\n     * @inner\r\n     */\r\n    function loadByteBuffer(Long) {\r\n\r\n        /**\r\n         * Constructs a new ByteBuffer.\r\n         * @class The swiss army knife for binary data in JavaScript.\r\n         * @exports ByteBuffer\r\n         * @constructor\r\n         * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.\r\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n         * @expose\r\n         */\r\n        var ByteBuffer = function(capacity, littleEndian, noAssert) {\r\n            if (typeof capacity     === 'undefined') capacity     = ByteBuffer.DEFAULT_CAPACITY;\r\n            if (typeof littleEndian === 'undefined') littleEndian = ByteBuffer.DEFAULT_ENDIAN;\r\n            if (typeof noAssert     === 'undefined') noAssert     = ByteBuffer.DEFAULT_NOASSERT;\r\n            if (!noAssert) {\r\n                capacity = capacity | 0;\r\n                if (capacity < 0)\r\n                    throw RangeError(\"Illegal capacity\");\r\n                littleEndian = !!littleEndian;\r\n                noAssert = !!noAssert;\r\n            }\r\n\r\n            /**\r\n             * Backing buffer.\r\n             * @type {!ArrayBuffer}\r\n             * @expose\r\n             */\r\n            this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);\r\n\r\n            /**\r\n             * Data view to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.\r\n             * @type {?DataView}\r\n             * @expose\r\n             */\r\n            this.view = capacity === 0 ? null : new DataView(this.buffer);\r\n\r\n            /**\r\n             * Absolute read/write offset.\r\n             * @type {number}\r\n             * @expose\r\n             * @see ByteBuffer#flip\r\n             * @see ByteBuffer#clear\r\n             */\r\n            this.offset = 0;\r\n\r\n            /**\r\n             * Marked offset.\r\n             * @type {number}\r\n             * @expose\r\n             * @see ByteBuffer#mark\r\n             * @see ByteBuffer#reset\r\n             */\r\n            this.markedOffset = -1;\r\n\r\n            /**\r\n             * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.\r\n             * @type {number}\r\n             * @expose\r\n             * @see ByteBuffer#flip\r\n             * @see ByteBuffer#clear\r\n             */\r\n            this.limit = capacity;\r\n\r\n            /**\r\n             * Whether to use little endian byte order, defaults to `false` for big endian.\r\n             * @type {boolean}\r\n             * @expose\r\n             */\r\n            this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : false;\r\n\r\n            /**\r\n             * Whether to skip assertions of offsets and values, defaults to `false`.\r\n             * @type {boolean}\r\n             * @expose\r\n             */\r\n            this.noAssert = !!noAssert;\r\n        };\r\n\r\n        /**\r\n         * ByteBuffer version.\r\n         * @type {string}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ByteBuffer.VERSION = \"3.5.4\";\r\n\r\n        /**\r\n         * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.\r\n         * @type {boolean}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ByteBuffer.LITTLE_ENDIAN = true;\r\n\r\n        /**\r\n         * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.\r\n         * @type {boolean}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ByteBuffer.BIG_ENDIAN = false;\r\n\r\n        /**\r\n         * Default initial capacity of `16`.\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        ByteBuffer.DEFAULT_CAPACITY = 16;\r\n\r\n        /**\r\n         * Default endianess of `false` for big endian.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;\r\n\r\n        /**\r\n         * Default no assertions flag of `false`.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        ByteBuffer.DEFAULT_NOASSERT = false;\r\n\r\n        /**\r\n         * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded\r\n         *  and int64 support is not available.\r\n         * @type {?Long}\r\n         * @const\r\n         * @see https://github.com/dcodeIO/Long.js\r\n         * @expose\r\n         */\r\n        ByteBuffer.Long = Long || null;\r\n\r\n        /**\r\n         * @alias ByteBuffer.prototype\r\n         * @inner\r\n         */\r\n        var ByteBufferPrototype = ByteBuffer.prototype;\r\n\r\n        // helpers\r\n\r\n        /**\r\n         * @type {!ArrayBuffer}\r\n         * @inner\r\n         */\r\n        var EMPTY_BUFFER = new ArrayBuffer(0);\r\n\r\n        /**\r\n         * String.fromCharCode reference for compile-time renaming.\r\n         * @type {function(...number):string}\r\n         * @inner\r\n         */\r\n        var stringFromCharCode = String.fromCharCode;\r\n\r\n        /**\r\n         * Creates a source function for a string.\r\n         * @param {string} s String to read from\r\n         * @returns {function():number|null} Source function returning the next char code respectively `null` if there are\r\n         *  no more characters left.\r\n         * @throws {TypeError} If the argument is invalid\r\n         * @inner\r\n         */\r\n        function stringSource(s) {\r\n            var i=0; return function() {\r\n                return i < s.length ? s.charCodeAt(i++) : null;\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Creates a destination function for a string.\r\n         * @returns {function(number=):undefined|string} Destination function successively called with the next char code.\r\n         *  Returns the final string when called without arguments.\r\n         * @inner\r\n         */\r\n        function stringDestination() {\r\n            var cs = [], ps = []; return function() {\r\n                if (arguments.length === 0)\r\n                    return ps.join('')+stringFromCharCode.apply(String, cs);\r\n                if (cs.length + arguments.length > 1024)\r\n                    ps.push(stringFromCharCode.apply(String, cs)),\r\n                        cs.length = 0;\r\n                Array.prototype.push.apply(cs, arguments);\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Allocates a new ByteBuffer backed by a buffer of the specified capacity.\r\n         * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.\r\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n         * @returns {!ByteBuffer}\r\n         * @expose\r\n         */\r\n        ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {\r\n            return new ByteBuffer(capacity, littleEndian, noAssert);\r\n        };\r\n\r\n        /**\r\n         * Concatenates multiple ByteBuffers into one.\r\n         * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate\r\n         * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string (\"base64\", \"hex\", \"binary\",\r\n         *  defaults to \"utf8\")\r\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults\r\n         *  to {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n         * @returns {!ByteBuffer} Concatenated ByteBuffer\r\n         * @expose\r\n         */\r\n        ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {\r\n            if (typeof encoding === 'boolean' || typeof encoding !== 'string') {\r\n                noAssert = littleEndian;\r\n                littleEndian = encoding;\r\n                encoding = undefined;\r\n            }\r\n            var capacity = 0;\r\n            for (var i=0, k=buffers.length, length; i<k; ++i) {\r\n                if (!ByteBuffer.isByteBuffer(buffers[i]))\r\n                    buffers[i] = ByteBuffer.wrap(buffers[i], encoding);\r\n                length = buffers[i].limit - buffers[i].offset;\r\n                if (length > 0) capacity += length;\r\n            }\r\n            if (capacity === 0)\r\n                return new ByteBuffer(0, littleEndian, noAssert);\r\n            var bb = new ByteBuffer(capacity, littleEndian, noAssert),\r\n                bi;\r\n            var view = new Uint8Array(bb.buffer);\r\n            i=0; while (i<k) {\r\n                bi = buffers[i++];\r\n                length = bi.limit - bi.offset;\r\n                if (length <= 0) continue;\r\n                view.set(new Uint8Array(bi.buffer).subarray(bi.offset, bi.limit), bb.offset);\r\n                bb.offset += length;\r\n            }\r\n            bb.limit = bb.offset;\r\n            bb.offset = 0;\r\n            return bb;\r\n        };\r\n\r\n        /**\r\n         * Tests if the specified type is a ByteBuffer.\r\n         * @param {*} bb ByteBuffer to test\r\n         * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`\r\n         * @expose\r\n         */\r\n        ByteBuffer.isByteBuffer = function(bb) {\r\n            return (bb && bb instanceof ByteBuffer) === true;\r\n        };\r\n        /**\r\n         * Gets the backing buffer type.\r\n         * @returns {Function} `Buffer` for NB builds, `ArrayBuffer` for AB builds (classes)\r\n         * @expose\r\n         */\r\n        ByteBuffer.type = function() {\r\n            return ArrayBuffer;\r\n        };\r\n\r\n        /**\r\n         * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its\r\n         *  {@link ByteBuffer#limit} to the length of the wrapped data.\r\n         * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped\r\n         * @param {(string|boolean)=} encoding String encoding if `buffer` is a string (\"base64\", \"hex\", \"binary\", defaults to\r\n         *  \"utf8\")\r\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n         * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`\r\n         * @expose\r\n         */\r\n        ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {\r\n            if (typeof encoding !== 'string') {\r\n                noAssert = littleEndian;\r\n                littleEndian = encoding;\r\n                encoding = undefined;\r\n            }\r\n            if (typeof buffer === 'string') {\r\n                if (typeof encoding === 'undefined')\r\n                    encoding = \"utf8\";\r\n                switch (encoding) {\r\n                    case \"base64\":\r\n                        return ByteBuffer.fromBase64(buffer, littleEndian);\r\n                    case \"hex\":\r\n                        return ByteBuffer.fromHex(buffer, littleEndian);\r\n                    case \"binary\":\r\n                        return ByteBuffer.fromBinary(buffer, littleEndian);\r\n                    case \"utf8\":\r\n                        return ByteBuffer.fromUTF8(buffer, littleEndian);\r\n                    case \"debug\":\r\n                        return ByteBuffer.fromDebug(buffer, littleEndian);\r\n                    default:\r\n                        throw Error(\"Unsupported encoding: \"+encoding);\r\n                }\r\n            }\r\n            if (buffer === null || typeof buffer !== 'object')\r\n                throw TypeError(\"Illegal buffer\");\r\n            var bb;\r\n            if (ByteBuffer.isByteBuffer(buffer)) {\r\n                bb = ByteBufferPrototype.clone.call(buffer);\r\n                bb.markedOffset = -1;\r\n                return bb;\r\n            }\r\n            if (buffer instanceof Uint8Array) { // Extract ArrayBuffer from Uint8Array\r\n                bb = new ByteBuffer(0, littleEndian, noAssert);\r\n                if (buffer.length > 0) { // Avoid references to more than one EMPTY_BUFFER\r\n                    bb.buffer = buffer.buffer;\r\n                    bb.offset = buffer.byteOffset;\r\n                    bb.limit = buffer.byteOffset + buffer.length;\r\n                    bb.view = buffer.length > 0 ? new DataView(buffer.buffer) : null;\r\n                }\r\n            } else if (buffer instanceof ArrayBuffer) { // Reuse ArrayBuffer\r\n                bb = new ByteBuffer(0, littleEndian, noAssert);\r\n                if (buffer.byteLength > 0) {\r\n                    bb.buffer = buffer;\r\n                    bb.offset = 0;\r\n                    bb.limit = buffer.byteLength;\r\n                    bb.view = buffer.byteLength > 0 ? new DataView(buffer) : null;\r\n                }\r\n            } else if (Object.prototype.toString.call(buffer) === \"[object Array]\") { // Create from octets\r\n                bb = new ByteBuffer(buffer.length, littleEndian, noAssert);\r\n                bb.limit = buffer.length;\r\n                for (i=0; i<buffer.length; ++i)\r\n                    bb.view.setUint8(i, buffer[i]);\r\n            } else\r\n                throw TypeError(\"Illegal buffer\"); // Otherwise fail\r\n            return bb;\r\n        };\r\n\r\n        // types/ints/int8\r\n\r\n        /**\r\n         * Writes an 8bit signed integer.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeInt8 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            offset += 1;\n            var capacity0 = this.buffer.byteLength;\n            if (offset > capacity0)\n                this.resize((capacity0 *= 2) > offset ? capacity0 : offset);\n            offset -= 1;\n            this.view.setInt8(offset, value);\r\n            if (relative) this.offset += 1;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.\r\n         * @function\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;\r\n\r\n        /**\r\n         * Reads an 8bit signed integer.\r\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n         * @returns {number} Value read\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readInt8 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\r\n            var value = this.view.getInt8(offset);\r\n            if (relative) this.offset += 1;\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.\r\n         * @function\r\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n         * @returns {number} Value read\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;\r\n\r\n        /**\r\n         * Writes an 8bit unsigned integer.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeUint8 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value >>>= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            offset += 1;\n            var capacity1 = this.buffer.byteLength;\n            if (offset > capacity1)\n                this.resize((capacity1 *= 2) > offset ? capacity1 : offset);\n            offset -= 1;\n            this.view.setUint8(offset, value);\r\n            if (relative) this.offset += 1;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Reads an 8bit unsigned integer.\r\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n         * @returns {number} Value read\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readUint8 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\r\n            var value = this.view.getUint8(offset);\r\n            if (relative) this.offset += 1;\n            return value;\r\n        };\r\n\r\n        // types/ints/int16\r\n\r\n        /**\r\n         * Writes a 16bit signed integer.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n         * @throws {TypeError} If `offset` or `value` is not a valid number\r\n         * @throws {RangeError} If `offset` is out of bounds\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeInt16 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            offset += 2;\n            var capacity2 = this.buffer.byteLength;\n            if (offset > capacity2)\n                this.resize((capacity2 *= 2) > offset ? capacity2 : offset);\n            offset -= 2;\n            this.view.setInt16(offset, value, this.littleEndian);\r\n            if (relative) this.offset += 2;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.\r\n         * @function\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n         * @throws {TypeError} If `offset` or `value` is not a valid number\r\n         * @throws {RangeError} If `offset` is out of bounds\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;\r\n\r\n        /**\r\n         * Reads a 16bit signed integer.\r\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n         * @returns {number} Value read\r\n         * @throws {TypeError} If `offset` is not a valid number\r\n         * @throws {RangeError} If `offset` is out of bounds\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readInt16 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 2 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+2+\") <= \"+this.buffer.byteLength);\n            }\r\n            var value = this.view.getInt16(offset, this.littleEndian);\r\n            if (relative) this.offset += 2;\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.\r\n         * @function\r\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n         * @returns {number} Value read\r\n         * @throws {TypeError} If `offset` is not a valid number\r\n         * @throws {RangeError} If `offset` is out of bounds\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;\r\n\r\n        /**\r\n         * Writes a 16bit unsigned integer.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n         * @throws {TypeError} If `offset` or `value` is not a valid number\r\n         * @throws {RangeError} If `offset` is out of bounds\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeUint16 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value >>>= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            offset += 2;\n            var capacity3 = this.buffer.byteLength;\n            if (offset > capacity3)\n                this.resize((capacity3 *= 2) > offset ? capacity3 : offset);\n            offset -= 2;\n            this.view.setUint16(offset, value, this.littleEndian);\r\n            if (relative) this.offset += 2;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Reads a 16bit unsigned integer.\r\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n         * @returns {number} Value read\r\n         * @throws {TypeError} If `offset` is not a valid number\r\n         * @throws {RangeError} If `offset` is out of bounds\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readUint16 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 2 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+2+\") <= \"+this.buffer.byteLength);\n            }\r\n            var value = this.view.getUint16(offset, this.littleEndian);\r\n            if (relative) this.offset += 2;\n            return value;\r\n        };\r\n\r\n        // types/ints/int32\r\n\r\n        /**\r\n         * Writes a 32bit signed integer.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeInt32 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            offset += 4;\n            var capacity4 = this.buffer.byteLength;\n            if (offset > capacity4)\n                this.resize((capacity4 *= 2) > offset ? capacity4 : offset);\n            offset -= 4;\n            this.view.setInt32(offset, value, this.littleEndian);\r\n            if (relative) this.offset += 4;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;\r\n\r\n        /**\r\n         * Reads a 32bit signed integer.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @returns {number} Value read\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readInt32 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n            }\r\n            var value = this.view.getInt32(offset, this.littleEndian);\r\n            if (relative) this.offset += 4;\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.\r\n         * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @returns {number} Value read\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;\r\n\r\n        /**\r\n         * Writes a 32bit unsigned integer.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeUint32 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value >>>= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            offset += 4;\n            var capacity5 = this.buffer.byteLength;\n            if (offset > capacity5)\n                this.resize((capacity5 *= 2) > offset ? capacity5 : offset);\n            offset -= 4;\n            this.view.setUint32(offset, value, this.littleEndian);\r\n            if (relative) this.offset += 4;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Reads a 32bit unsigned integer.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @returns {number} Value read\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readUint32 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n            }\r\n            var value = this.view.getUint32(offset, this.littleEndian);\r\n            if (relative) this.offset += 4;\n            return value;\r\n        };\r\n\r\n        // types/ints/int64\r\n\r\n        if (Long) {\r\n\r\n            /**\r\n             * Writes a 64bit signed integer.\r\n             * @param {number|!Long} value Value to write\r\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n             * @returns {!ByteBuffer} this\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.writeInt64 = function(value, offset) {\r\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\r\n                    if (typeof value === 'number')\n                        value = Long.fromNumber(value);\n                    else if (!(value && value instanceof Long))\n                        throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n                }\r\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value);\n                offset += 8;\n                var capacity6 = this.buffer.byteLength;\n                if (offset > capacity6)\n                    this.resize((capacity6 *= 2) > offset ? capacity6 : offset);\n                offset -= 8;\n                if (this.littleEndian) {\r\n                    this.view.setInt32(offset  , value.low , true);\r\n                    this.view.setInt32(offset+4, value.high, true);\r\n                } else {\r\n                    this.view.setInt32(offset  , value.high, false);\r\n                    this.view.setInt32(offset+4, value.low , false);\r\n                }\r\n                if (relative) this.offset += 8;\n                return this;\r\n            };\r\n\r\n            /**\r\n             * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.\r\n             * @param {number|!Long} value Value to write\r\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n             * @returns {!ByteBuffer} this\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;\r\n\r\n            /**\r\n             * Reads a 64bit signed integer.\r\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n             * @returns {!Long}\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.readInt64 = function(offset) {\r\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\r\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 8 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);\n                }\r\n                var value = this.littleEndian\r\n                    ? new Long(this.view.getInt32(offset  , true ), this.view.getInt32(offset+4, true ), false)\r\n                    : new Long(this.view.getInt32(offset+4, false), this.view.getInt32(offset  , false), false);\r\n                if (relative) this.offset += 8;\n                return value;\r\n            };\r\n\r\n            /**\r\n             * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.\r\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n             * @returns {!Long}\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;\r\n\r\n            /**\r\n             * Writes a 64bit unsigned integer.\r\n             * @param {number|!Long} value Value to write\r\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n             * @returns {!ByteBuffer} this\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.writeUint64 = function(value, offset) {\r\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\r\n                    if (typeof value === 'number')\n                        value = Long.fromNumber(value);\n                    else if (!(value && value instanceof Long))\n                        throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n                }\r\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value);\n                offset += 8;\n                var capacity7 = this.buffer.byteLength;\n                if (offset > capacity7)\n                    this.resize((capacity7 *= 2) > offset ? capacity7 : offset);\n                offset -= 8;\n                if (this.littleEndian) {\r\n                    this.view.setInt32(offset  , value.low , true);\r\n                    this.view.setInt32(offset+4, value.high, true);\r\n                } else {\r\n                    this.view.setInt32(offset  , value.high, false);\r\n                    this.view.setInt32(offset+4, value.low , false);\r\n                }\r\n                if (relative) this.offset += 8;\n                return this;\r\n            };\r\n\r\n            /**\r\n             * Reads a 64bit unsigned integer.\r\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n             * @returns {!Long}\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.readUint64 = function(offset) {\r\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\r\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 8 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);\n                }\r\n                var value = this.littleEndian\r\n                    ? new Long(this.view.getInt32(offset  , true ), this.view.getInt32(offset+4, true ), true)\r\n                    : new Long(this.view.getInt32(offset+4, false), this.view.getInt32(offset  , false), true);\r\n                if (relative) this.offset += 8;\n                return value;\r\n            };\r\n\r\n        } // Long\r\n\r\n\r\n        // types/floats/float32\r\n\r\n        /**\r\n         * Writes a 32bit float.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeFloat32 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number')\r\n                    throw TypeError(\"Illegal value: \"+value+\" (not a number)\");\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            offset += 4;\n            var capacity8 = this.buffer.byteLength;\n            if (offset > capacity8)\n                this.resize((capacity8 *= 2) > offset ? capacity8 : offset);\n            offset -= 4;\n            this.view.setFloat32(offset, value, this.littleEndian);\r\n            if (relative) this.offset += 4;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.\r\n         * @function\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;\r\n\r\n        /**\r\n         * Reads a 32bit float.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @returns {number}\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readFloat32 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n            }\r\n            var value = this.view.getFloat32(offset, this.littleEndian);\r\n            if (relative) this.offset += 4;\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.\r\n         * @function\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n         * @returns {number}\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;\r\n\r\n        // types/floats/float64\r\n\r\n        /**\r\n         * Writes a 64bit float.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeFloat64 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number')\r\n                    throw TypeError(\"Illegal value: \"+value+\" (not a number)\");\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            offset += 8;\n            var capacity9 = this.buffer.byteLength;\n            if (offset > capacity9)\n                this.resize((capacity9 *= 2) > offset ? capacity9 : offset);\n            offset -= 8;\n            this.view.setFloat64(offset, value, this.littleEndian);\r\n            if (relative) this.offset += 8;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.\r\n         * @function\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;\r\n\r\n        /**\r\n         * Reads a 64bit float.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {number}\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readFloat64 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 8 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);\n            }\r\n            var value = this.view.getFloat64(offset, this.littleEndian);\r\n            if (relative) this.offset += 8;\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.\r\n         * @function\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {number}\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;\r\n\r\n\r\n        // types/varints/varint32\r\n\r\n        /**\r\n         * Maximum number of bytes required to store a 32bit base 128 variable-length integer.\r\n         * @type {number}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ByteBuffer.MAX_VARINT32_BYTES = 5;\r\n\r\n        /**\r\n         * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.\r\n         * @param {number} value Value to encode\r\n         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}\r\n         * @expose\r\n         */\r\n        ByteBuffer.calculateVarint32 = function(value) {\r\n            // ref: src/google/protobuf/io/coded_stream.cc\r\n            value = value >>> 0;\r\n                 if (value < 1 << 7 ) return 1;\r\n            else if (value < 1 << 14) return 2;\r\n            else if (value < 1 << 21) return 3;\r\n            else if (value < 1 << 28) return 4;\r\n            else                      return 5;\r\n        };\r\n\r\n        /**\r\n         * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.\r\n         * @param {number} n Signed 32bit integer\r\n         * @returns {number} Unsigned zigzag encoded 32bit integer\r\n         * @expose\r\n         */\r\n        ByteBuffer.zigZagEncode32 = function(n) {\r\n            return (((n |= 0) << 1) ^ (n >> 31)) >>> 0; // ref: src/google/protobuf/wire_format_lite.h\r\n        };\r\n\r\n        /**\r\n         * Decodes a zigzag encoded signed 32bit integer.\r\n         * @param {number} n Unsigned zigzag encoded 32bit integer\r\n         * @returns {number} Signed 32bit integer\r\n         * @expose\r\n         */\r\n        ByteBuffer.zigZagDecode32 = function(n) {\r\n            return ((n >>> 1) ^ -(n & 1)) | 0; // // ref: src/google/protobuf/wire_format_lite.h\r\n        };\r\n\r\n        /**\r\n         * Writes a 32bit base 128 variable-length integer.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  written if omitted.\r\n         * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeVarint32 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            var size = ByteBuffer.calculateVarint32(value),\r\n                b;\r\n            offset += size;\n            var capacity10 = this.buffer.byteLength;\n            if (offset > capacity10)\n                this.resize((capacity10 *= 2) > offset ? capacity10 : offset);\n            offset -= size;\n            // ref: http://code.google.com/searchframe#WTeibokF6gE/trunk/src/google/protobuf/io/coded_stream.cc\r\n            this.view.setUint8(offset, b = value | 0x80);\r\n            value >>>= 0;\r\n            if (value >= 1 << 7) {\r\n                b = (value >> 7) | 0x80;\r\n                this.view.setUint8(offset+1, b);\r\n                if (value >= 1 << 14) {\r\n                    b = (value >> 14) | 0x80;\r\n                    this.view.setUint8(offset+2, b);\r\n                    if (value >= 1 << 21) {\r\n                        b = (value >> 21) | 0x80;\r\n                        this.view.setUint8(offset+3, b);\r\n                        if (value >= 1 << 28) {\r\n                            this.view.setUint8(offset+4, (value >> 28) & 0x0F);\r\n                            size = 5;\r\n                        } else {\r\n                            this.view.setUint8(offset+3, b & 0x7F);\r\n                            size = 4;\r\n                        }\r\n                    } else {\r\n                        this.view.setUint8(offset+2, b & 0x7F);\r\n                        size = 3;\r\n                    }\r\n                } else {\r\n                    this.view.setUint8(offset+1, b & 0x7F);\r\n                    size = 2;\r\n                }\r\n            } else {\r\n                this.view.setUint8(offset, b & 0x7F);\r\n                size = 1;\r\n            }\r\n            if (relative) {\r\n                this.offset += size;\r\n                return this;\r\n            }\r\n            return size;\r\n        };\r\n\r\n        /**\r\n         * Writes a zig-zag encoded 32bit base 128 variable-length integer.\r\n         * @param {number} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  written if omitted.\r\n         * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {\r\n            return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);\r\n        };\r\n\r\n        /**\r\n         * Reads a 32bit base 128 variable-length integer.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  written if omitted.\r\n         * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read\r\n         *  and the actual number of bytes read.\r\n         * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available\r\n         *  to fully decode the varint.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readVarint32 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\r\n            // ref: src/google/protobuf/io/coded_stream.cc\r\n            var size = 0,\r\n                value = 0 >>> 0,\r\n                temp,\r\n                ioffset;\r\n            do {\r\n                ioffset = offset+size;\r\n                if (!this.noAssert && ioffset > this.limit) {\r\n                    var err = Error(\"Truncated\");\r\n                    err['truncated'] = true;\r\n                    throw err;\r\n                }\r\n                temp = this.view.getUint8(ioffset);\r\n                if (size < 5)\r\n                    value |= ((temp&0x7F)<<(7*size)) >>> 0;\r\n                ++size;\r\n            } while ((temp & 0x80) === 0x80);\r\n            value = value | 0; // Make sure to discard the higher order bits\r\n            if (relative) {\r\n                this.offset += size;\r\n                return value;\r\n            }\r\n            return {\r\n                \"value\": value,\r\n                \"length\": size\r\n            };\r\n        };\r\n\r\n        /**\r\n         * Reads a zig-zag encoded 32bit base 128 variable-length integer.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  written if omitted.\r\n         * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read\r\n         *  and the actual number of bytes read.\r\n         * @throws {Error} If it's not a valid varint\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readVarint32ZigZag = function(offset) {\r\n            var val = this.readVarint32(offset);\r\n            if (typeof val === 'object')\r\n                val[\"value\"] = ByteBuffer.zigZagDecode32(val[\"value\"]);\r\n            else\r\n                val = ByteBuffer.zigZagDecode32(val);\r\n            return val;\r\n        };\r\n\r\n        // types/varints/varint64\r\n\r\n        if (Long) {\r\n\r\n            /**\r\n             * Maximum number of bytes required to store a 64bit base 128 variable-length integer.\r\n             * @type {number}\r\n             * @const\r\n             * @expose\r\n             */\r\n            ByteBuffer.MAX_VARINT64_BYTES = 10;\r\n\r\n            /**\r\n             * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.\r\n             * @param {number|!Long} value Value to encode\r\n             * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}\r\n             * @expose\r\n             */\r\n            ByteBuffer.calculateVarint64 = function(value) {\r\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value);\n                // ref: src/google/protobuf/io/coded_stream.cc\r\n                var part0 = value.toInt() >>> 0,\r\n                    part1 = value.shiftRightUnsigned(28).toInt() >>> 0,\r\n                    part2 = value.shiftRightUnsigned(56).toInt() >>> 0;\r\n                if (part2 == 0) {\r\n                    if (part1 == 0) {\r\n                        if (part0 < 1 << 14)\r\n                            return part0 < 1 << 7 ? 1 : 2;\r\n                        else\r\n                            return part0 < 1 << 21 ? 3 : 4;\r\n                    } else {\r\n                        if (part1 < 1 << 14)\r\n                            return part1 < 1 << 7 ? 5 : 6;\r\n                        else\r\n                            return part1 < 1 << 21 ? 7 : 8;\r\n                    }\r\n                } else\r\n                    return part2 < 1 << 7 ? 9 : 10;\r\n            };\r\n\r\n            /**\r\n             * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.\r\n             * @param {number|!Long} value Signed long\r\n             * @returns {!Long} Unsigned zigzag encoded long\r\n             * @expose\r\n             */\r\n            ByteBuffer.zigZagEncode64 = function(value) {\r\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value, false);\n                else if (value.unsigned !== false) value = value.toSigned();\n                // ref: src/google/protobuf/wire_format_lite.h\r\n                return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();\r\n            };\r\n\r\n            /**\r\n             * Decodes a zigzag encoded signed 64bit integer.\r\n             * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number\r\n             * @returns {!Long} Signed long\r\n             * @expose\r\n             */\r\n            ByteBuffer.zigZagDecode64 = function(value) {\r\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value, false);\n                else if (value.unsigned !== false) value = value.toSigned();\n                // ref: src/google/protobuf/wire_format_lite.h\r\n                return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();\r\n            };\r\n\r\n            /**\r\n             * Writes a 64bit base 128 variable-length integer.\r\n             * @param {number|Long} value Value to write\r\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n             *  written if omitted.\r\n             * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.writeVarint64 = function(value, offset) {\r\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\r\n                    if (typeof value === 'number')\n                        value = Long.fromNumber(value);\n                    else if (!(value && value instanceof Long))\n                        throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n                }\r\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value, false);\n                else if (value.unsigned !== false) value = value.toSigned();\n                var size = ByteBuffer.calculateVarint64(value),\r\n                    part0 = value.toInt() >>> 0,\r\n                    part1 = value.shiftRightUnsigned(28).toInt() >>> 0,\r\n                    part2 = value.shiftRightUnsigned(56).toInt() >>> 0;\r\n                offset += size;\n                var capacity11 = this.buffer.byteLength;\n                if (offset > capacity11)\n                    this.resize((capacity11 *= 2) > offset ? capacity11 : offset);\n                offset -= size;\n                switch (size) {\r\n                    case 10: this.view.setUint8(offset+9, (part2 >>>  7) & 0x01);\r\n                    case 9 : this.view.setUint8(offset+8, size !== 9 ? (part2       ) | 0x80 : (part2       ) & 0x7F);\r\n                    case 8 : this.view.setUint8(offset+7, size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F);\r\n                    case 7 : this.view.setUint8(offset+6, size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F);\r\n                    case 6 : this.view.setUint8(offset+5, size !== 6 ? (part1 >>>  7) | 0x80 : (part1 >>>  7) & 0x7F);\r\n                    case 5 : this.view.setUint8(offset+4, size !== 5 ? (part1       ) | 0x80 : (part1       ) & 0x7F);\r\n                    case 4 : this.view.setUint8(offset+3, size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F);\r\n                    case 3 : this.view.setUint8(offset+2, size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F);\r\n                    case 2 : this.view.setUint8(offset+1, size !== 2 ? (part0 >>>  7) | 0x80 : (part0 >>>  7) & 0x7F);\r\n                    case 1 : this.view.setUint8(offset  , size !== 1 ? (part0       ) | 0x80 : (part0       ) & 0x7F);\r\n                }\r\n                if (relative) {\r\n                    this.offset += size;\r\n                    return this;\r\n                } else {\r\n                    return size;\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Writes a zig-zag encoded 64bit base 128 variable-length integer.\r\n             * @param {number|Long} value Value to write\r\n             * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n             *  written if omitted.\r\n             * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {\r\n                return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);\r\n            };\r\n\r\n            /**\r\n             * Reads a 64bit base 128 variable-length integer. Requires Long.js.\r\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n             *  read if omitted.\r\n             * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and\r\n             *  the actual number of bytes read.\r\n             * @throws {Error} If it's not a valid varint\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.readVarint64 = function(offset) {\r\n                var relative = typeof offset === 'undefined';\n                if (relative) offset = this.offset;\n                if (!this.noAssert) {\r\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n                }\r\n                // ref: src/google/protobuf/io/coded_stream.cc\r\n                var start = offset,\r\n                    part0 = 0,\r\n                    part1 = 0,\r\n                    part2 = 0,\r\n                    b  = 0;\r\n                b = this.view.getUint8(offset++); part0  = (b & 0x7F)      ; if (b & 0x80) {\r\n                b = this.view.getUint8(offset++); part0 |= (b & 0x7F) <<  7; if (b & 0x80) {\r\n                b = this.view.getUint8(offset++); part0 |= (b & 0x7F) << 14; if (b & 0x80) {\r\n                b = this.view.getUint8(offset++); part0 |= (b & 0x7F) << 21; if (b & 0x80) {\r\n                b = this.view.getUint8(offset++); part1  = (b & 0x7F)      ; if (b & 0x80) {\r\n                b = this.view.getUint8(offset++); part1 |= (b & 0x7F) <<  7; if (b & 0x80) {\r\n                b = this.view.getUint8(offset++); part1 |= (b & 0x7F) << 14; if (b & 0x80) {\r\n                b = this.view.getUint8(offset++); part1 |= (b & 0x7F) << 21; if (b & 0x80) {\r\n                b = this.view.getUint8(offset++); part2  = (b & 0x7F)      ; if (b & 0x80) {\r\n                b = this.view.getUint8(offset++); part2 |= (b & 0x7F) <<  7; if (b & 0x80) {\r\n                throw Error(\"Buffer overrun\"); }}}}}}}}}}\r\n                var value = Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, false);\r\n                if (relative) {\r\n                    this.offset = offset;\r\n                    return value;\r\n                } else {\r\n                    return {\r\n                        'value': value,\r\n                        'length': offset-start\r\n                    };\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.\r\n             * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n             *  read if omitted.\r\n             * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and\r\n             *  the actual number of bytes read.\r\n             * @throws {Error} If it's not a valid varint\r\n             * @expose\r\n             */\r\n            ByteBufferPrototype.readVarint64ZigZag = function(offset) {\r\n                var val = this.readVarint64(offset);\r\n                if (val && val['value'] instanceof Long)\r\n                    val[\"value\"] = ByteBuffer.zigZagDecode64(val[\"value\"]);\r\n                else\r\n                    val = ByteBuffer.zigZagDecode64(val);\r\n                return val;\r\n            };\r\n\r\n        } // Long\r\n\r\n\r\n        // types/strings/cstring\r\n\r\n        /**\r\n         * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL\r\n         *  characters itself.\r\n         * @param {string} str String to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  contained in `str` + 1 if omitted.\r\n         * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeCString = function(str, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            var i,\r\n                k = str.length;\r\n            if (!this.noAssert) {\r\n                if (typeof str !== 'string')\r\n                    throw TypeError(\"Illegal str: Not a string\");\r\n                for (i=0; i<k; ++i) {\r\n                    if (str.charCodeAt(i) === 0)\r\n                        throw RangeError(\"Illegal str: Contains NULL-characters\");\r\n                }\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            var start = offset;\r\n            // UTF8 strings do not contain zero bytes in between except for the zero character, so:\r\n            k = utfx.calculateUTF16asUTF8(stringSource(str))[1];\r\n            offset += k+1;\n            var capacity12 = this.buffer.byteLength;\n            if (offset > capacity12)\n                this.resize((capacity12 *= 2) > offset ? capacity12 : offset);\n            offset -= k+1;\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n                this.view.setUint8(offset++, b);\r\n            }.bind(this));\r\n            this.view.setUint8(offset++, 0);\r\n            if (relative) {\r\n                this.offset = offset - start;\r\n                return this;\r\n            }\r\n            return k;\r\n        };\r\n\r\n        /**\r\n         * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters\r\n         *  itself.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  read if omitted.\r\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n         *  read and the actual number of bytes read.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readCString = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\r\n            var start = offset,\r\n                temp;\r\n            // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:\r\n            var sd, b = -1;\r\n            utfx.decodeUTF8toUTF16(function() {\r\n                if (b === 0) return null;\r\n                if (offset >= this.limit)\r\n                    throw RangeError(\"Illegal range: Truncated data, \"+offset+\" < \"+this.limit);\r\n                return (b = this.view.getUint8(offset++)) === 0 ? null : b;\r\n            }.bind(this), sd = stringDestination(), true);\r\n            if (relative) {\r\n                this.offset = offset;\r\n                return sd();\r\n            } else {\r\n                return {\r\n                    \"string\": sd(),\r\n                    \"length\": offset - start\r\n                };\r\n            }\r\n        };\r\n\r\n        // types/strings/istring\r\n\r\n        /**\r\n         * Writes a length as uint32 prefixed UTF8 encoded string.\r\n         * @param {string} str String to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  written if omitted.\r\n         * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written\r\n         * @expose\r\n         * @see ByteBuffer#writeVarint32\r\n         */\r\n        ByteBufferPrototype.writeIString = function(str, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof str !== 'string')\r\n                    throw TypeError(\"Illegal str: Not a string\");\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            var start = offset,\r\n                k;\r\n            k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];\r\n            offset += 4+k;\n            var capacity13 = this.buffer.byteLength;\n            if (offset > capacity13)\n                this.resize((capacity13 *= 2) > offset ? capacity13 : offset);\n            offset -= 4+k;\n            this.view.setUint32(offset, k, this.littleEndian);\r\n            offset += 4;\r\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n                this.view.setUint8(offset++, b);\r\n            }.bind(this));\r\n            if (offset !== start + 4 + k)\r\n                throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+(offset+4+k));\r\n            if (relative) {\r\n                this.offset = offset;\r\n                return this;\r\n            }\r\n            return offset - start;\r\n        };\r\n\r\n        /**\r\n         * Reads a length as uint32 prefixed UTF8 encoded string.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  read if omitted.\r\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n         *  read and the actual number of bytes read.\r\n         * @expose\r\n         * @see ByteBuffer#readVarint32\r\n         */\r\n        ByteBufferPrototype.readIString = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n            }\r\n            var temp = 0,\r\n                start = offset,\r\n                str;\r\n            temp = this.view.getUint32(offset, this.littleEndian);\r\n            offset += 4;\r\n            var k = offset + temp,\r\n                sd;\r\n            utfx.decodeUTF8toUTF16(function() {\r\n                return offset < k ? this.view.getUint8(offset++) : null;\r\n            }.bind(this), sd = stringDestination(), this.noAssert);\r\n            str = sd();\r\n            if (relative) {\r\n                this.offset = offset;\r\n                return str;\r\n            } else {\r\n                return {\r\n                    'string': str,\r\n                    'length': offset - start\r\n                };\r\n            }\r\n        };\r\n\r\n        // types/strings/utf8string\r\n\r\n        /**\r\n         * Metrics representing number of UTF8 characters. Evaluates to `c`.\r\n         * @type {string}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ByteBuffer.METRICS_CHARS = 'c';\r\n\r\n        /**\r\n         * Metrics representing number of bytes. Evaluates to `b`.\r\n         * @type {string}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ByteBuffer.METRICS_BYTES = 'b';\r\n\r\n        /**\r\n         * Writes an UTF8 encoded string.\r\n         * @param {string} str String to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.\r\n         * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeUTF8String = function(str, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            var k;\r\n            var start = offset;\r\n            k = utfx.calculateUTF16asUTF8(stringSource(str))[1];\r\n            offset += k;\n            var capacity14 = this.buffer.byteLength;\n            if (offset > capacity14)\n                this.resize((capacity14 *= 2) > offset ? capacity14 : offset);\n            offset -= k;\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n                this.view.setUint8(offset++, b);\r\n            }.bind(this));\r\n            if (relative) {\r\n                this.offset = offset;\r\n                return this;\r\n            }\r\n            return offset - start;\r\n        };\r\n\r\n        /**\r\n         * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.\r\n         * @function\r\n         * @param {string} str String to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.\r\n         * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;\r\n\r\n        /**\r\n         * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's\r\n         *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.\r\n         * @function\r\n         * @param {string} str String to calculate\r\n         * @returns {number} Number of UTF8 characters\r\n         * @expose\r\n         */\r\n        ByteBuffer.calculateUTF8Chars = function(str) {\r\n            return utfx.calculateUTF16asUTF8(stringSource(str))[0];\r\n        };\r\n\r\n        /**\r\n         * Calculates the number of UTF8 bytes of a string.\r\n         * @function\r\n         * @param {string} str String to calculate\r\n         * @returns {number} Number of UTF8 bytes\r\n         * @expose\r\n         */\r\n        ByteBuffer.calculateUTF8Bytes = function(str) {\r\n            return utfx.calculateUTF16asUTF8(stringSource(str))[1];\r\n        };\r\n\r\n        /**\r\n         * Reads an UTF8 encoded string.\r\n         * @param {number} length Number of characters or bytes to read.\r\n         * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to\r\n         *  {@link ByteBuffer.METRICS_CHARS}.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  read if omitted.\r\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n         *  read and the actual number of bytes read.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {\r\n            if (typeof metrics === 'number') {\r\n                offset = metrics;\r\n                metrics = undefined;\r\n            }\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;\r\n            if (!this.noAssert) {\r\n                if (typeof length !== 'number' || length % 1 !== 0)\n                    throw TypeError(\"Illegal length: \"+length+\" (not an integer)\");\n                length |= 0;\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            var i = 0,\r\n                start = offset,\r\n                sd;\r\n            if (metrics === ByteBuffer.METRICS_CHARS) { // The same for node and the browser\r\n                sd = stringDestination();\r\n                utfx.decodeUTF8(function() {\r\n                    return i < length && offset < this.limit ? this.view.getUint8(offset++) : null;\r\n                }.bind(this), function(cp) {\r\n                    ++i; utfx.UTF8toUTF16(cp, sd);\r\n                }.bind(this));\r\n                if (i !== length)\r\n                    throw RangeError(\"Illegal range: Truncated data, \"+i+\" == \"+length);\r\n                if (relative) {\r\n                    this.offset = offset;\r\n                    return sd();\r\n                } else {\r\n                    return {\r\n                        \"string\": sd(),\r\n                        \"length\": offset - start\r\n                    };\r\n                }\r\n            } else if (metrics === ByteBuffer.METRICS_BYTES) {\r\n                if (!this.noAssert) {\r\n                    if (typeof offset !== 'number' || offset % 1 !== 0)\n                        throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                    offset >>>= 0;\n                    if (offset < 0 || offset + length > this.buffer.byteLength)\n                        throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+length+\") <= \"+this.buffer.byteLength);\n                }\r\n                var k = offset + length;\r\n                utfx.decodeUTF8toUTF16(function() {\r\n                    return offset < k ? this.view.getUint8(offset++) : null;\r\n                }.bind(this), sd = stringDestination(), this.noAssert);\r\n                if (offset !== k)\r\n                    throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+k);\r\n                if (relative) {\r\n                    this.offset = offset;\r\n                    return sd();\r\n                } else {\r\n                    return {\r\n                        'string': sd(),\r\n                        'length': offset - start\r\n                    };\r\n                }\r\n            } else\r\n                throw TypeError(\"Unsupported metrics: \"+metrics);\r\n        };\r\n\r\n        /**\r\n         * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.\r\n         * @function\r\n         * @param {number} length Number of characters or bytes to read\r\n         * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to\r\n         *  {@link ByteBuffer.METRICS_CHARS}.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  read if omitted.\r\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n         *  read and the actual number of bytes read.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;\r\n\r\n        // types/strings/vstring\r\n\r\n        /**\r\n         * Writes a length as varint32 prefixed UTF8 encoded string.\r\n         * @param {string} str String to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  written if omitted.\r\n         * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written\r\n         * @expose\r\n         * @see ByteBuffer#writeVarint32\r\n         */\r\n        ByteBufferPrototype.writeVString = function(str, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof str !== 'string')\r\n                    throw TypeError(\"Illegal str: Not a string\");\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            var start = offset,\r\n                k, l;\r\n            k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];\r\n            l = ByteBuffer.calculateVarint32(k);\r\n            offset += l+k;\n            var capacity15 = this.buffer.byteLength;\n            if (offset > capacity15)\n                this.resize((capacity15 *= 2) > offset ? capacity15 : offset);\n            offset -= l+k;\n            offset += this.writeVarint32(k, offset);\r\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n                this.view.setUint8(offset++, b);\r\n            }.bind(this));\r\n            if (offset !== start+k+l)\r\n                throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+(offset+k+l));\r\n            if (relative) {\r\n                this.offset = offset;\r\n                return this;\r\n            }\r\n            return offset - start;\r\n        };\r\n\r\n        /**\r\n         * Reads a length as varint32 prefixed UTF8 encoded string.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  read if omitted.\r\n         * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n         *  read and the actual number of bytes read.\r\n         * @expose\r\n         * @see ByteBuffer#readVarint32\r\n         */\r\n        ByteBufferPrototype.readVString = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\r\n            var temp = this.readVarint32(offset),\r\n                start = offset,\r\n                str;\r\n            offset += temp['length'];\r\n            temp = temp['value'];\r\n            var k = offset + temp,\r\n                sd = stringDestination();\r\n            utfx.decodeUTF8toUTF16(function() {\r\n                return offset < k ? this.view.getUint8(offset++) : null;\r\n            }.bind(this), sd, this.noAssert);\r\n            str = sd();\r\n            if (relative) {\r\n                this.offset = offset;\r\n                return str;\r\n            } else {\r\n                return {\r\n                    'string': str,\r\n                    'length': offset - start\r\n                };\r\n            }\r\n        };\r\n\r\n\r\n        /**\r\n         * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended\r\n         *  data's length.\r\n         * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets\r\n         *  will be modified according to the performed read operation.\r\n         * @param {(string|number)=} encoding Encoding if `data` is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\r\n         * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  read if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`\r\n         * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`\r\n         */\r\n        ByteBufferPrototype.append = function(source, encoding, offset) {\r\n            if (typeof encoding === 'number' || typeof encoding !== 'string') {\r\n                offset = encoding;\r\n                encoding = undefined;\r\n            }\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            if (!(source instanceof ByteBuffer))\r\n                source = ByteBuffer.wrap(source, encoding);\r\n            var length = source.limit - source.offset;\r\n            if (length <= 0) return this; // Nothing to append\r\n            offset += length;\n            var capacity16 = this.buffer.byteLength;\n            if (offset > capacity16)\n                this.resize((capacity16 *= 2) > offset ? capacity16 : offset);\n            offset -= length;\n            new Uint8Array(this.buffer, offset).set(new Uint8Array(source.buffer).subarray(source.offset, source.limit));\r\n            source.offset += length;\r\n            if (relative) this.offset += length;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents behind the specified\r\n         *  offset up to the length of this ByteBuffer's data.\r\n         * @param {!ByteBuffer} target Target ByteBuffer\r\n         * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  read if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         * @see ByteBuffer#append\r\n         */\r\n        ByteBufferPrototype.appendTo = function(target, offset) {\r\n            target.append(this, offset);\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to\r\n         *  disable them if your code already makes sure that everything is valid.\r\n         * @param {boolean} assert `true` to enable assertions, otherwise `false`\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.assert = function(assert) {\r\n            this.noAssert = !assert;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Gets the capacity of this ByteBuffer's backing buffer.\r\n         * @returns {number} Capacity of the backing buffer\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.capacity = function() {\r\n            return this.buffer.byteLength;\r\n        };\r\n\r\n        /**\r\n         * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the\r\n         *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.clear = function() {\r\n            this.offset = 0;\r\n            this.limit = this.buffer.byteLength;\r\n            this.markedOffset = -1;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},\r\n         *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.\r\n         * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`\r\n         * @returns {!ByteBuffer} Cloned instance\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.clone = function(copy) {\r\n            var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);\r\n            if (copy) {\r\n                var buffer = new ArrayBuffer(this.buffer.byteLength);\r\n                new Uint8Array(buffer).set(this.buffer);\r\n                bb.buffer = buffer;\r\n                bb.view = new DataView(buffer);\r\n            } else {\r\n                bb.buffer = this.buffer;\r\n                bb.view = this.view;\r\n            }\r\n            bb.offset = this.offset;\r\n            bb.markedOffset = this.markedOffset;\r\n            bb.limit = this.limit;\r\n            return bb;\r\n        };\r\n\r\n        /**\r\n         * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes\r\n         *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and\r\n         *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.\r\n         * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}\r\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.compact = function(begin, end) {\r\n            if (typeof begin === 'undefined') begin = this.offset;\r\n            if (typeof end === 'undefined') end = this.limit;\r\n            if (!this.noAssert) {\r\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\r\n            if (begin === 0 && end === this.buffer.byteLength)\r\n                return this; // Already compacted\r\n            var len = end - begin;\r\n            if (len === 0) {\r\n                this.buffer = EMPTY_BUFFER;\r\n                this.view = null;\r\n                if (this.markedOffset >= 0) this.markedOffset -= begin;\r\n                this.offset = 0;\r\n                this.limit = 0;\r\n                return this;\r\n            }\r\n            var buffer = new ArrayBuffer(len);\r\n            new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(begin, end));\r\n            this.buffer = buffer;\r\n            this.view = new DataView(buffer);\r\n            if (this.markedOffset >= 0) this.markedOffset -= begin;\r\n            this.offset = 0;\r\n            this.limit = len;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and\r\n         *  {@link ByteBuffer#limit}.\r\n         * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.\r\n         * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\r\n         * @returns {!ByteBuffer} Copy\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.copy = function(begin, end) {\r\n            if (typeof begin === 'undefined') begin = this.offset;\r\n            if (typeof end === 'undefined') end = this.limit;\r\n            if (!this.noAssert) {\r\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\r\n            if (begin === end)\r\n                return new ByteBuffer(0, this.littleEndian, this.noAssert);\r\n            var capacity = end - begin,\r\n                bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);\r\n            bb.offset = 0;\r\n            bb.limit = capacity;\r\n            if (bb.markedOffset >= 0) bb.markedOffset -= begin;\r\n            this.copyTo(bb, 0, begin, end);\r\n            return bb;\r\n        };\r\n\r\n        /**\r\n         * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and\r\n         *  {@link ByteBuffer#limit}.\r\n         * @param {!ByteBuffer} target Target ByteBuffer\r\n         * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}\r\n         *  by the number of bytes copied if omitted.\r\n         * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the\r\n         *  number of bytes copied if omitted.\r\n         * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {\r\n            var relative,\r\n                targetRelative;\r\n            if (!this.noAssert) {\r\n                if (!ByteBuffer.isByteBuffer(target))\r\n                    throw TypeError(\"Illegal target: Not a ByteBuffer\");\r\n            }\r\n            targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;\r\n            sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;\r\n            sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;\r\n\r\n            if (targetOffset < 0 || targetOffset > target.buffer.byteLength)\r\n                throw RangeError(\"Illegal target range: 0 <= \"+targetOffset+\" <= \"+target.buffer.byteLength);\r\n            if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength)\r\n                throw RangeError(\"Illegal source range: 0 <= \"+sourceOffset+\" <= \"+this.buffer.byteLength);\r\n\r\n            var len = sourceLimit - sourceOffset;\r\n            if (len === 0)\r\n                return target; // Nothing to copy\r\n\r\n            target.ensureCapacity(targetOffset + len);\r\n\r\n            new Uint8Array(target.buffer).set(new Uint8Array(this.buffer).subarray(sourceOffset, sourceLimit), targetOffset);\r\n\r\n            if (relative) this.offset += len;\r\n            if (targetRelative) target.offset += len;\r\n\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the\r\n         *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,\r\n         *  the required capacity will be used instead.\r\n         * @param {number} capacity Required capacity\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.ensureCapacity = function(capacity) {\r\n            var current = this.buffer.byteLength;\r\n            if (current < capacity)\r\n                return this.resize((current *= 2) > capacity ? current : capacity);\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between\r\n         *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.\r\n         * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.\r\n         * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  written if omitted. defaults to {@link ByteBuffer#offset}.\r\n         * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes\r\n         */\r\n        ByteBufferPrototype.fill = function(value, begin, end) {\r\n            var relative = typeof begin === 'undefined';\n            if (relative) begin = this.offset;\n            if (typeof value === 'string' && value.length > 0)\r\n                value = value.charCodeAt(0);\r\n            if (typeof begin === 'undefined') begin = this.offset;\r\n            if (typeof end === 'undefined') end = this.limit;\r\n            if (!this.noAssert) {\r\n                if (typeof value !== 'number' || value % 1 !== 0)\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n                value |= 0;\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\r\n            if (begin >= end)\r\n                return this; // Nothing to fill\r\n            while (begin < end) this.view.setUint8(begin++, value);\r\n            if (relative) this.offset = begin;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and\r\n         *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.flip = function() {\r\n            this.limit = this.offset;\r\n            this.offset = 0;\r\n            return this;\r\n        };\r\n        /**\r\n         * Marks an offset on this ByteBuffer to be used later.\r\n         * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.\r\n         * @returns {!ByteBuffer} this\r\n         * @throws {TypeError} If `offset` is not a valid number\r\n         * @throws {RangeError} If `offset` is out of bounds\r\n         * @see ByteBuffer#reset\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.mark = function(offset) {\r\n            offset = typeof offset === 'undefined' ? this.offset : offset;\r\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            this.markedOffset = offset;\r\n            return this;\r\n        };\r\n        /**\r\n         * Sets the byte order.\r\n         * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.order = function(littleEndian) {\r\n            if (!this.noAssert) {\r\n                if (typeof littleEndian !== 'boolean')\r\n                    throw TypeError(\"Illegal littleEndian: Not a boolean\");\r\n            }\r\n            this.littleEndian = !!littleEndian;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Switches (to) little endian byte order.\r\n         * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.LE = function(littleEndian) {\r\n            this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Switches (to) big endian byte order.\r\n         * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.BE = function(bigEndian) {\r\n            this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;\r\n            return this;\r\n        };\r\n        /**\r\n         * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the\r\n         *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer\r\n         *  will be resized and its contents moved accordingly.\r\n         * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be\r\n         *  modified according to the performed read operation.\r\n         * @param {(string|number)=} encoding Encoding if `data` is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\r\n         * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes\r\n         *  prepended if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`\r\n         * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`\r\n         */\r\n        ByteBufferPrototype.prepend = function(source, encoding, offset) {\r\n            if (typeof encoding === 'number' || typeof encoding !== 'string') {\r\n                offset = encoding;\r\n                encoding = undefined;\r\n            }\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            if (!(source instanceof ByteBuffer))\r\n                source = ByteBuffer.wrap(source, encoding);\r\n            var len = source.limit - source.offset;\r\n            if (len <= 0) return this; // Nothing to prepend\r\n            var diff = len - offset;\r\n            var arrayView;\r\n            if (diff > 0) { // Not enough space before offset, so resize + move\r\n                var buffer = new ArrayBuffer(this.buffer.byteLength + diff);\r\n                arrayView = new Uint8Array(buffer);\r\n                arrayView.set(new Uint8Array(this.buffer).subarray(offset, this.buffer.byteLength), len);\r\n                this.buffer = buffer;\r\n                this.view = new DataView(buffer);\r\n                this.offset += diff;\r\n                if (this.markedOffset >= 0) this.markedOffset += diff;\r\n                this.limit += diff;\r\n                offset += diff;\r\n            } else {\r\n                arrayView = new Uint8Array(this.buffer);\r\n            }\r\n            arrayView.set(new Uint8Array(source.buffer).subarray(source.offset, source.limit), offset - len);\r\n            source.offset = source.limit;\r\n            if (relative)\r\n                this.offset -= len;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the\r\n         *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer\r\n         *  will be resized and its contents moved accordingly.\r\n         * @param {!ByteBuffer} target Target ByteBuffer\r\n         * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes\r\n         *  prepended if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         * @see ByteBuffer#prepend\r\n         */\r\n        ByteBufferPrototype.prependTo = function(target, offset) {\r\n            target.prepend(this, offset);\r\n            return this;\r\n        };\r\n        /**\r\n         * Prints debug information about this ByteBuffer's contents.\r\n         * @param {function(string)=} out Output function to call, defaults to console.log\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.printDebug = function(out) {\r\n            if (typeof out !== 'function') out = console.log.bind(console);\r\n            out(\r\n                this.toString()+\"\\n\"+\r\n                \"-------------------------------------------------------------------\\n\"+\r\n                this.toDebug(/* columns */ true)\r\n            );\r\n        };\r\n\r\n        /**\r\n         * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and\r\n         *  {@link ByteBuffer#limit}, so this returns `limit - offset`.\r\n         * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.remaining = function() {\r\n            return this.limit - this.offset;\r\n        };\r\n        /**\r\n         * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}\r\n         *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been\r\n         *  marked, sets `offset = 0`.\r\n         * @returns {!ByteBuffer} this\r\n         * @see ByteBuffer#mark\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.reset = function() {\r\n            if (this.markedOffset >= 0) {\r\n                this.offset = this.markedOffset;\r\n                this.markedOffset = -1;\r\n            } else {\r\n                this.offset = 0;\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that\r\n         *  large or larger.\r\n         * @param {number} capacity Capacity required\r\n         * @returns {!ByteBuffer} this\r\n         * @throws {TypeError} If `capacity` is not a number\r\n         * @throws {RangeError} If `capacity < 0`\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.resize = function(capacity) {\r\n            if (!this.noAssert) {\r\n                if (typeof capacity !== 'number' || capacity % 1 !== 0)\n                    throw TypeError(\"Illegal capacity: \"+capacity+\" (not an integer)\");\n                capacity |= 0;\n                if (capacity < 0)\r\n                    throw RangeError(\"Illegal capacity: 0 <= \"+capacity);\r\n            }\r\n            if (this.buffer.byteLength < capacity) {\r\n                var buffer = new ArrayBuffer(capacity);\r\n                new Uint8Array(buffer).set(new Uint8Array(this.buffer));\r\n                this.buffer = buffer;\r\n                this.view = new DataView(buffer);\r\n            }\r\n            return this;\r\n        };\r\n        /**\r\n         * Reverses this ByteBuffer's contents.\r\n         * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}\r\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.reverse = function(begin, end) {\r\n            if (typeof begin === 'undefined') begin = this.offset;\r\n            if (typeof end === 'undefined') end = this.limit;\r\n            if (!this.noAssert) {\r\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\r\n            if (begin === end)\r\n                return this; // Nothing to reverse\r\n            Array.prototype.reverse.call(new Uint8Array(this.buffer).subarray(begin, end));\r\n            this.view = new DataView(this.buffer); // FIXME: Why exactly is this necessary?\r\n            return this;\r\n        };\r\n        /**\r\n         * Skips the next `length` bytes. This will just advance\r\n         * @param {number} length Number of bytes to skip. May also be negative to move the offset back.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.skip = function(length) {\r\n            if (!this.noAssert) {\r\n                if (typeof length !== 'number' || length % 1 !== 0)\n                    throw TypeError(\"Illegal length: \"+length+\" (not an integer)\");\n                length |= 0;\n            }\r\n            var offset = this.offset + length;\r\n            if (!this.noAssert) {\r\n                if (offset < 0 || offset > this.buffer.byteLength)\r\n                    throw RangeError(\"Illegal length: 0 <= \"+this.offset+\" + \"+length+\" <= \"+this.buffer.byteLength);\r\n            }\r\n            this.offset = offset;\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.\r\n         * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.\r\n         * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\r\n         * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.slice = function(begin, end) {\r\n            if (typeof begin === 'undefined') begin = this.offset;\r\n            if (typeof end === 'undefined') end = this.limit;\r\n            if (!this.noAssert) {\r\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\r\n            var bb = this.clone();\r\n            bb.offset = begin;\r\n            bb.limit = end;\r\n            return bb;\r\n        };\r\n        /**\r\n         * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between\r\n         *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will transparently {@link ByteBuffer#flip} this\r\n         *  ByteBuffer if `offset > limit` but the actual offsets remain untouched.\r\n         * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if\r\n         *  possible. Defaults to `false`\r\n         * @returns {!ArrayBuffer} Contents as an ArrayBuffer\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.toBuffer = function(forceCopy) {\r\n            var offset = this.offset,\r\n                limit = this.limit;\r\n            if (offset > limit) {\r\n                var t = offset;\r\n                offset = limit;\r\n                limit = t;\r\n            }\r\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: Not an integer\");\n                offset >>>= 0;\n                if (typeof limit !== 'number' || limit % 1 !== 0)\n                    throw TypeError(\"Illegal limit: Not an integer\");\n                limit >>>= 0;\n                if (offset < 0 || offset > limit || limit > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+offset+\" <= \"+limit+\" <= \"+this.buffer.byteLength);\n            }\r\n            // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is\r\n            // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:\r\n            if (!forceCopy && offset === 0 && limit === this.buffer.byteLength) {\r\n                return this.buffer;\r\n            }\r\n            if (offset === limit) {\r\n                return EMPTY_BUFFER;\r\n            }\r\n            var buffer = new ArrayBuffer(limit - offset);\r\n            new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);\r\n            return buffer;\r\n        };\r\n\r\n        /**\r\n         * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between\r\n         *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will transparently {@link ByteBuffer#flip} this\r\n         *  ByteBuffer if `offset > limit` but the actual offsets remain untouched. This is an alias of\r\n         *  {@link ByteBuffer#toBuffer}.\r\n         * @function\r\n         * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.\r\n         *  Defaults to `false`\r\n         * @returns {!ArrayBuffer} Contents as an ArrayBuffer\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;\r\n\r\n\r\n        /**\r\n         * Converts the ByteBuffer's contents to a string.\r\n         * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows\r\n         *  direct conversion to \"utf8\", \"hex\", \"base64\" and \"binary\" encoding. \"debug\" returns a hex representation with\r\n         *  highlighted offsets.\r\n         * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}\r\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\r\n         * @returns {string} String representation\r\n         * @throws {Error} If `encoding` is invalid\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.toString = function(encoding, begin, end) {\r\n            if (typeof encoding === 'undefined')\r\n                return \"ByteBufferAB(offset=\"+this.offset+\",markedOffset=\"+this.markedOffset+\",limit=\"+this.limit+\",capacity=\"+this.capacity()+\")\";\r\n            if (typeof encoding === 'number')\r\n                encoding = \"utf8\",\r\n                begin = encoding,\r\n                end = begin;\r\n            switch (encoding) {\r\n                case \"utf8\":\r\n                    return this.toUTF8(begin, end);\r\n                case \"base64\":\r\n                    return this.toBase64(begin, end);\r\n                case \"hex\":\r\n                    return this.toHex(begin, end);\r\n                case \"binary\":\r\n                    return this.toBinary(begin, end);\r\n                case \"debug\":\r\n                    return this.toDebug();\r\n                case \"columns\":\r\n                    return this.toColumns();\r\n                default:\r\n                    throw Error(\"Unsupported encoding: \"+encoding);\r\n            }\r\n        };\r\n\r\n        // lxiv-embeddable\r\n\r\n        /**\r\n         * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n         * Released under the Apache License, Version 2.0\r\n         * see: https://github.com/dcodeIO/lxiv for details\r\n         */\r\n        var lxiv = function() {\r\n            \"use strict\";\r\n\r\n            /**\r\n             * lxiv namespace.\r\n             * @type {!Object.<string,*>}\r\n             * @exports lxiv\r\n             */\r\n            var lxiv = {};\r\n\r\n            /**\r\n             * Character codes for output.\r\n             * @type {!Array.<number>}\r\n             * @inner\r\n             */\r\n            var aout = [\r\n                65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\r\n                81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,\r\n                103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,\r\n                119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47\r\n            ];\r\n\r\n            /**\r\n             * Character codes for input.\r\n             * @type {!Array.<number>}\r\n             * @inner\r\n             */\r\n            var ain = [];\r\n            for (var i=0, k=aout.length; i<k; ++i)\r\n                ain[aout[i]] = i;\r\n\r\n            /**\r\n             * Encodes bytes to base64 char codes.\r\n             * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if\r\n             *  there are no more bytes left.\r\n             * @param {!function(number)} dst Characters destination as a function successively called with each encoded char\r\n             *  code.\r\n             */\r\n            lxiv.encode = function(src, dst) {\r\n                var b, t;\r\n                while ((b = src()) !== null) {\r\n                    dst(aout[(b>>2)&0x3f]);\r\n                    t = (b&0x3)<<4;\r\n                    if ((b = src()) !== null) {\r\n                        t |= (b>>4)&0xf;\r\n                        dst(aout[(t|((b>>4)&0xf))&0x3f]);\r\n                        t = (b&0xf)<<2;\r\n                        if ((b = src()) !== null)\r\n                            dst(aout[(t|((b>>6)&0x3))&0x3f]),\r\n                            dst(aout[b&0x3f]);\r\n                        else\r\n                            dst(aout[t&0x3f]),\r\n                            dst(61);\r\n                    } else\r\n                        dst(aout[t&0x3f]),\r\n                        dst(61),\r\n                        dst(61);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Decodes base64 char codes to bytes.\r\n             * @param {!function():number|null} src Characters source as a function returning the next char code respectively\r\n             *  `null` if there are no more characters left.\r\n             * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\r\n             * @throws {Error} If a character code is invalid\r\n             */\r\n            lxiv.decode = function(src, dst) {\r\n                var c, t1, t2;\r\n                function fail(c) {\r\n                    throw Error(\"Illegal character code: \"+c);\r\n                }\r\n                while ((c = src()) !== null) {\r\n                    t1 = ain[c];\r\n                    if (typeof t1 === 'undefined') fail(c);\r\n                    if ((c = src()) !== null) {\r\n                        t2 = ain[c];\r\n                        if (typeof t2 === 'undefined') fail(c);\r\n                        dst((t1<<2)>>>0|(t2&0x30)>>4);\r\n                        if ((c = src()) !== null) {\r\n                            t1 = ain[c];\r\n                            if (typeof t1 === 'undefined')\r\n                                if (c === 61) break; else fail(c);\r\n                            dst(((t2&0xf)<<4)>>>0|(t1&0x3c)>>2);\r\n                            if ((c = src()) !== null) {\r\n                                t2 = ain[c];\r\n                                if (typeof t2 === 'undefined')\r\n                                    if (c === 61) break; else fail(c);\r\n                                dst(((t1&0x3)<<6)>>>0|t2);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Tests if a string is valid base64.\r\n             * @param {string} str String to test\r\n             * @returns {boolean} `true` if valid, otherwise `false`\r\n             */\r\n            lxiv.test = function(str) {\r\n                return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);\r\n            };\r\n\r\n            return lxiv;\r\n        }();\r\n\r\n        // encodings/base64\r\n\r\n        /**\r\n         * Encodes this ByteBuffer's contents to a base64 encoded string.\r\n         * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.\r\n         * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.\r\n         * @returns {string} Base64 encoded string\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.toBase64 = function(begin, end) {\r\n            if (typeof begin === 'undefined')\r\n                begin = this.offset;\r\n            if (typeof end === 'undefined')\r\n                end = this.limit;\r\n            if (!this.noAssert) {\r\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\r\n            var sd; lxiv.encode(function() {\r\n                return begin < end ? this.view.getUint8(begin++) : null;\r\n            }.bind(this), sd = stringDestination());\r\n            return sd();\r\n        };\r\n\r\n        /**\r\n         * Decodes a base64 encoded string to a ByteBuffer.\r\n         * @param {string} str String to decode\r\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n         * @returns {!ByteBuffer} ByteBuffer\r\n         * @expose\r\n         */\r\n        ByteBuffer.fromBase64 = function(str, littleEndian, noAssert) {\r\n            if (!noAssert) {\r\n                if (typeof str !== 'string')\r\n                    throw TypeError(\"Illegal str: Not a string\");\r\n                if (str.length % 4 !== 0)\r\n                    throw TypeError(\"Illegal str: Length not a multiple of 4\");\r\n            }\r\n            var bb = new ByteBuffer(str.length/4*3, littleEndian, noAssert),\r\n                i = 0;\r\n            lxiv.decode(stringSource(str), function(b) {\r\n                bb.view.setUint8(i++, b);\r\n            });\r\n            bb.limit = i;\r\n            return bb;\r\n        };\r\n\r\n        /**\r\n         * Encodes a binary string to base64 like `window.btoa` does.\r\n         * @param {string} str Binary string\r\n         * @returns {string} Base64 encoded string\r\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa\r\n         * @expose\r\n         */\r\n        ByteBuffer.btoa = function(str) {\r\n            return ByteBuffer.fromBinary(str).toBase64();\r\n        };\r\n\r\n        /**\r\n         * Decodes a base64 encoded string to binary like `window.atob` does.\r\n         * @param {string} b64 Base64 encoded string\r\n         * @returns {string} Binary string\r\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob\r\n         * @expose\r\n         */\r\n        ByteBuffer.atob = function(b64) {\r\n            return ByteBuffer.fromBase64(b64).toBinary();\r\n        };\r\n\r\n        // encodings/binary\r\n\r\n        /**\r\n         * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.\r\n         * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.\r\n         * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.\r\n         * @returns {string} Binary encoded string\r\n         * @throws {RangeError} If `offset > limit`\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.toBinary = function(begin, end) {\r\n            begin = typeof begin === 'undefined' ? this.offset : begin;\r\n            end = typeof end === 'undefined' ? this.limit : end;\r\n            if (!this.noAssert) {\r\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\r\n            if (begin === end)\r\n                return \"\";\r\n            var cc = [], pt = [];\r\n            while (begin < end) {\r\n                cc.push(this.view.getUint8(begin++));\r\n                if (cc.length >= 1024)\r\n                    pt.push(String.fromCharCode.apply(String, cc)),\r\n                    cc = [];\r\n            }\r\n            return pt.join('') + String.fromCharCode.apply(String, cc);\r\n        };\r\n\r\n        /**\r\n         * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.\r\n         * @param {string} str String to decode\r\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n         * @returns {!ByteBuffer} ByteBuffer\r\n         * @expose\r\n         */\r\n        ByteBuffer.fromBinary = function(str, littleEndian, noAssert) {\r\n            if (!noAssert) {\r\n                if (typeof str !== 'string')\r\n                    throw TypeError(\"Illegal str: Not a string\");\r\n            }\r\n            var i = 0, k = str.length, charCode,\r\n                bb = new ByteBuffer(k, littleEndian, noAssert);\r\n            while (i<k) {\r\n                charCode = str.charCodeAt(i);\r\n                if (!noAssert && charCode > 255)\r\n                    throw RangeError(\"Illegal charCode at \"+i+\": 0 <= \"+charCode+\" <= 255\");\r\n                bb.view.setUint8(i++, charCode);\r\n            }\r\n            bb.limit = k;\r\n            return bb;\r\n        };\r\n\r\n        // encodings/debug\r\n\r\n        /**\r\n         * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:\r\n         * * `<` : offset,\r\n         * * `'` : markedOffset,\r\n         * * `>` : limit,\r\n         * * `|` : offset and limit,\r\n         * * `[` : offset and markedOffset,\r\n         * * `]` : markedOffset and limit,\r\n         * * `!` : offset, markedOffset and limit\r\n         * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`\r\n         * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`\r\n         * @expose\r\n         * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`\r\n         * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`\r\n         * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`\r\n         * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`\r\n         */\r\n        ByteBufferPrototype.toDebug = function(columns) {\r\n            var i = -1,\r\n                k = this.buffer.byteLength,\r\n                b,\r\n                hex = \"\",\r\n                asc = \"\",\r\n                out = \"\";\r\n            while (i<k) {\r\n                if (i !== -1) {\r\n                    b = this.view.getUint8(i);\r\n                    if (b < 0x10) hex += \"0\"+b.toString(16).toUpperCase();\r\n                    else hex += b.toString(16).toUpperCase();\r\n                    if (columns) {\r\n                        asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';\r\n                    }\r\n                }\r\n                ++i;\r\n                if (columns) {\r\n                    if (i > 0 && i % 16 === 0 && i !== k) {\r\n                        while (hex.length < 3*16+3) hex += \" \";\r\n                        out += hex+asc+\"\\n\";\r\n                        hex = asc = \"\";\r\n                    }\r\n                }\r\n                if (i === this.offset && i === this.limit)\r\n                    hex += i === this.markedOffset ? \"!\" : \"|\";\r\n                else if (i === this.offset)\r\n                    hex += i === this.markedOffset ? \"[\" : \"<\";\r\n                else if (i === this.limit)\r\n                    hex += i === this.markedOffset ? \"]\" : \">\";\r\n                else\r\n                    hex += i === this.markedOffset ? \"'\" : (columns || (i !== 0 && i !== k) ? \" \" : \"\");\r\n            }\r\n            if (columns && hex !== \" \") {\r\n                while (hex.length < 3*16+3) hex += \" \";\r\n                out += hex+asc+\"\\n\";\r\n            }\r\n            return columns ? out : hex;\r\n        };\r\n\r\n        /**\r\n         * Decodes a hex encoded string with marked offsets to a ByteBuffer.\r\n         * @param {string} str Debug string to decode (not be generated with `columns = true`)\r\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n         * @returns {!ByteBuffer} ByteBuffer\r\n         * @expose\r\n         * @see ByteBuffer#toDebug\r\n         */\r\n        ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {\r\n            var k = str.length,\r\n                bb = new ByteBuffer(((k+1)/3)|0, littleEndian, noAssert);\r\n            var i = 0, j = 0, ch, b,\r\n                rs = false, // Require symbol next\r\n                ho = false, hm = false, hl = false, // Already has offset, markedOffset, limit?\r\n                fail = false;\r\n            while (i<k) {\r\n                switch (ch = str.charAt(i++)) {\r\n                    case '!':\r\n                        if (!noAssert) {\r\n                            if (ho || hm || hl) {\r\n                                fail = true; break;\r\n                            }\r\n                            ho = hm = hl = true;\r\n                        }\r\n                        bb.offset = bb.markedOffset = bb.limit = j;\r\n                        rs = false;\r\n                        break;\r\n                    case '|':\r\n                        if (!noAssert) {\r\n                            if (ho || hl) {\r\n                                fail = true; break;\r\n                            }\r\n                            ho = hl = true;\r\n                        }\r\n                        bb.offset = bb.limit = j;\r\n                        rs = false;\r\n                        break;\r\n                    case '[':\r\n                        if (!noAssert) {\r\n                            if (ho || hm) {\r\n                                fail = true; break;\r\n                            }\r\n                            ho = hm = true;\r\n                        }\r\n                        bb.offset = bb.markedOffset = j;\r\n                        rs = false;\r\n                        break;\r\n                    case '<':\r\n                        if (!noAssert) {\r\n                            if (ho) {\r\n                                fail = true; break;\r\n                            }\r\n                            ho = true;\r\n                        }\r\n                        bb.offset = j;\r\n                        rs = false;\r\n                        break;\r\n                    case ']':\r\n                        if (!noAssert) {\r\n                            if (hl || hm) {\r\n                                fail = true; break;\r\n                            }\r\n                            hl = hm = true;\r\n                        }\r\n                        bb.limit = bb.markedOffset = j;\r\n                        rs = false;\r\n                        break;\r\n                    case '>':\r\n                        if (!noAssert) {\r\n                            if (hl) {\r\n                                fail = true; break;\r\n                            }\r\n                            hl = true;\r\n                        }\r\n                        bb.limit = j;\r\n                        rs = false;\r\n                        break;\r\n                    case \"'\":\r\n                        if (!noAssert) {\r\n                            if (hm) {\r\n                                fail = true; break;\r\n                            }\r\n                            hm = true;\r\n                        }\r\n                        bb.markedOffset = j;\r\n                        rs = false;\r\n                        break;\r\n                    case ' ':\r\n                        rs = false;\r\n                        break;\r\n                    default:\r\n                        if (!noAssert) {\r\n                            if (rs) {\r\n                                fail = true; break;\r\n                            }\r\n                        }\r\n                        b = parseInt(ch+str.charAt(i++), 16);\r\n                        if (!noAssert) {\r\n                            if (isNaN(b) || b < 0 || b > 255)\r\n                                throw TypeError(\"Illegal str: Not a debug encoded string\");\r\n                        }\r\n                        bb.view.setUint8(j++, b);\r\n                        rs = true;\r\n                }\r\n                if (fail)\r\n                    throw TypeError(\"Illegal str: Invalid symbol at \"+i);\r\n            }\r\n            if (!noAssert) {\r\n                if (!ho || !hl)\r\n                    throw TypeError(\"Illegal str: Missing offset or limit\");\r\n                if (j<bb.buffer.byteLength)\r\n                    throw TypeError(\"Illegal str: Not a debug encoded string (is it hex?) \"+j+\" < \"+k);\r\n            }\r\n            return bb;\r\n        };\r\n\r\n        // encodings/hex\r\n\r\n        /**\r\n         * Encodes this ByteBuffer's contents to a hex encoded string.\r\n         * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.\r\n         * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.\r\n         * @returns {string} Hex encoded string\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.toHex = function(begin, end) {\r\n            begin = typeof begin === 'undefined' ? this.offset : begin;\r\n            end = typeof end === 'undefined' ? this.limit : end;\r\n            if (!this.noAssert) {\r\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\r\n            var out = new Array(end - begin),\r\n                b;\r\n            while (begin < end) {\r\n                b = this.view.getUint8(begin++);\r\n                if (b < 0x10)\r\n                    out.push(\"0\", b.toString(16));\r\n                else out.push(b.toString(16));\r\n            }\r\n            return out.join('');\r\n        };\r\n\r\n        /**\r\n         * Decodes a hex encoded string to a ByteBuffer.\r\n         * @param {string} str String to decode\r\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n         * @returns {!ByteBuffer} ByteBuffer\r\n         * @expose\r\n         */\r\n        ByteBuffer.fromHex = function(str, littleEndian, noAssert) {\r\n            if (!noAssert) {\r\n                if (typeof str !== 'string')\r\n                    throw TypeError(\"Illegal str: Not a string\");\r\n                if (str.length % 2 !== 0)\r\n                    throw TypeError(\"Illegal str: Length not a multiple of 2\");\r\n            }\r\n            var k = str.length,\r\n                bb = new ByteBuffer((k / 2) | 0, littleEndian),\r\n                b;\r\n            for (var i=0, j=0; i<k; i+=2) {\r\n                b = parseInt(str.substring(i, i+2), 16);\r\n                if (!noAssert)\r\n                    if (!isFinite(b) || b < 0 || b > 255)\r\n                        throw TypeError(\"Illegal str: Contains non-hex characters\");\r\n                bb.view.setUint8(j++, b);\r\n            }\r\n            bb.limit = j;\r\n            return bb;\r\n        };\r\n\r\n        // utfx-embeddable\r\n\r\n        /**\r\n         * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n         * Released under the Apache License, Version 2.0\r\n         * see: https://github.com/dcodeIO/utfx for details\r\n         */\r\n        var utfx = function() {\r\n            \"use strict\";\r\n\r\n            /**\r\n             * utfx namespace.\r\n             * @inner\r\n             * @type {!Object.<string,*>}\r\n             */\r\n            var utfx = {};\r\n\r\n            /**\r\n             * Maximum valid code point.\r\n             * @type {number}\r\n             * @const\r\n             */\r\n            utfx.MAX_CODEPOINT = 0x10FFFF;\r\n\r\n            /**\r\n             * Encodes UTF8 code points to UTF8 bytes.\r\n             * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n             *  respectively `null` if there are no more code points left or a single numeric code point.\r\n             * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\r\n             */\r\n            utfx.encodeUTF8 = function(src, dst) {\r\n                var cp = null;\r\n                if (typeof src === 'number')\r\n                    cp = src,\r\n                    src = function() { return null; };\r\n                while (cp !== null || (cp = src()) !== null) {\r\n                    if (cp < 0x80)\r\n                        dst(cp&0x7F);\r\n                    else if (cp < 0x800)\r\n                        dst(((cp>>6)&0x1F)|0xC0),\r\n                        dst((cp&0x3F)|0x80);\r\n                    else if (cp < 0x10000)\r\n                        dst(((cp>>12)&0x0F)|0xE0),\r\n                        dst(((cp>>6)&0x3F)|0x80),\r\n                        dst((cp&0x3F)|0x80);\r\n                    else\r\n                        dst(((cp>>18)&0x07)|0xF0),\r\n                        dst(((cp>>12)&0x3F)|0x80),\r\n                        dst(((cp>>6)&0x3F)|0x80),\r\n                        dst((cp&0x3F)|0x80);\r\n                    cp = null;\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Decodes UTF8 bytes to UTF8 code points.\r\n             * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n             *  are no more bytes left.\r\n             * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.\r\n             * @throws {RangeError} If a starting byte is invalid in UTF8\r\n             * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\r\n             *  remaining bytes.\r\n             */\r\n            utfx.decodeUTF8 = function(src, dst) {\r\n                var a, b, c, d, fail = function(b) {\r\n                    b = b.slice(0, b.indexOf(null));\r\n                    var err = Error(b.toString());\r\n                    err.name = \"TruncatedError\";\r\n                    err['bytes'] = b;\r\n                    throw err;\r\n                };\r\n                while ((a = src()) !== null) {\r\n                    if ((a&0x80) === 0)\r\n                        dst(a);\r\n                    else if ((a&0xE0) === 0xC0)\r\n                        ((b = src()) === null) && fail([a, b]),\r\n                        dst(((a&0x1F)<<6) | (b&0x3F));\r\n                    else if ((a&0xF0) === 0xE0)\r\n                        ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),\r\n                        dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));\r\n                    else if ((a&0xF8) === 0xF0)\r\n                        ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),\r\n                        dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));\r\n                    else throw RangeError(\"Illegal starting byte: \"+a);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Converts UTF16 characters to UTF8 code points.\r\n             * @param {!function():number|null} src Characters source as a function returning the next char code respectively\r\n             *  `null` if there are no more characters left.\r\n             * @param {!function(number)} dst Code points destination as a function successively called with each converted code\r\n             *  point.\r\n             */\r\n            utfx.UTF16toUTF8 = function(src, dst) {\r\n                var c1, c2 = null;\r\n                while (true) {\r\n                    if ((c1 = c2 !== null ? c2 : src()) === null)\r\n                        break;\r\n                    if (c1 >= 0xD800 && c1 <= 0xDFFF) {\r\n                        if ((c2 = src()) !== null) {\r\n                            if (c2 >= 0xDC00 && c2 <= 0xDFFF) {\r\n                                dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);\r\n                                c2 = null; continue;\r\n                            }\r\n                        }\r\n                    }\r\n                    dst(c1);\r\n                }\r\n                if (c2 !== null) dst(c2);\r\n            };\r\n\r\n            /**\r\n             * Converts UTF8 code points to UTF16 characters.\r\n             * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n             *  respectively `null` if there are no more code points left or a single numeric code point.\r\n             * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n             * @throws {RangeError} If a code point is out of range\r\n             */\r\n            utfx.UTF8toUTF16 = function(src, dst) {\r\n                var cp = null;\r\n                if (typeof src === 'number')\r\n                    cp = src, src = function() { return null; };\r\n                while (cp !== null || (cp = src()) !== null) {\r\n                    if (cp <= 0xFFFF)\r\n                        dst(cp);\r\n                    else\r\n                        cp -= 0x10000,\r\n                        dst((cp>>10)+0xD800),\r\n                        dst((cp%0x400)+0xDC00);\r\n                    cp = null;\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Converts and encodes UTF16 characters to UTF8 bytes.\r\n             * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\r\n             *  if there are no more characters left.\r\n             * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\r\n             */\r\n            utfx.encodeUTF16toUTF8 = function(src, dst) {\r\n                utfx.UTF16toUTF8(src, function(cp) {\r\n                    utfx.encodeUTF8(cp, dst);\r\n                });\r\n            };\r\n\r\n            /**\r\n             * Decodes and converts UTF8 bytes to UTF16 characters.\r\n             * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n             *  are no more bytes left.\r\n             * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n             * @throws {RangeError} If a starting byte is invalid in UTF8\r\n             * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\r\n             */\r\n            utfx.decodeUTF8toUTF16 = function(src, dst) {\r\n                utfx.decodeUTF8(src, function(cp) {\r\n                    utfx.UTF8toUTF16(cp, dst);\r\n                });\r\n            };\r\n\r\n            /**\r\n             * Calculates the byte length of an UTF8 code point.\r\n             * @param {number} cp UTF8 code point\r\n             * @returns {number} Byte length\r\n             */\r\n            utfx.calculateCodePoint = function(cp) {\r\n                return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;\r\n            };\r\n\r\n            /**\r\n             * Calculates the number of UTF8 bytes required to store UTF8 code points.\r\n             * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively\r\n             *  `null` if there are no more code points left.\r\n             * @returns {number} The number of UTF8 bytes required\r\n             */\r\n            utfx.calculateUTF8 = function(src) {\r\n                var cp, l=0;\r\n                while ((cp = src()) !== null)\r\n                    l += utfx.calculateCodePoint(cp);\r\n                return l;\r\n            };\r\n\r\n            /**\r\n             * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\r\n             * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively\r\n             *  `null` if there are no more characters left.\r\n             * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\r\n             */\r\n            utfx.calculateUTF16asUTF8 = function(src) {\r\n                var n=0, l=0;\r\n                utfx.UTF16toUTF8(src, function(cp) {\r\n                    ++n; l += utfx.calculateCodePoint(cp);\r\n                });\r\n                return [n,l];\r\n            };\r\n\r\n            return utfx;\r\n        }();\r\n\r\n        // encodings/utf8\r\n\r\n        /**\r\n         * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded\r\n         *  string.\r\n         * @returns {string} Hex encoded string\r\n         * @throws {RangeError} If `offset > limit`\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.toUTF8 = function(begin, end) {\r\n            if (typeof begin === 'undefined') begin = this.offset;\r\n            if (typeof end === 'undefined') end = this.limit;\r\n            if (!this.noAssert) {\r\n                if (typeof begin !== 'number' || begin % 1 !== 0)\n                    throw TypeError(\"Illegal begin: Not an integer\");\n                begin >>>= 0;\n                if (typeof end !== 'number' || end % 1 !== 0)\n                    throw TypeError(\"Illegal end: Not an integer\");\n                end >>>= 0;\n                if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                    throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n            }\r\n            var sd; try {\r\n                utfx.decodeUTF8toUTF16(function() {\r\n                    return begin < end ? this.view.getUint8(begin++) : null;\r\n                }.bind(this), sd = stringDestination());\r\n            } catch (e) {\r\n                if (begin !== end)\r\n                    throw RangeError(\"Illegal range: Truncated data, \"+begin+\" != \"+end);\r\n            }\r\n            return sd();\r\n        };\r\n\r\n        /**\r\n         * Decodes an UTF8 encoded string to a ByteBuffer.\r\n         * @param {string} str String to decode\r\n         * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n         * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n         *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n         * @returns {!ByteBuffer} ByteBuffer\r\n         * @expose\r\n         */\r\n        ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {\r\n            if (!noAssert)\r\n                if (typeof str !== 'string')\r\n                    throw TypeError(\"Illegal str: Not a string\");\r\n            var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),\r\n                i = 0;\r\n            utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n                bb.view.setUint8(i++, b);\r\n            });\r\n            bb.limit = i;\r\n            return bb;\r\n        };\r\n\r\n\r\n        return ByteBuffer;\r\n    }\r\n\r\n    /* CommonJS */ if (typeof require === 'function' && typeof module === 'object' && module && typeof exports === 'object' && exports)\r\n        module['exports'] = (function() {\r\n            var Long; try { Long = require(\"long\"); } catch (e) {}\r\n            return loadByteBuffer(Long);\r\n        })();\r\n    /* AMD */ else if (typeof define === 'function' && define[\"amd\"])\r\n        define(\"ByteBuffer\", [\"Long\"], function(Long) { return loadByteBuffer(Long); });\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"ByteBuffer\"] = loadByteBuffer(global[\"dcodeIO\"][\"Long\"]);\r\n\r\n})(this);\r\n","/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\nmodule.exports = require(\"./dist/Long.js\");\r\n","/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/Long.js for details\r\n */\r\n(function(global) {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n     *  See the from* functions below for more convenient ways of constructing Longs.\r\n     * @exports Long\r\n     * @class A Long class for representing a 64 bit two's-complement integer value.\r\n     * @param {number} low The low (signed) 32 bits of the long\r\n     * @param {number} high The high (signed) 32 bits of the long\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @constructor\r\n     */\r\n    var Long = function(low, high, unsigned) {\r\n\r\n        /**\r\n         * The low 32 bits as a signed value.\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        this.low = low|0;\r\n\r\n        /**\r\n         * The high 32 bits as a signed value.\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        this.high = high|0;\r\n\r\n        /**\r\n         * Whether unsigned or not.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        this.unsigned = !!unsigned;\r\n    };\r\n\r\n    // The internal representation of a long is the two given signed, 32-bit values.\r\n    // We use 32-bit pieces because these are the size of integers on which\r\n    // Javascript performs bit-operations.  For operations like addition and\r\n    // multiplication, we split each number into 16 bit pieces, which can easily be\r\n    // multiplied within Javascript's floating-point representation without overflow\r\n    // or change in sign.\r\n    //\r\n    // In the algorithms below, we frequently reduce the negative case to the\r\n    // positive case by negating the input(s) and then post-processing the result.\r\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n    // a positive number, it overflows back into a negative).  Not handling this\r\n    // case would often result in infinite recursion.\r\n    //\r\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n    // methods on which they depend.\r\n\r\n    /**\r\n     * Tests if the specified object is a Long.\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.isLong = function(obj) {\r\n        return (obj && obj instanceof Long) === true;\r\n    };\r\n\r\n    /**\r\n     * A cache of the Long representations of small integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var INT_CACHE = {};\r\n\r\n    /**\r\n     * A cache of the Long representations of small unsigned integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var UINT_CACHE = {};\r\n\r\n    /**\r\n     * Returns a Long representing the given 32 bit integer value.\r\n     * @param {number} value The 32 bit integer in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromInt = function(value, unsigned) {\r\n        var obj, cachedObj;\r\n        if (!unsigned) {\r\n            value = value | 0;\r\n            if (-128 <= value && value < 128) {\r\n                cachedObj = INT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = new Long(value, value < 0 ? -1 : 0, false);\r\n            if (-128 <= value && value < 128)\r\n                INT_CACHE[value] = obj;\r\n            return obj;\r\n        } else {\r\n            value = value >>> 0;\r\n            if (0 <= value && value < 256) {\r\n                cachedObj = UINT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\r\n            if (0 <= value && value < 256)\r\n                UINT_CACHE[value] = obj;\r\n            return obj;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     * @param {number} value The number in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromNumber = function(value, unsigned) {\r\n        unsigned = !!unsigned;\r\n        if (isNaN(value) || !isFinite(value))\r\n            return Long.ZERO;\r\n        if (!unsigned && value <= -TWO_PWR_63_DBL)\r\n            return Long.MIN_VALUE;\r\n        if (!unsigned && value + 1 >= TWO_PWR_63_DBL)\r\n            return Long.MAX_VALUE;\r\n        if (unsigned && value >= TWO_PWR_64_DBL)\r\n            return Long.MAX_UNSIGNED_VALUE;\r\n        if (value < 0)\r\n            return Long.fromNumber(-value, unsigned).negate();\r\n        return new Long((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n     *  assumed to use 32 bits.\r\n     * @param {number} lowBits The low 32 bits\r\n     * @param {number} highBits The high 32 bits\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromBits = function(lowBits, highBits, unsigned) {\r\n        return new Long(lowBits, highBits, unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the specified radix.\r\n     * @param {string} str The textual representation of the Long\r\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n     * @returns {!Long} The corresponding Long value\r\n     * @expose\r\n     */\r\n    Long.fromString = function(str, unsigned, radix) {\r\n        if (str.length === 0)\r\n            throw Error('number format error: empty string');\r\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n            return Long.ZERO;\r\n        if (typeof unsigned === 'number') // For goog.math.long compatibility\r\n            radix = unsigned,\r\n            unsigned = false;\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw Error('radix out of range: ' + radix);\r\n\r\n        var p;\r\n        if ((p = str.indexOf('-')) > 0)\r\n            throw Error('number format error: interior \"-\" character: ' + str);\r\n        else if (p === 0)\r\n            return Long.fromString(str.substring(1), unsigned, radix).negate();\r\n\r\n        // Do several (8) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = Long.fromNumber(Math.pow(radix, 8));\r\n\r\n        var result = Long.ZERO;\r\n        for (var i = 0; i < str.length; i += 8) {\r\n            var size = Math.min(8, str.length - i);\r\n            var value = parseInt(str.substring(i, i + size), radix);\r\n            if (size < 8) {\r\n                var power = Long.fromNumber(Math.pow(radix, size));\r\n                result = result.multiply(power).add(Long.fromNumber(value));\r\n            } else {\r\n                result = result.multiply(radixToPower);\r\n                result = result.add(Long.fromNumber(value));\r\n            }\r\n        }\r\n        result.unsigned = unsigned;\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Converts the specified value to a Long.\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.fromValue = function(val) {\r\n        if (typeof val === 'number')\r\n            return Long.fromNumber(val);\r\n        if (typeof val === 'string')\r\n            return Long.fromString(val);\r\n        if (Long.isLong(val))\r\n            return val;\r\n        // Throws for not an object (undefined, null):\r\n        return new Long(val.low, val.high, val.unsigned);\r\n    };\r\n\r\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n    // no runtime penalty for these.\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_16_DBL = 1 << 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24_DBL = 1 << 24;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\r\n\r\n    /**\r\n     * Signed zero.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.ZERO = Long.fromInt(0);\r\n\r\n    /**\r\n     * Unsigned zero.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.UZERO = Long.fromInt(0, true);\r\n\r\n    /**\r\n     * Signed one.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.ONE = Long.fromInt(1);\r\n\r\n    /**\r\n     * Unsigned one.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.UONE = Long.fromInt(1, true);\r\n\r\n    /**\r\n     * Signed negative one.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.NEG_ONE = Long.fromInt(-1);\r\n\r\n    /**\r\n     * Maximum signed value.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.MAX_VALUE = Long.fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n    /**\r\n     * Maximum unsigned value.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n    /**\r\n     * Minimum signed value.\r\n     * @type {!Long}\r\n     * @expose\r\n     */\r\n    Long.MIN_VALUE = Long.fromBits(0, 0x80000000|0, false);\r\n\r\n    /**\r\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    Long.prototype.toInt = function() {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    Long.prototype.toNumber = function() {\r\n        if (this.unsigned) {\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        }\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a string written in the specified radix.\r\n     * @param {number=} radix Radix (2-36), defaults to 10\r\n     * @returns {string}\r\n     * @override\r\n     * @throws {RangeError} If `radix` is out of range\r\n     * @expose\r\n     */\r\n    Long.prototype.toString = function(radix) {\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix out of range: ' + radix);\r\n        if (this.isZero())\r\n            return '0';\r\n        var rem;\r\n        if (this.isNegative()) { // Unsigned Longs are never negative\r\n            if (this.equals(Long.MIN_VALUE)) {\r\n                // We need to change the Long value before it can be negated, so we remove\r\n                // the bottom-most digit in this base and then recurse to do the rest.\r\n                var radixLong = Long.fromNumber(radix);\r\n                var div = this.div(radixLong);\r\n                rem = div.multiply(radixLong).subtract(this);\r\n                return div.toString(radix) + rem.toInt().toString(radix);\r\n            } else\r\n                return '-' + this.negate().toString(radix);\r\n        }\r\n\r\n        // Do several (6) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\r\n        rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.div(radixToPower),\r\n                intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0,\r\n                digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as a signed integer.\r\n     * @returns {number} Signed high bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getHighBits = function() {\r\n        return this.high;\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned high bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getHighBitsUnsigned = function() {\r\n        return this.high >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as a signed integer.\r\n     * @returns {number} Signed low bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getLowBits = function() {\r\n        return this.low;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned low bits\r\n     * @expose\r\n     */\r\n    Long.prototype.getLowBitsUnsigned = function() {\r\n        return this.low >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the number of bits needed to represent the absolute value of this Long.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    Long.prototype.getNumBitsAbs = function() {\r\n        if (this.isNegative()) // Unsigned Longs are never negative\r\n            return this.equals(Long.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isZero = function() {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is negative.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isNegative = function() {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is positive.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isPositive = function() {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is odd.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isOdd = function() {\r\n        return (this.low & 1) === 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is even.\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.isEven = function() {\r\n        return (this.low & 1) === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.equals = function(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.notEquals = function(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return !this.equals(other);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lessThan = function(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return this.compare(other) < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.lessThanOrEqual = function(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return this.compare(other) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.greaterThan = function(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return this.compare(other) > 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     * @expose\r\n     */\r\n    Long.prototype.greaterThanOrEqual = function(other) {\r\n        return this.compare(other) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     * @expose\r\n     */\r\n    Long.prototype.compare = function(other) {\r\n        if (this.equals(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(),\r\n            otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        // At this point the sign bits are the same\r\n        if (!this.unsigned)\r\n            return this.subtract(other).isNegative() ? -1 : 1;\r\n        // Both are positive if at least one is unsigned\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value.\r\n     * @returns {!Long} Negated Long\r\n     * @expose\r\n     */\r\n    Long.prototype.negate = function() {\r\n        if (!this.unsigned && this.equals(Long.MIN_VALUE))\r\n            return Long.MIN_VALUE;\r\n        return this.not().add(Long.ONE);\r\n    };\r\n\r\n    /**\r\n     * Returns the sum of this and the specified Long.\r\n     * @param {!Long|number|string} addend Addend\r\n     * @returns {!Long} Sum\r\n     * @expose\r\n     */\r\n    Long.prototype.add = function(addend) {\r\n        if (!Long.isLong(addend))\r\n            addend = Long.fromValue(addend);\r\n\r\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long.\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     * @expose\r\n     */\r\n    Long.prototype.subtract = function(subtrahend) {\r\n        if (!Long.isLong(subtrahend))\r\n            subtrahend = Long.fromValue(subtrahend);\r\n        return this.add(subtrahend.negate());\r\n    };\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long.\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     * @expose\r\n     */\r\n    Long.prototype.multiply = function(multiplier) {\r\n        if (this.isZero())\r\n            return Long.ZERO;\r\n        if (!Long.isLong(multiplier))\r\n            multiplier = Long.fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return Long.ZERO;\r\n        if (this.equals(Long.MIN_VALUE))\r\n            return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\r\n        if (multiplier.equals(Long.MIN_VALUE))\r\n            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\r\n\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.negate().multiply(multiplier.negate());\r\n            else\r\n                return this.negate().multiply(multiplier).negate();\r\n        } else if (multiplier.isNegative())\r\n            return this.multiply(multiplier.negate()).negate();\r\n\r\n        // If both longs are small, use float multiplication\r\n        if (this.lessThan(TWO_PWR_24) && multiplier.lessThan(TWO_PWR_24))\r\n            return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n        // We can skip products that would overflow.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long divided by the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     * @expose\r\n     */\r\n    Long.prototype.div = function(divisor) {\r\n        if (!Long.isLong(divisor))\r\n            divisor = Long.fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw(new Error('division by zero'));\r\n        if (this.isZero())\r\n            return this.unsigned ? Long.UZERO : Long.ZERO;\r\n        var approx, rem, res;\r\n        if (this.equals(Long.MIN_VALUE)) {\r\n            if (divisor.equals(Long.ONE) || divisor.equals(Long.NEG_ONE))\r\n                return Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.equals(Long.MIN_VALUE))\r\n                return Long.ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shiftRight(1);\r\n                approx = halfThis.div(divisor).shiftLeft(1);\r\n                if (approx.equals(Long.ZERO)) {\r\n                    return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\r\n                } else {\r\n                    rem = this.subtract(divisor.multiply(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.equals(Long.MIN_VALUE))\r\n            return this.unsigned ? Long.UZERO : Long.ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.negate().div(divisor.negate());\r\n            return this.negate().div(divisor).negate();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.negate()).negate();\r\n\r\n        // Repeat the following until the remainder is less than other:  find a\r\n        // floating-point that approximates remainder / other *from below*, add this\r\n        // into the result, and subtract it from the remainder.  It is critical that\r\n        // the approximate value is less than or equal to the real value so that the\r\n        // remainder never becomes negative.\r\n        res = Long.ZERO;\r\n        rem = this;\r\n        while (rem.greaterThanOrEqual(divisor)) {\r\n            // Approximate the result of division. This may be a little greater or\r\n            // smaller than the actual value.\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n            // We will tweak the approximate result by changing it in the 48-th digit or\r\n            // the smallest non-fractional digit, whichever is larger.\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n                delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48),\r\n\r\n            // Decrease the approximation until it is smaller than the remainder.  Note\r\n            // that if it is too large, the product overflows and is negative.\r\n                approxRes = Long.fromNumber(approx),\r\n                approxRem = approxRes.multiply(divisor);\r\n            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\r\n                approx -= delta;\r\n                approxRes = Long.fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.multiply(divisor);\r\n            }\r\n\r\n            // We know the answer can't be zero... and actually, zero would cause\r\n            // infinite recursion since we would make no progress.\r\n            if (approxRes.isZero())\r\n                approxRes = Long.ONE;\r\n\r\n            res = res.add(approxRes);\r\n            rem = rem.subtract(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * Returns this Long modulo the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     * @expose\r\n     */\r\n    Long.prototype.modulo = function(divisor) {\r\n        if (!Long.isLong(divisor))\r\n            divisor = Long.fromValue(divisor);\r\n        return this.subtract(this.div(divisor).multiply(divisor));\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise NOT of this Long.\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.not = function() {\r\n        return Long.fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise AND of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.and = function(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise OR of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.or = function(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise XOR of this Long and the given one.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     * @expose\r\n     */\r\n    Long.prototype.xor = function(other) {\r\n        if (!Long.isLong(other))\r\n            other = Long.fromValue(other);\r\n        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shiftLeft = function(numBits) {\r\n        if (Long.isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return Long.fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shiftRight = function(numBits) {\r\n        if (Long.isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return Long.fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     * @expose\r\n     */\r\n    Long.prototype.shiftRightUnsigned = function(numBits) {\r\n        if (Long.isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits &= 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            } else if (numBits === 32)\r\n                return Long.fromBits(high, 0, this.unsigned);\r\n            else\r\n                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to signed.\r\n     * @returns {!Long} Signed long\r\n     * @expose\r\n     */\r\n    Long.prototype.toSigned = function() {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return new Long(this.low, this.high, false);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to unsigned.\r\n     * @returns {!Long} Unsigned long\r\n     * @expose\r\n     */\r\n    Long.prototype.toUnsigned = function() {\r\n        if (this.unsigned)\r\n            return this;\r\n        return new Long(this.low, this.high, true);\r\n    };\r\n\r\n    /* CommonJS */ if (typeof require === 'function' && typeof module === 'object' && module && typeof exports === 'object' && exports)\r\n        module[\"exports\"] = Long;\r\n    /* AMD */ else if (typeof define === 'function' && define[\"amd\"])\r\n        define(function() { return Long; });\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = Long;\r\n\r\n})(this);\r\n"]}